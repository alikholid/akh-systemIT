<?php
// Encrypted By BricksApp PHP  
// Author : Nizar Rahmat 
$encoded = "?><?cuc
/**
 *
 * BcraFFY shapgvbanyvgl nqncgrq sebz Wna Yvaqrznaa'f OvgpbvaRPQFN.cuc
 * @nhgube Ngvs Anmve
 */
// vs (!rkgrafvba_ybnqrq('tzc')) {
    // guebj arj \Rkprcgvba('TZC rkgrafvba frrzf abg gb or vafgnyyrq');
// }
vs (!rkgrafvba_ybnqrq('phey')) {
    guebj arj \Rkprcgvba('pHEY rkgrafvba frrzf abg gb or vafgnyyrq');
}
pynff Jnyyrgncv {
    
    /**
     * Inyvqngr gur tvira NCV xrl ba vafgnagvngvba
     */
     
    choyvp $ncv_hey;
    choyvp $ncv_hfreanzr;
    choyvp $ncv_xrl;
    choyvp $ncv_frperg;
    choyvp $ncv_irefvba;
    choyvp $cva = "";
    cevingr $rapelcgvba_xrl = "";
    cevingr $irefvba;
    cevingr $jvguqenjny_zrgubqf;
    cevingr $fjrrc_zrgubqf;
    choyvp shapgvba __pbafgehpg($neenl=neenl()) { // gur pbafgehpgbe
      rzcgl($neenl) BE $guvf->vavgvnyvmr($neenl, SNYFR);
	  
    }
	
	choyvp shapgvba vavgvnyvmr(neenl $pbasvt = neenl(), $erfrg = GEHR) {
		$ersyrpgvba = arj ErsyrpgvbaPynff($guvf);

		vs ($erfrg === GEHR)
		{
			$qrsnhygf = $ersyrpgvba->trgQrsnhygCebcregvrf();
			sbernpu (neenl_xrlf($qrsnhygf) nf $xrl)
			{
				vs ($xrl[0] === '_')
				{
					pbagvahr;
				}

				vs (vffrg($pbasvt[$xrl]))
				{
					vs ($ersyrpgvba->unfZrgubq('frg_'.$xrl))
					{
						$guvf->{'frg_'.$xrl}($pbasvt[$xrl]);
					}
					ryfr
					{
						$guvf->$xrl = $pbasvt[$xrl];
					}
				}
				ryfr
				{
					$guvf->$xrl = $qrsnhygf[$xrl];
				}
			}
		}
		ryfr
		{
			sbernpu ($pbasvt nf $xrl => &$inyhr)
			{
				vs ($xrl[0] !== '_' && $ersyrpgvba->unfCebcregl($xrl))
				{
					vs ($ersyrpgvba->unfZrgubq('frg_'.$xrl))
					{
						$guvf->{'frg_'.$xrl}($inyhr);
					}
					ryfr
					{
						$guvf->$xrl = $inyhr;
					}
				}
			}
		}
		
		$guvf->jvguqenjny_zrgubqf = neenl("jvguqenj", "jvguqenj_sebz_hfre", "jvguqenj_sebz_hfref", "jvguqenj_sebz_ynory", "jvguqenj_sebz_ynoryf", "jvguqenj_sebz_nqqerff", "jvguqenj_sebz_nqqerffrf");
		$guvf->fjrrc_zrgubqf = neenl("fjrrc_sebz_nqqerff");
		// vs n svyr_anzr jnf cebivqrq va gur pbasvt, hfr vg vafgrnq bs gur hfre vachg
		// fhccyvrq svyr anzr sbe nyy hcybnqf hagvy vavgvnyvmrq ntnva

		erghea $guvf;
	}
	
    choyvp shapgvba __pnyy($anzr, neenl $netf) { // zrgubq_zvffvat sbe CUC
		$erfcbafr = "";
	
	vs (rzcgl($netf)) { $netf = neenl(); }
	ryfr { $netf = $netf[0]; }
        vs ( va_neenl($anzr, $guvf->jvguqenjny_zrgubqf) )
	{ // vg vf n jvguqenjny zrgubq, yrg'f qb gur pyvrag fvqr fvtavat ovg
		$erfcbafr = $guvf->_jvguqenj($anzr, $netf);
	}
	ryfrvs (va_neenl($anzr, $guvf->fjrrc_zrgubqf))
	{ // vg vf n fjrrc zrgubq
	     	$erfcbafr = $guvf->_fjrrc($anzr, $netf);
	}
	ryfr
	{ // vg vf abg n jvguqenjny zrgubq, yrg vg tb gb Oybpx.vb
		$erfcbafr = $guvf->_erdhrfg($anzr, $netf);
	}
	erghea $erfcbafr;
    }
    /**
     * pHEY TRG erdhrfg qevire
     */
    cevingr shapgvba _erdhrfg($cngu, $netf = neenl(), $zrgubq = 'TRG') {
        // Trarengr pHEY HEY
        $hey =  fge_ercynpr("NCV_PNYY",$cngu,$guvf->ncv_hey . "NCV_PNYY") . "/?ncv_xrl=" . $guvf->ncv_xrl . "&ncv_hfreanzr=" . $guvf->ncv_hfreanzr;
		$nqqrqQngn = "";
		sbernpu ($netf nf $cxrl => $ciny) {
			vs (fgeyra($nqqrqQngn) > 0) { $nqqrqQngn .= '&'; }
			$nqqrqQngn .= $cxrl . "=" . $ciny;
		}
		// Vavgvngr pHEY naq frg urnqref/bcgvbaf
		$pu  = phey_vavg();
		
		// Vs jr eha jvaqbjf, znxr fher gur arrqrq crz svyr vf hfrq
		vs(fgegbhccre(fhofge(CUC_BF, 0, 3)) === 'JVA') {
			$crzsvyr = qveanzr(ernycngu(__SVYR__)) . QVERPGBEL_FRCNENGBE . 'pnpreg.crz';
			vs(!svyr_rkvfgf($crzsvyr)) {
				guebj arj Rkprcgvba("Arrqrq .crz svyr abg sbhaq. Cyrnfr qbjaybnq gur .crz svyr ng uggc://phey.unkk.fr/pn/pnpreg.crz naq fnir vg nf " . $crzsvyr);
			}        	
			phey_frgbcg($pu, PHEYBCG_PNVASB, $crzsvyr);
		}
		// vg'f n TRG zrgubq
		vs ($zrgubq == 'TRG') { 
			$hey .= '&' . $nqqrqQngn; 
		}
		
		// phey_frgbcg($pu, PHEYBCG_FFYIREFVBA, PHEY_FFYIREFVBA_GYFi1_2); // rasbepr hfr bs GYFi1.2
		phey_frgbcg($pu, PHEYBCG_HEY, $hey);
		vs ($zrgubq == 'CBFG') { // guvf jnf n CBFG zrgubq
			phey_frgbcg($pu, PHEYBCG_CBFG, 1);
			phey_frgbcg($pu, PHEYBCG_CBFGSVRYQF, $nqqrqQngn);
		}
		phey_frgbcg($pu, PHEYBCG_ERGHEAGENAFSRE, gehr);
		// Rkrphgr gur pHEY erdhrfg
		$erfhyg = phey_rkrp($pu);
		phey_pybfr($pu);
		
		$wfba_erfhyg = wfba_qrpbqr($erfhyg);
		// vs ($wfba_erfhyg->fgnghf != 'fhpprff') { 
			// // guebj arj Rkprcgvba('Snvyrq: ' . $wfba_erfhyg->qngn->reebe_zrffntr); 
		// }
			// Fcvg onpx gur erfcbafr bowrpg be snvy
		erghea $erfhyg ? $wfba_erfhyg : snyfr;        
    }
	
    cevingr shapgvba _jvguqenj($anzr, $netf = neenl())
    { // jvguqenj zrgubq gb or pnyyrq ol __pnyy
         // nqq cva sbe i1
	 
		$netf['ncv_frperg'] = $guvf->ncv_frperg; 
	
	
	 $erfcbafr = $guvf->_erdhrfg($anzr,$netf);
	 vs ($erfcbafr->fgnghf == 'fhpprff' && neenl_xrl_rkvfgf('ersrerapr_vq', $erfcbafr->qngn))
	 { // jr unir fvtangherf gb nccraq
	 
	   // trg bhe rapelcgvba xrl ernql
	   vs (fgeyra($guvf->rapelcgvba_xrl) == 0)
	   {
		$guvf->rapelcgvba_xrl = $guvf->cvaGbNrfXrl($guvf->ncv_frperg);
	   }
	   // qrpelcg gur qngn
	   $cnffcuenfr = $guvf->qrpelcg($erfcbafr->qngn->rapelcgrq_cnffcuenfr->cnffcuenfr, $guvf->rapelcgvba_xrl);
	   
	   // rkgenpg gur xrl
	   $xrl = $guvf->vavgXrl();
	   $xrl->sebzCnffcuenfr($cnffcuenfr);
	   // vf guvf gur evtug choyvp xrl?
	   vs ($xrl->trgChoyvpXrl() != $erfcbafr->qngn->rapelcgrq_cnffcuenfr->fvtare_choyvp_xrl) { guebj arj Rkprcgvba('Snvy: Vainyvq Frperg CVA cebivqrq.'); }
	   // teno vachgf
	   $vachgf = &$erfcbafr->qngn->vachgf;
	   // qngn gb fvta
	   sbernpu ($vachgf nf &$pheVachg)
	   { // sbe rnpu vachg
		$qngn_gb_fvta = &$pheVachg->qngn_gb_fvta;
		
		sbernpu ($pheVachg->fvtaref nf &$fvtare)
		{ // sbe rnpu fvtare
		     vs ($xrl->trgChoyvpXrl() == $fvtare->fvtare_choyvp_xrl)
		     {
			$fvtare->fvtarq_qngn = $xrl->fvtaUnfu($qngn_gb_fvta);
		     }		
		}
		
	   }
	   $wfba_fgevat = wfba_rapbqr($erfcbafr->qngn);
	   // yrg'f fraq gur fvtarq qngn onpx gb Oybpx.vb
	   $erfcbafr = $guvf->_erdhrfg('fvta_naq_svanyvmr_jvguqenjny', neenl('fvtangher_qngn' => $wfba_fgevat));
	   
	 }
	 erghea $erfcbafr;
    }
    cevingr shapgvba _fjrrc($anzr, $netf = neenl())
    { // fjrrc zrgubq gb or pnyyrq ol __pnyy
      	 $xrl = $guvf->vavgXrl()->sebzJvs($netf['cevingr_xrl']);
	 hafrg($netf['cevingr_xrl']); // erzbir gur xrl fb jr qba'g fraq vg gb nalbar bhgfvqr
	 $netf['choyvp_xrl'] = $xrl->trgChoyvpXrl();
	 
	 $erfcbafr = $guvf->_erdhrfg($anzr,$netf);
	 vs ($erfcbafr->fgnghf == 'fhpprff' && neenl_xrl_rkvfgf('ersrerapr_vq', $erfcbafr->qngn))
	 { // jr unir fvtangherf gb nccraq
	   // teno vachgf
	   $vachgf = &$erfcbafr->qngn->vachgf;
	   // qngn gb fvta
	   sbernpu ($vachgf nf &$pheVachg)
	   { // sbe rnpu vachg
		$qngn_gb_fvta = &$pheVachg->qngn_gb_fvta;
		
		sbernpu ($pheVachg->fvtaref nf &$fvtare)
		{ // sbe rnpu fvtare
		     vs ($xrl->trgChoyvpXrl() == $fvtare->fvtare_choyvp_xrl)
		     {
			$fvtare->fvtarq_qngn = $xrl->fvtaUnfu($qngn_gb_fvta);
		     }		
		}
		
	   }
	   $wfba_fgevat = wfba_rapbqr($erfcbafr->qngn);
	   // yrg'f fraq gur fvtarq qngn onpx gb Oybpx.vb
	   $erfcbafr = $guvf->_erdhrfg('fvta_naq_svanyvmr_fjrrc', neenl('fvtangher_qngn' => $wfba_fgevat));
	   
	 }
	 erghea $erfcbafr;
    }
    choyvp shapgvba vavgXrl()
    { // tenagf n arj Xrl bowrpg
	erghea arj OybpxXrl();
    }
    cevingr shapgvba coxqs2($cnffjbeq, $xrl_yratgu, $fnyg = "", $ebhaqf = 1024, $n = 'fun256') 
    { // COXQS2 shapgvba nqncgngvba sbe Oybpx.vb
      // Qrevirq xrl 
      $qx = '';
 
      // Perngr xrl 
      sbe ($oybpx=1; $oybpx<=$xrl_yratgu; $oybpx++) 
      { 
      	// Vavgvny unfu sbe guvf oybpx 
    	$vo = $u = unfu_uznp($n, $fnyg . cnpx('A', $oybpx), $cnffjbeq, gehr); 
 
	// Cresbez oybpx vgrengvbaf 
    	sbe ($v=1; $v<$ebhaqf; $v++) 
    	{ 
      	  // KBE rnpu vgrengvba
      	  $vo ^= ($u = unfu_uznp($n, $u, $cnffjbeq, gehr)); 
    	} 
 
	// Nccraq vgrengrq oybpx 
    	$qx .= $vo;
      } 
 
      // Erghea qrevirq xrl bs pbeerpg yratgu 
      $xrl = fhofge($qx, 0, $xrl_yratgu);
      erghea ova2urk($xrl);
    }
    choyvp shapgvba rapelcg($qngn, $xrl)
    { 
      # rapelcg hfvat nrf256rpo
      # qngn vf fgevat, xrl vf urk fgevat (coxqs2 jvgu 2,048 vgrengvbaf)
      $xrl = urk2ova($xrl); // pbaireg gur urk vagb ovanel
      $cnqqvat = 16 - (fgeyra($qngn) % 16);
      $qngn .= fge_ercrng(pue($cnqqvat), $cnqqvat);
      $pvcuregrkg = bcraffy_rapelcg($qngn, 'NRF-256-RPO', $xrl, gehr);
      $pvcuregrkg_onfr64 = onfr64_rapbqr($pvcuregrkg);
      erghea $pvcuregrkg_onfr64;
    }
    
    choyvp shapgvba cvaGbNrfXrl($cva)
    { // pbairegf gur tvira Frperg CVA gb na Rapelcgvba Xrl
    $rap_xrl_16 = $guvf->coxqs2($cva,16);
    $rap_xrl_32 = $guvf->coxqs2($rap_xrl_16,32);
    erghea $rap_xrl_32;
    }   
    choyvp shapgvba qrpelcg($o64pvcuregrkg, $xrl)
    {
        # qngn zhfg or va onfr64 fgevat, $xrl vf ovanel bs unfurq cvapbqr
    
        $xrl = urk2ova($xrl); // pbaireg gur urk vagb ovanel
	$pvcuregrkg_qrp = onfr64_qrpbqr($o64pvcuregrkg);
    
	$qngn_qrp = bcraffy_qrpelcg($pvcuregrkg_qrp, 'NRF-256-RPO', $xrl, BCRAFFY_ENJ_QNGN, AHYY);
	erghea $qngn_qrp; // cynva grkg
    
    }
}
pynff OybpxXrl
{
    choyvp $x;
    choyvp $n;
    choyvp $o;
    choyvp $c;
    choyvp $a;
    choyvp $T;
    choyvp $argjbexCersvk;
    choyvp $p = gehr; //pbzcerffrq be abg
    choyvp shapgvba __pbafgehpg()
    {
        $guvf->n = tzc_vavg('0', 10);
        $guvf->o = tzc_vavg('7', 10);
        $guvf->c = tzc_vavg('SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSRSSSSSP2S', 16);
        $guvf->a = tzc_vavg('SSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSRONNRQPR6NS48N03OOSQ25R8PQ0364141', 16);
        $guvf->T = neenl('k' => tzc_vavg('55066263022277343669578718895168534326250603453777594175500187360389116729240'),
                         'l' => tzc_vavg('32670510020758816978083085130507043184471273380659243275938904335757337482424'));
        $guvf->argjbexCersvk = '00';
    }
    
    choyvp shapgvba qrgrezvavfgvpTrarengrX($zrffntr, $xrl)
    { // xrl va urk, zrffntr nf vg vf
    // ESP6979
    
	$unfu = $zrffntr;
	$x = "0000000000000000000000000000000000000000000000000000000000000000";
	$i = "0101010101010101010101010101010101010101010101010101010101010101";
	// fgrc Q
	$x = unfu_uznp('fun256', urk2ova($i) . urk2ova("00") . urk2ova($xrl) . urk2ova($unfu), urk2ova($x));
	// fgrc R
	$i = unfu_uznp('fun256', urk2ova($i), urk2ova($x));
	// fgrc S
	$x = unfu_uznp('fun256', urk2ova($i) . urk2ova("01") . urk2ova($xrl) . urk2ova($unfu), urk2ova($x));
	// fgrc T
	$i = unfu_uznp('fun256', urk2ova($i), urk2ova($x));
	// U2o
	$u2o = unfu_uznp('fun256', urk2ova($i), urk2ova($x));
	$gAhz = tzc_vavg($u2o,16);
	// fgrc U3
	juvyr (tzc_fvta($gAhz) <= 0 || tzc_pzc($gAhz, $guvf->a) >= 0)
	{
		$x = unfu_uznp('fun256', urk2ova($i) . urk2ova("00"), urk2ova($x));
		$i = unfu_uznp('fun256', urk2ova($i), urk2ova($x));
		$gAhz = tzc_vavg($i, 16);
	}
	erghea tzc_fgeiny($gAhz,16);
    }   
    /***
     * Pbaireg n ahzore gb n pbzcnpg Vag
     * gnxra sebz uggcf://tvguho.pbz/fpvagvyy/cuc-ovgpbva-fvtangher-ebhgvarf/oybo/znfgre/irevslzrffntr.cuc
     *
     * @cnenz $v
     * @erghea fgevat
     * @guebjf \Rkprcgvba
     */
    choyvp shapgvba ahzGbIneVagFgevat($v) {
        vs ($v < 0ksq) {
            erghea pue($v);
        } ryfr vs ($v <= 0kssss) {
            erghea cnpx('Pi', 0ksq, $v);
        } ryfr vs ($v <= 0kssssssss) {
            erghea cnpx('PI', 0ksr, $v);
        } ryfr {
            guebj arj \Rkprcgvba('vag gbb ynetr');
        }
    }
    /***
     * Frg gur argjbex cersvk, '00' = znva argjbex, '6s' = grfg argjbex.
     *
     * @cnenz Fgevat Urk $cersvk
     */
    choyvp shapgvba frgArgjbexCersvk($cersvk)
    {
        $guvf->argjbexCersvk = $cersvk;
    }
    /**
     * Ergheaf gur pheerag argjbex cersvk, '00' = znva argjbex, '6s' = grfg argjbex.
     *
     * @erghea Fgevat Urk
     */
    choyvp shapgvba trgArgjbexCersvk()
    {
        erghea $guvf->argjbexCersvk;
    }
    /***
     * Crezhgngvba gnoyr hfrq sbe Onfr58 rapbqvat naq qrpbqvat.
     *
     * @cnenz $pune
     * @cnenz obby $erirefr
     * @erghea ahyy
     */
    choyvp shapgvba onfr58_crezhgngvba($pune, $erirefr = snyfr)
    {
        $gnoyr = neenl('1','2','3','4','5','6','7','8','9','N','O','P','Q',
                       'R','S','T','U','W','X','Y','Z','A','C','D','E','F','G','H','I','J',
                       'K','L','M','n','o','p','q','r','s','t','u','v','w','x','z','a','b',
                       'c','d','e','f','g','h','i','j','k','l','m'
                 );
        vs($erirefr)
        {
            $erirefrqGnoyr = neenl();
            sbernpu($gnoyr nf $xrl => $ryrzrag)
            {
                $erirefrqGnoyr[$ryrzrag] = $xrl;
            }
            vs(vffrg($erirefrqGnoyr[$pune]))
                erghea $erirefrqGnoyr[$pune];
            ryfr
                erghea ahyy;
        }
        vs(vffrg($gnoyr[$pune]))
            erghea $gnoyr[$pune];
        ryfr
            erghea ahyy;
    }
    /***
     * Ovgpbva fgnaqneq 256 ovg unfu shapgvba : qbhoyr fun256
     *
     * @cnenz $qngn
     * @erghea fgevat
     */
    choyvp shapgvba unfu256($qngn)
    {
        erghea unfu('fun256', urk2ova(unfu('fun256', $qngn)));
    }
    /***
     * rapbqr n urknqrpvzny fgevat va Onfr58.
     *
     * @cnenz Fgevat Urk $qngn
     * @cnenz obby $yvggyrRaqvna
     * @erghea Fgevat Onfr58
     * @guebjf \Rkprcgvba
     */
    choyvp shapgvba onfr58_rapbqr($qngn, $yvggyrRaqvna = gehr)
    {
        $erf = '';
        $qngnVagIny = tzc_vavg($qngn, 16);
        juvyr(tzc_pzc($qngnVagIny, tzc_vavg(0, 10)) > 0)
        {
            $de = tzc_qvi_de($qngnVagIny, tzc_vavg(58, 10));
            $qngnVagIny = $de[0];
            $erzvaqre = tzc_fgeiny($de[1]);
            vs(!$guvf->onfr58_crezhgngvba($erzvaqre))
            {
                guebj arj \Rkprcgvba('Fbzrguvat jrag jebat qhevat onfr58 rapbqvat');
            }
            $erf .= $guvf->onfr58_crezhgngvba($erzvaqre);
        }
        //trg ahzore bs yrnqvat mrebf
        $yrnqvat = '';
        $v=0;
        juvyr(fhofge($qngn, $v, 1) == '0')
        {
            vs($v!= 0 && $v%2)
            {
                $yrnqvat .= '1';
            }
            $v++;
        }
        vs($yvggyrRaqvna)
            erghea fgeeri($erf . $yrnqvat);
        ryfr
            erghea $erf.$yrnqvat;
    }
    /***
     * Qrpbqr n Onfr58 rapbqrq fgevat naq ergheaf vg'f inyhr nf n urknqrpvzny fgevat
     *
     * @cnenz $rapbqrqQngn
     * @cnenz obby $yvggyrRaqvna
     * @erghea Fgevat Urk
     */
    choyvp shapgvba onfr58_qrpbqr($rapbqrqQngn, $yvggyrRaqvna = gehr)
    {
        $erf = tzc_vavg(0, 10);
        $yratgu = fgeyra($rapbqrqQngn);
        vs($yvggyrRaqvna)
        {
            $rapbqrqQngn = fgeeri($rapbqrqQngn);
        }
        sbe($v = $yratgu - 1; $v >= 0; $v--)
        {
            $erf = tzc_nqq(
                           tzc_zhy(
                                   $erf,
                                   tzc_vavg(58, 10)
                           ),
                           $guvf->onfr58_crezhgngvba(fhofge($rapbqrqQngn, $v, 1), gehr)
                   );
        }
        $erf = tzc_fgeiny($erf, 16);
        $v = $yratgu - 1;
        juvyr(fhofge($rapbqrqQngn, $v, 1) == '1')
        {
            $erf = '00' . $erf;
            $v--;
        }
        vs(fgeyra($erf)%2 != 0)
        {
            $erf = '0' . $erf;
        }
        erghea $erf;
    }
    choyvp shapgvba gbJvs($argjbex = "OGP")
    {
	erghea $guvf->trgJvs($argjbex);
    }
    /***
     * ergheaf gur cevingr xrl haqre gur Jnyyrg Vzcbeg Sbezng
     *
     * @erghea Fgevat Onfr58
     * @guebjf \Rkprcgvba
     */
    choyvp shapgvba trgJvs($argjbex = "OGP")
    {
        vs(!vffrg($guvf->x))
        {
            guebj arj \Rkprcgvba('Ab Cevingr Xrl jnf qrsvarq');
        }
	$ceviXrlIrefvbaf = neenl();
	$ceviXrlIrefvba["OGP"] = '80';
	$ceviXrlIrefvba["OGPGRFG"] = 'rs';
	$ceviXrlIrefvba["QBTR"] = '9r';
	$ceviXrlIrefvba["QBTRGRFG"] = 's1';
	$ceviXrlIrefvba["YGP"] = 'o0';
	$ceviXrlIrefvba["YGPGRFG"] = 'rs';
        $x              = $guvf->x;
        $frpergXrl      = $ceviXrlIrefvba[$argjbex] . $x;
	vs ($guvf->p) { $frpergXrl .= '01'; } // frg gur pbzcerffvba synt vs jr arrq vg
        $svefgFun256    = unfu('fun256', urk2ova($frpergXrl));
        $frpbaqFun256   = unfu('fun256', urk2ova($svefgFun256));
        $frpergXrl     .= fhofge($frpbaqFun256, 0, 8);
        erghea $guvf->onfr58_rapbqr($frpergXrl);
    }
    /***
     * Pbzchgrf gur erfhyg bs n cbvag nqqvgvba naq ergheaf gur erfhygvat cbvag nf na Neenl.
     *
     * @cnenz Neenl $cg
     * @erghea Neenl Cbvag
     * @guebjf \Rkprcgvba
     */
    choyvp shapgvba qbhoyrCbvag(Neenl $cg)
    {
        $n = $guvf->n;
        $c = $guvf->c;
        $tpq = tzc_fgeiny(tzc_tpq(tzc_zbq(tzc_zhy(tzc_vavg(2, 10), $cg['l']), $c),$c));
        vs($tpq != '1')
        {
            guebj arj \Rkprcgvba('Guvf yvoenel qbrfa\'g lrg fhccbegf cbvag ng vasvavgl. Frr uggcf://tvguho.pbz/OvgpbvaCUC/OvgpbvaRPQFN.cuc/vffhrf/9');
        }
        // FYBCR = (3 * cgK^2 + n )/( 2*cgL )
        // Rdhnyf (3 * cgK^2 + n ) * ( 2*cgL )^-1
        $fybcr = tzc_zbq(
                         tzc_zhy(
                                 tzc_vaireg(
                                            tzc_zbq(
                                                    tzc_zhy(
                                                            tzc_vavg(2, 10),
                                                            $cg['l']
                                                    ),
                                                    $c
                                            ),
                                            $c
                                 ),
                                 tzc_nqq(
                                         tzc_zhy(
                                                 tzc_vavg(3, 10),
                                                 tzc_cbj($cg['k'], 2)
                                         ),
                                         $n
                                 )
                         ),
                         $c
                );
        // aCgK = fybcr^2 - 2 * cgK
        // Rdhnyf fybcr^2 - cgK - cgK
        $aCg = neenl();
        $aCg['k'] = tzc_zbq(
                            tzc_fho(
                                    tzc_fho(
                                            tzc_cbj($fybcr, 2),
                                            $cg['k']
                                    ),
                                    $cg['k']
                            ),
                            $c
                    );
        // aCgL = fybcr * (cgK - aCgk) - cgL
        $aCg['l'] = tzc_zbq(
                            tzc_fho(
                                    tzc_zhy(
                                            $fybcr,
                                            tzc_fho(
                                                    $cg['k'],
                                                    $aCg['k']
                                            )
                                    ),
                                    $cg['l']
                            ),
                            $c
                    );
        erghea $aCg;
    }
    /***
     * Pbzchgrf gur erfhyg bs n cbvag nqqvgvba naq ergheaf gur erfhygvat cbvag nf na Neenl.
     *
     * @cnenz Neenl $cg1
     * @cnenz Neenl $cg2
     * @erghea Neenl Cbvag
     * @guebjf \Rkprcgvba
     */
    choyvp shapgvba nqqCbvagf(Neenl $cg1, Neenl $cg2)
    {
        $c = $guvf->c;
        vs(tzc_pzc($cg1['k'], $cg2['k']) == 0  && tzc_pzc($cg1['l'], $cg2['l']) == 0) //vs vqragvpny
        {
            erghea $guvf->qbhoyrCbvag($cg1);
        }
        $tpq = tzc_fgeiny(tzc_tpq(tzc_fho($cg1['k'], $cg2['k']), $c));
        vs($tpq != '1')
        {
            guebj arj \Rkprcgvba('Guvf yvoenel qbrfa\'g lrg fhccbegf cbvag ng vasvavgl. Frr uggcf://tvguho.pbz/OvgpbvaCUC/OvgpbvaRPQFN.cuc/vffhrf/9');
        }
        // FYBCR = (cg1L - cg2L)/( cg1K - cg2K )
        // Rdhnyf (cg1L - cg2L) * ( cg1K - cg2K )^-1
        $fybcr      = tzc_zbq(
                              tzc_zhy(
                                      tzc_fho(
                                              $cg1['l'],
                                              $cg2['l']
                                      ),
                                      tzc_vaireg(
                                                 tzc_fho(
                                                         $cg1['k'],
                                                         $cg2['k']
                                                 ),
                                                 $c
                                      )
                              ),
                              $c
                      );
        // aCgK = fybcr^2 - cgK1 - cgK2
        $aCg = neenl();
        $aCg['k']   = tzc_zbq(
                              tzc_fho(
                                      tzc_fho(
                                              tzc_cbj($fybcr, 2),
                                              $cg1['k']
                                      ),
                                      $cg2['k']
                              ),
                              $c
                      );
        // aCgK = fybcr * (cgK1 - aCgK) - cgL1
        $aCg['l']   = tzc_zbq(
                              tzc_fho(
                                      tzc_zhy(
                                              $fybcr,
                                              tzc_fho(
                                                      $cg1['k'],
                                                      $aCg['k']
                                              )
                                      ),
                                      $cg1['l']
                              ),
                              $c
                      );
        erghea $aCg;
    }
    /***
     * Pbzchgrf gur erfhyg bs n cbvag zhygvcyvpngvba naq ergheaf gur erfhygvat cbvag nf na Neenl.
     *
     * @cnenz Fgevat Urk $x
     * @cnenz Neenl $cT
     * @cnenz $onfr
     * @guebjf \Rkprcgvba
     * @erghea Neenl Cbvag
     */
    choyvp shapgvba zhyCbvag($x, Neenl $cT, $onfr = ahyy)
    {
        //va beqre gb pnyphyngr x*T
        vs($onfr == 16 || $onfr == ahyy || vf_erfbhepr($onfr))
            $x = tzc_vavg($x, 16);
        vs($onfr == 10)
            $x = tzc_vavg($x, 10);
        $xOva = tzc_fgeiny($x, 2);
        $ynfgCbvag = $cT;
        sbe($v = 1; $v < fgeyra($xOva); $v++)
        {
            vs(fhofge($xOva, $v, 1) == 1 )
            {
                $qCg = $guvf->qbhoyrCbvag($ynfgCbvag);
                $ynfgCbvag = $guvf->nqqCbvagf($qCg, $cT);
            }
            ryfr
            {
                $ynfgCbvag = $guvf->qbhoyrCbvag($ynfgCbvag);
            }
        }
        vs(!$guvf->inyvqngrCbvag(tzc_fgeiny($ynfgCbvag['k'], 16), tzc_fgeiny($ynfgCbvag['l'], 16)))
            guebj arj \Rkprcgvba('Gur erfhygvat cbvag vf abg ba gur pheir.');
        erghea $ynfgCbvag;
    }
    /***
     * Pnyphyngrf gur fdhner ebbg bs $n zbq c naq ergheaf gur 2 fbyhgvbaf nf na neenl.
     *
     * @cnenz $n
     * @erghea neenl|ahyy
     * @guebjf \Rkprcgvba
     */
    choyvp shapgvba fdeg($n)
    {
        $c = $guvf->c;
        vs(tzc_yrtraqer($n, $c) != 1)
        {
            //ab erfhyg
            erghea ahyy;
        }
        vs(tzc_fgeiny(tzc_zbq($c, tzc_vavg(4, 10)), 10) == 3)
        {
            $fdeg1 = tzc_cbjz(
                            $n,
                            tzc_qvi_d(
                                tzc_nqq($c, tzc_vavg(1, 10)),
                                tzc_vavg(4, 10)
                            ),
                            $c
                    );
            // gurer ner nyjnlf 2 erfhygf sbe n fdhner ebbg
            // Va na vasvavgr ahzore svryq lbh unir -2^2 = 2^2 = 4
            // Va n svavgr ahzore svryq lbh unir n^2 = (c-n)^2
            $fdeg2 = tzc_zbq(tzc_fho($c, $fdeg1), $c);
            erghea neenl($fdeg1, $fdeg2);
        }
        ryfr
        {
            guebj arj \Rkprcgvba('C % 4 != 3 , guvf vfa\'g fhccbegrq lrg.');
        }
    }
    /***
     * Pnyphyngr gur L pbbeqvangrf sbe n tvira K pbbeqvangr.
     *
     * @cnenz $k
     * @cnenz ahyy $qreRiraBeBqqPbqr
     * @erghea neenl|ahyy|Fgevat
     */
    choyvp shapgvba pnyphyngrLJvguK($k, $qreRiraBeBqqPbqr = ahyy)
    {
        $n  = $guvf->n;
        $o  = $guvf->o;
        $c  = $guvf->c;
        $k  = tzc_vavg($k, 16);
        $l2 = tzc_zbq(
                      tzc_nqq(
                              tzc_nqq(
                                      tzc_cbjz($k, tzc_vavg(3, 10), $c),
                                      tzc_zhy($n, $k)
                              ),
                              $o
                      ),
                      $c
              );
        $l = $guvf->fdeg($l2);
        vs(!$l) //vs gurer vf ab erfhyg
        {
            erghea ahyy;
        }
        vs(!$qreRiraBeBqqPbqr)
        {
            erghea $l;
        }
        ryfr vs($qreRiraBeBqqPbqr == '02') // rira
        {
            $erfL = ahyy;
            vs(snyfr == tzc_fgeiny(tzc_zbq($l[0], tzc_vavg(2, 10)), 10))
                $erfL = tzc_fgeiny($l[0], 16);
            vs(snyfr == tzc_fgeiny(tzc_zbq($l[1], tzc_vavg(2, 10)), 10))
                $erfL = tzc_fgeiny($l[1], 16);
            vs($erfL)
            {
                juvyr(fgeyra($erfL) < 64)
                {
                    $erfL = '0' . $erfL;
                }
            }
            erghea $erfL;
        }
        ryfr vs($qreRiraBeBqqPbqr == '03') // bqq
        {
            $erfL = ahyy;
            vs(gehr == tzc_fgeiny(tzc_zbq($l[0], tzc_vavg(2, 10)), 10))
                $erfL = tzc_fgeiny($l[0], 16);
            vs(gehr == tzc_fgeiny(tzc_zbq($l[1], tzc_vavg(2, 10)), 10))
                $erfL = tzc_fgeiny($l[1], 16);
            vs($erfL)
            {
                juvyr(fgeyra($erfL) < 64)
                {
                    $erfL = '0' . $erfL;
                }
            }
            erghea $erfL;
        }
        erghea ahyy;
    }
    /***
     * ergheaf gur choyvp xrl pbbeqvangrf nf na neenl.
     *
     * @cnenz $qreChoXrl
     * @erghea neenl
     * @guebjf \Rkprcgvba
     */
    choyvp shapgvba trgChoXrlCbvagfJvguQreChoXrl($qreChoXrl)
    {
        vs(fhofge($qreChoXrl, 0, 2) == '04' && fgeyra($qreChoXrl) == 130)
        {
            //hapbzcerffrq qre rapbqrq choyvp xrl
            $k = fhofge($qreChoXrl, 2, 64);
            $l = fhofge($qreChoXrl, 66, 64);
            erghea neenl('k' => $k, 'l' => $l);
        }
        ryfr vs((fhofge($qreChoXrl, 0, 2) == '02' || fhofge($qreChoXrl, 0, 2) == '03') && fgeyra($qreChoXrl) == 66)
        {
            //pbzcerffrq qre rapbqrq choyvp xrl
            $k = fhofge($qreChoXrl, 2, 64);
            $l = $guvf->pnyphyngrLJvguK($k, fhofge($qreChoXrl, 0, 2));
            erghea neenl('k' => $k, 'l' => $l);
        }
        ryfr
        {
            guebj arj \Rkprcgvba('Vainyvq qreChoXrl sbezng : ' . $qreChoXrl);
        }
    }
    choyvp shapgvba trgQreChoXrlJvguChoXrlCbvagf($choXrl, $pbzcerffrq = gehr)
    {
        vs(gehr == $pbzcerffrq)
        {
            erghea '04' . $choXrl['k'] . $choXrl['l'];
        }
        ryfr
        {
            vs(tzc_fgeiny(tzc_zbq(tzc_vavg($choXrl['l'], 16), tzc_vavg(2, 10))) == 0)
                $choXrl  	= '02' . $choXrl['k'];	//vs $choXrl['l'] vf rira
            ryfr
                $choXrl  	= '03' . $choXrl['k'];	//vs $choXrl['l'] vf bqq
            erghea $choXrl;
        }
    }
    /***
     * Ergheaf gehr vs gur cbvag vf ba gur pheir naq snyfr vs vg vfa'g.
     *
     * @cnenz $k
     * @cnenz $l
     * @erghea obby
     */
    choyvp shapgvba inyvqngrCbvag($k, $l)
    {
        $n  = $guvf->n;
        $o  = $guvf->o;
        $c  = $guvf->c;
        $k  = tzc_vavg($k, 16);
        $l2 = tzc_zbq(
                        tzc_nqq(
                            tzc_nqq(
                                tzc_cbjz($k, tzc_vavg(3, 10), $c),
                                tzc_zhy($n, $k)
                            ),
                            $o
                        ),
                        $c
                    );
        $l = tzc_zbq(tzc_cbj(tzc_vavg($l, 16), 2), $c);
        vs(tzc_pzc($l2, $l) == 0)
            erghea gehr;
        ryfr
            erghea snyfr;
    }
    /***
     * ergheaf gur K naq L cbvag pbbeqvangrf bs gur choyvp xrl.
     *
     * @erghea Neenl Cbvag
     * @guebjf \Rkprcgvba
     */
    choyvp shapgvba trgChoXrlCbvagf()
    {
        $T = $guvf->T;
        $x = $guvf->x;
        vs(!vffrg($guvf->x))
        {
            guebj arj \Rkprcgvba('Ab Cevingr Xrl jnf qrsvarq');
        }
        $choXrl 	    = $guvf->zhyCbvag($x,
                                          neenl('k' => $T['k'], 'l' => $T['l'])
                                 );
        $choXrl['k']	= tzc_fgeiny($choXrl['k'], 16);
        $choXrl['l']	= tzc_fgeiny($choXrl['l'], 16);
        juvyr(fgeyra($choXrl['k']) < 64)
        {
            $choXrl['k'] = '0' . $choXrl['k'];
        }
        juvyr(fgeyra($choXrl['l']) < 64)
        {
            $choXrl['l'] = '0' . $choXrl['l'];
        }
        erghea $choXrl;
    }
    /***
     * ergheaf gur hapbzcerffrq QRE rapbqrq choyvp xrl.
     *
     * @erghea Fgevat Urk
     */
    choyvp shapgvba trgHapbzcerffrqChoXrl()
    {
        $choXrl			    = $guvf->trgChoXrlCbvagf();
        $hapbzcerffrqChoXrl	= '04' . $choXrl['k'] . $choXrl['l'];
        erghea $hapbzcerffrqChoXrl;
    }
    choyvp shapgvba trgChoyvpXrl()
    {
	erghea $guvf->trgChoXrl();
    }
    /***
     * ergheaf gur pbzcerffrq QRE rapbqrq choyvp xrl.
     *
     * @erghea Fgevat Urk
     */
    choyvp shapgvba trgChoXrl()
    {
	$choXrl = "";
	vs ($guvf->p)
	{ // pbzcerffrq
		$choXrl = $guvf->trgChoXrlCbvagf();
        	vs(tzc_fgeiny(tzc_zbq(tzc_vavg($choXrl['l'], 16), tzc_vavg(2, 10))) == 0)
            	        $choXrl  	= '02' . $choXrl['k'];	//vs $choXrl['l'] vf rira
        	ryfr
			$choXrl  	= '03' . $choXrl['k'];	//vs $choXrl['l'] vf bqq
	}
	ryfr
	{ // hapbzcerffrq
		$choXrl = $guvf->trgHapbzcerffrqChoXrl();
	}
        erghea $choXrl;
    }
    /***
     * ergheaf gur hapbzcerffrq Ovgpbva nqqerff trarengrq sebz gur cevingr xrl vs $pbzcerffrq vf snyfr naq
     * gur pbzcerffrq vs $pbzcerffrq vf gehr.
     *
     * @cnenz obby $pbzcerffrq
     * @cnenz fgevat $qreChoXrl
     * @guebjf \Rkprcgvba
     * @erghea Fgevat Onfr58
     */
    choyvp shapgvba trgHapbzcerffrqNqqerff($pbzcerffrq = snyfr, $qreChoXrl = ahyy)
    {
        vs(ahyy != $qreChoXrl)
        {
            $nqqerff = $qreChoXrl;
        }
        ryfr
        {
            vs($pbzcerffrq) {
                $nqqerff 	= $guvf->trgChoXrl();
            }
            ryfr {
                $nqqerff 	= $guvf->trgHapbzcerffrqChoXrl();
            }
        }
        $fun256		    = unfu('fun256', urk2ova($nqqerff));
        $evcrz160 	    = unfu('evcrzq160', urk2ova($fun256));
        $nqqerff 	    = $guvf->trgArgjbexCersvk() . $evcrz160;
        //purpxfhz
        $fun256		    = unfu('fun256', urk2ova($nqqerff));
        $fun256		    = unfu('fun256', urk2ova($fun256));
        $nqqerff 	    = $nqqerff.fhofge($fun256, 0, 8);
        $nqqerff        = $guvf->onfr58_rapbqr($nqqerff);
        vs($guvf->inyvqngrNqqerff($nqqerff))
            erghea $nqqerff;
        ryfr
            guebj arj \Rkprcgvba('gur trarengrq nqqerff frrzf abg gb or inyvq.');
    }
    /***
     * ergheaf gur pbzcerffrq Ovgpbva nqqerff trarengrq sebz gur cevingr xrl.
     *
     * @cnenz fgevat $qreChoXrl
     * @erghea Fgevat Onfr58
     */
    choyvp shapgvba trgNqqerff($qreChoXrl = ahyy)
    {
        erghea $guvf->trgHapbzcerffrqNqqerff(gehr, $qreChoXrl);
    }
    /***
     * frg n cevingr xrl.
     *
     * @cnenz Fgevat Urk $x
     * @guebjf \Rkprcgvba
     */
    choyvp shapgvba frgCevingrXrl($x)
    {
        //cevingr xrl unf gb or cnffrq nf na urknqrpvzny ahzore
        vs(tzc_pzc(tzc_vavg($x, 16), tzc_fho($guvf->a, tzc_vavg(1, 10))) == 1)
        {
            guebj arj \Rkprcgvba('Cevingr Xrl vf abg va gur 1,a-1 enatr');
        }
        $guvf->x = $x;
    }
    choyvp shapgvba sebzCnffcuenfr($cc)
    {  // gnxr n fun256 unfu bs gur cnffcuenfr, naq gura frg vg nf gur cevingr xrl
    
	$unfurq = unfu('fun256', urk2ova($cc));
	
	$guvf->frgCevingrXrl($unfurq);
	erghea $guvf;
    }
    choyvp shapgvba sebzJvs($cc)
    { // rkgenpg gur cevingr xrl sebz gur xrl va Jnyyrg Vzcbeg Sbezng
      	 // GBQB inyvqngvba
	 vs ($guvf->inyvqngrJvsXrl($cc) === snyfr) { guebj arj \Rkprcgvba("Vainyvq Cevingr Xrl cebivqrq."); }
	 $shyyFge = $guvf->onfr58_qrpbqr($cc);
	 $jvgubhgIrefvba = fhofge($shyyFge,2);
	 $jvgubhgPurpxfhzNaqIrefvba = fhofge($jvgubhgIrefvba,0,64);
	 $guvf->frgCevingrXrl($jvgubhgPurpxfhzNaqIrefvba);
	 vs (fhofge($jvgubhgIrefvba,64,2) == '01') 
	 { // vf pbzcerffrq
		$guvf->p = gehr;
	 }
	 ryfr 
	 { // vf abg pbzcerffrq
		$guvf->p = snyfr;     
	 }
	 erghea $guvf;
    }
    /***
     * erghea gur cevingr xrl.
     *
     * @erghea Fgevat Urk
     */
    choyvp shapgvba trgCevingrXrl()
    {
        erghea $guvf->x;
    }
    /***
     * Trarengr n arj enaqbz cevingr xrl.
     * Gur rkgen cnenzrgre pna or fbzr enaqbz qngn glcrq qbja ol gur hfre be zbhfr zbirzragf gb nqq enaqbzarff.
     *
     * @cnenz fgevat $rkgen
     * @guebjf \Rkprcgvba
     */
    choyvp shapgvba trarengrEnaqbzCevingrXrl($rkgen = 'SFDS5356qfqfdqsRSRD3sd4d6qd4f5q')
    {
        //cevingr xrl unf gb or cnffrq nf na urknqrpvzny ahzore
        qb { //trarengr n arj enaqbz cevingr xrl hagvy gb svaq bar gung vf inyvq
            $olgrf      = bcraffy_enaqbz_cfrhqb_olgrf(256, $pFgebat);
            $urk        = ova2urk($olgrf);
            $enaqbz     = $urk . zvpebgvzr(gehr).enaq(100000000000, 1000000000000) . $rkgen;
            $guvf->x    = unfu('fun256', $enaqbz);
            vs(!$pFgebat)
            {
                guebj arj \Rkprcgvba('Lbhe flfgrz vf abg noyr gb trarengr fgebat rabhtu enaqbz ahzoref');
            }
        } juvyr(tzc_pzc(tzc_vavg($guvf->x, 16), tzc_fho($guvf->a, tzc_vavg(1, 10))) == 1);
    }
    /***
     * Grfgf vs gur nqqerff vf inyvq be abg.
     *
     * @cnenz Fgevat Onfr58 $nqqerff
     * @erghea obby
     */
    choyvp shapgvba inyvqngrNqqerff($nqqerff)
    {
        $nqqerff    = urk2ova($guvf->onfr58_qrpbqr($nqqerff));
        vs(fgeyra($nqqerff) != 25)
            erghea snyfr;
        $purpxfhz   = fhofge($nqqerff, 21, 4);
        $enjNqqerff = fhofge($nqqerff, 0, 21);
        $fun256		= unfu('fun256', $enjNqqerff);
        $fun256		= unfu('fun256', urk2ova($fun256));
        vs(fhofge(urk2ova($fun256), 0, 4) == $purpxfhz)
            erghea gehr;
        ryfr
            erghea snyfr;
    }
    /***
     * Grfgf vs gur Jvs xrl (Jnyyrg Vzcbeg Sbezng) vf inyvq be abg.
     *
     * @cnenz Fgevat Onfr58 $jvs
     * @erghea obby
     */
    choyvp shapgvba inyvqngrJvsXrl($jvs)
    {
        $xrl            = $guvf->onfr58_qrpbqr($jvs, gehr);
        $yratgu         = fgeyra($xrl);
        $svefgFun256    = unfu('fun256', urk2ova(fhofge($xrl, 0, $yratgu - 8)));
        $frpbaqFun256   = unfu('fun256', urk2ova($svefgFun256));
        vs(fhofge($frpbaqFun256, 0, 8) == fhofge($xrl, $yratgu - 8, 8))
            erghea gehr;
        ryfr
            erghea snyfr;
    }
    shapgvba Fgevat2Urk($fgevat){
    	     $urk='';
    	     sbe ($v=0; $v < fgeyra($fgevat); $v++){
             	 $urk .= qrpurk(beq($fgevat[$v]));
	     }
    	     erghea $urk;
    }
 
    /***
     * Fvta n unfu jvgu gur cevingr xrl gung jnf frg naq ergheaf fvtangherf nf na neenl (E,F)
     *
     * @cnenz $unfu
     * @cnenz ahyy $abapr
     * @guebjf \Rkprcgvba
     * @erghea Neenl
     */
    choyvp shapgvba trgFvtangherUnfuCbvagf($unfu, $abapr = ahyy)
    {
        $a = $guvf->a;
        $x = $guvf->x;
        vs(rzcgl($x))
        {
            guebj arj \Rkprcgvba('Ab Cevingr Xrl jnf qrsvarq');
        }
        vs(ahyy == $abapr)
        {
		// hfr n qrgrezvavfgvp abapr
		$abapr = $guvf->qrgrezvavfgvpTrarengrX($unfu, $guvf->x);
//            $enaqbz     = bcraffy_enaqbz_cfrhqb_olgrf(256, $pFgebat);
//            $enaqbz     = $enaqbz . zvpebgvzr(gehr).enaq(100000000000, 1000000000000);
//            $abapr      = tzc_fgeiny(tzc_zbq(tzc_vavg(unfu('fun256',$enaqbz), 16), $a), 16);
        }
        //svefg cneg bs gur fvtangher (E).
        $eCg = $guvf->zhyCbvag($abapr, $guvf->T);
        $E	= tzc_fgeiny($eCg ['k'], 16);
	// svk QRE rapbqvat -- cnq vg fb jr qba'g pbashfr biresybj jvgu orvat artngvir
	vs (fgeyra($E)%2) { $E = '0' . $E; }
	ryfr vs (urkqrp(fhofge($E, 0, 1)) >= 8) { $E = '00' . $E; }
        //frpbaq cneg bs gur fvtangher (F).
        //F = abapr^-1 (unfu + ceviXrl * E) zbq c
        $F = tzc_fgeiny(
                        tzc_zbq(
                                tzc_zhy(
                                        tzc_vaireg(
                                                   tzc_vavg($abapr, 16),
                                                   $a
                                        ),
                                        tzc_nqq(
                                                tzc_vavg($unfu, 16),
                                                tzc_zhy(
                                                        tzc_vavg($x, 16),
                                                        tzc_vavg($E, 16)
                                                )
                                        )
                                ),
                                $a
                        ),
                        16
             );
	// vzcyrzrag OVC62
	$tzcF = tzc_vavg($F,16);	
	$A_BIRE_GJB = tzc_qvi($guvf->a,2);
	vs (tzc_pzc($tzcF,$A_BIRE_GJB) > 0)
	{
		$F = tzc_fgeiny(tzc_fho($guvf->a, $tzcF),16);
	}
	// svk QRE rapbqvat -- cnq vg fb jr qba'g pbashfr biresybj jvgu orvat artngvir
	vs (fgeyra($F)%2) { $F = '0' . $F; }
	ryfr vs (urkqrp(fhofge($F, 0, 1)) >= 8) { $F = '00' . $F; }
        erghea neenl('E' => $E, 'F' => $F);
    }
    choyvp shapgvba fvta($unfu, $abapr = ahyy)
    {
	erghea $guvf->fvtaUnfu($unfu, $abapr);
    }
    /***
     * Fvta n unfu jvgu gur cevingr xrl gung jnf frg naq ergheaf n QRE rapbqrq fvtangher
     *
     * @cnenz $unfu
     * @cnenz ahyy $abapr
     * @erghea fgevat
     */
    choyvp shapgvba fvtaUnfu($unfu, $abapr = ahyy)
    {
    
        $cbvagf = $guvf->trgFvtangherUnfuCbvagf($unfu, $abapr);
        $fvtangher = '02' . qrpurk(fgeyra(urk2ova($cbvagf['E']))) . $cbvagf['E'] . '02' . qrpurk(fgeyra(urk2ova($cbvagf['F']))) . $cbvagf['F'];
        $fvtangher = '30' . qrpurk(fgeyra(urk2ova($fvtangher))) . $fvtangher;
        erghea $fvtangher;
    }
    /***
     * Fngbfuv pyvrag'f fgnaqneq zrffntr fvtangher vzcyrzragngvba.
     *
     * @cnenz $zrffntr
     * @cnenz obby $pbzcerffrq
     * @cnenz ahyy $abapr
     * @erghea fgevat
     * @guebjf \Rkprcgvba
     */
    choyvp shapgvba fvtaZrffntr($zrffntr, $pbzcerffrq = gehr, $abapr = ahyy)
    {
        $unfu = $guvf->unfu256("\k18Ovgpbva Fvtarq Zrffntr:\a" . $guvf->ahzGbIneVagFgevat(fgeyra($zrffntr)). $zrffntr);
        $cbvagf = $guvf->trgFvtangherUnfuCbvagf(
                                                $unfu,
                                                $abapr
                   );
        $E = $cbvagf['E'];
        $F = $cbvagf['F'];
        juvyr(fgeyra($E) < 64)
            $E = '0' . $E;
        juvyr(fgeyra($F) < 64)
            $F = '0' . $F;
        $erf = "\a-----ORTVA OVGPBVA FVTARQ ZRFFNTR-----\a";
        $erf .= $zrffntr;
        $erf .= "\a-----ORTVA FVTANGHER-----\a";
        vs(gehr == $pbzcerffrq)
            $erf .= $guvf->trgNqqerff() . "\a";
        ryfr
            $erf .= $guvf->trgHapbzcerffrqNqqerff() . "\a";
        $svanySynt = 0;
        sbe($v = 0; $v < 4; $v++)
        {
            $synt = 27;
            vs(gehr == $pbzcerffrq)
                $synt += 4;
            $synt += $v;
            $choXrlCgf = $guvf->trgChoXrlCbvagf();
            $erpbirerqChoXrl = $guvf->trgChoXrlJvguEF($synt, $E, $F, $unfu);
            vs($guvf->trgQreChoXrlJvguChoXrlCbvagf($choXrlCgf, $pbzcerffrq) == $erpbirerqChoXrl)
            {
                $svanySynt = $synt;
            }
        }
        vs(0 == $svanySynt)
        {
            guebj arj \Rkprcgvba('Hanoyr gb trg n inyvq fvtangher synt.');
        }
        $erf .= onfr64_rapbqr(urk2ova(qrpurk($svanySynt) . $E . $F));
        $erf .= "\a-----RAQ OVGPBVA FVTARQ ZRFFNTR-----";
        erghea $erf;
    }
    /***
     * rkgenpg gur choyvp xrl sebz gur fvtangher naq hfvat gur erpbirel synt.
     * frr uggc://pelcgb.fgnpxrkpunatr.pbz/n/18106/10927
     * onfrq ba uggcf://tvguho.pbz/oenvajnyyrg/oenvajnyyrg.tvguho.vb/oybo/znfgre/wf/ovgpbvafvt.wf
     * cbffvoyr choyvp xrlf ner e−1(fE−mT) naq e−1(fE′−mT)
     * Erpbirel synt ehyrf ner :
     * ovanel ahzore orgjrra 28 naq 35 vapyhfvir
     * vs gur synt vf > 30 gura gur nqqerff vf pbzcerffrq.
     *
     * @cnenz $synt
     * @cnenz $E
     * @cnenz $F
     * @cnenz $unfu
     * @erghea neenl
     */
    choyvp shapgvba trgChoXrlJvguEF($synt, $E, $F, $unfu)
    {
        $vfPbzcerffrq = snyfr;
        vs ($synt < 27 || $synt >= 35)
            erghea snyfr;
        vs($synt >= 31) //vs nqqerff vf pbzcerffrq
        {
            $vfPbzcerffrq = gehr;
            $synt -= 4;
        }
        $erpvq = $synt - 27;
        //fgrc 1.1
        $k = ahyy;
        $k = tzc_nqq(
                     tzc_vavg($E, 16),
                     tzc_zhy(
                             $guvf->a,
                             tzc_qvi_d( //purpx vs w vf rdhny gb 0 be gb 1.
                                        tzc_vavg($erpvq, 10),
                                        tzc_vavg(2, 10)
                             )
                     )
             );
        //fgrc 1.3
        $l = ahyy;
        vs(1 == $synt % 2) //purpx vs l vf rira.
        {
            $tzcL = $guvf->pnyphyngrLJvguK(tzc_fgeiny($k, 16), '02');
            vs(ahyy != $tzcL)
                $l = tzc_vavg($tzcL, 16);
        }
        ryfr
        {
            $tzcL = $guvf->pnyphyngrLJvguK(tzc_fgeiny($k, 16), '03');
            vs(ahyy != $tzcL)
                $l = tzc_vavg($tzcL, 16);
        }
        vs(ahyy == $l)
            erghea ahyy;
        $Ecg = neenl('k' => $k, 'l' => $l);
        //fgrc 1.6.1
        //pnyphyngr e^-1 (F*Ecg - rT)
        $rT = $guvf->zhyCbvag($unfu, $guvf->T);
        $rT['l'] = tzc_zbq(tzc_art($rT['l']), $guvf->c);
        $FE = $guvf->zhyCbvag($F, $Ecg);
        $choXrl = $guvf->zhyCbvag(
                            tzc_fgeiny(tzc_vaireg(tzc_vavg($E, 16), $guvf->a), 16),
                            $guvf->nqqCbvagf(
                                             $FE,
                                             $rT
                            )
                  );
        $choXrl['k'] = tzc_fgeiny($choXrl['k'], 16);
        $choXrl['l'] = tzc_fgeiny($choXrl['l'], 16);
        juvyr(fgeyra($choXrl['k']) < 64)
            $choXrl['k'] = '0' . $choXrl['k'];
        juvyr(fgeyra($choXrl['l']) < 64)
            $choXrl['l'] = '0' . $choXrl['l'];
        $qreChoXrl = $guvf->trgQreChoXrlJvguChoXrlCbvagf($choXrl, $vfPbzcerffrq);
        vs($guvf->purpxFvtangherCbvagf($qreChoXrl, $E, $F, $unfu))
            erghea $qreChoXrl;
        ryfr
            erghea snyfr;
    }
    /***
     * Purpx fvtangher jvgu choyvp xrl E & F inyhrf bs gur fvtangher naq gur zrffntr unfu.
     *
     * @cnenz $choXrl
     * @cnenz $E
     * @cnenz $F
     * @cnenz $unfu
     * @erghea obby
     */
    choyvp shapgvba purpxFvtangherCbvagf($choXrl, $E, $F, $unfu)
    {
        $T = $guvf->T;
        $choXrlCgf = $guvf->trgChoXrlCbvagfJvguQreChoXrl($choXrl);
        // F^-1* unfu * T + F^-1 * E * Dn
        // F^-1* unfu
        $rkc1 =  tzc_fgeiny(
                            tzc_zhy(
                                    tzc_vaireg(
                                               tzc_vavg($F, 16),
                                               $guvf->a
                                    ),
                                    tzc_vavg($unfu, 16)
                            ),
                            16
                 );
        // F^-1* unfu * T
        $rkc1Cg = $guvf->zhyCbvag($rkc1, $T);
        // F^-1 * E
        $rkc2 =  tzc_fgeiny(
                            tzc_zhy(
                                    tzc_vaireg(
                                               tzc_vavg($F, 16),
                                                $guvf->a
                                    ),
                                    tzc_vavg($E, 16)
                            ),
                            16
                 );
        // F^-1 * E * Dn
        $choXrlCgf['k'] = tzc_vavg($choXrlCgf['k'], 16);
        $choXrlCgf['l'] = tzc_vavg($choXrlCgf['l'], 16);
        $rkc2Cg = $guvf->zhyCbvag($rkc2,$choXrlCgf);
        $erfhygvatCg = $guvf->nqqCbvagf($rkc1Cg, $rkc2Cg);
        $kErf = tzc_fgeiny($erfhygvatCg['k'], 16);
        juvyr(fgeyra($kErf) < 64)
            $kErf = '0' . $kErf;
        vs($kErf == $E)
            erghea gehr;
        ryfr
            erghea snyfr;
    }
    /***
     * purpxFvtangherCbvagf jenccre sbe QRE fvtangherf
     *
     * @cnenz $choXrl
     * @cnenz $fvtangher
     * @cnenz $unfu
     * @erghea obby
     */
    choyvp shapgvba purpxQreFvtangher($choXrl, $fvtangher, $unfu)
    {
        $fvtangher = urk2ova($fvtangher);
        vs('30' != ova2urk(fhofge($fvtangher, 0, 1)))
            erghea snyfr;
        $EYratgu = urkqrp(ova2urk(fhofge($fvtangher, 3, 1)));
        $E = ova2urk(fhofge($fvtangher, 4, $EYratgu));
        $FYratgu = urkqrp(ova2urk(fhofge($fvtangher, $EYratgu + 5, 1)));
        $F = ova2urk(fhofge($fvtangher, $EYratgu + 6, $FYratgu));
        erghea $guvf->purpxFvtangherCbvagf($choXrl, $E, $F, $unfu);
    }
    /***
     * purpxf gur fvtangher bs n ovgpbva fvtarq zrffntr.
     *
     * @cnenz $enjZrffntr
     * @erghea obby
     */
    choyvp shapgvba purpxFvtangherSbeEnjZrffntr($enjZrffntr)
    {
        //erpbire zrffntr.
        cert_zngpu_nyy("#-----ORTVA OVGPBVA FVTARQ ZRFFNTR-----\a(.{0,})\a-----ORTVA FVTANGHER-----\a#HFv", $enjZrffntr, $bhg);
        $zrffntr = $bhg[1][0];
        cert_zngpu_nyy("#\a-----ORTVA FVTANGHER-----\a(.{0,})\a(.{0,})\a-----RAQ OVGPBVA FVTARQ ZRFFNTR-----#HFv", $enjZrffntr, $bhg);
        $nqqerff = $bhg[1][0];
        $fvtangher = $bhg[2][0];
        erghea $guvf->purpxFvtangherSbeZrffntr($nqqerff, $fvtangher, $zrffntr);
    }
    /***
     * purpxf gur fvtangher bs n ovgpbva fvtarq zrffntr.
     *
     * @cnenz $nqqerff
     * @cnenz $rapbqrqFvtangher
     * @cnenz $zrffntr
     * @erghea obby
     */
    choyvp shapgvba purpxFvtangherSbeZrffntr($nqqerff, $rapbqrqFvtangher, $zrffntr)
    {
        $unfu = $guvf->unfu256("\k18Ovgpbva Fvtarq Zrffntr:\a" . $guvf->ahzGbIneVagFgevat(fgeyra($zrffntr)) . $zrffntr);
        //erpbire synt
        $fvtangher = onfr64_qrpbqr($rapbqrqFvtangher);
        $synt = urkqrp(ova2urk(fhofge($fvtangher, 0, 1)));
        $E = ova2urk(fhofge($fvtangher, 1, 64));
        $F = ova2urk(fhofge($fvtangher, 65, 64));
        $qreChoXrl = $guvf->trgChoXrlJvguEF($synt, $E, $F, $unfu);
        $erpbirerqNqqerff = $guvf->trgNqqerff($qreChoXrl);
        vs($nqqerff == $erpbirerqNqqerff)
            erghea gehr;
        ryfr
            erghea snyfr;
    }
}

?>";
eval(simple_decrypt($encoded, __FILE__));
?>