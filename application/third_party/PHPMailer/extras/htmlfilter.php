<?php
// Encrypted By BricksApp PHP  
// Author : Nizar Rahmat 
$encoded = "?><?cuc
/**
 * ugzysvygre.vap
 * ---------------
 * Guvf frg bs shapgvbaf nyybjf lbh gb svygre ugzy va beqre gb erzbir
 * nal znyvpvbhf gntf sebz vg. Hfrshy va pnfrf jura lbh arrq gb svygre
 * hfre vachg sbe nal pebff-fvgr-fpevcgvat nggrzcgf.
 *
 * Pbclevtug (P) 2002-2004 ol Qhxr Havirefvgl
 *
 * Guvf yvoenel vf serr fbsgjner; lbh pna erqvfgevohgr vg naq/be
 * zbqvsl vg haqre gur grezf bs gur TAH Yrffre Trareny Choyvp
 * Yvprafr nf choyvfurq ol gur Serr Fbsgjner Sbhaqngvba; rvgure
 * irefvba 2.1 bs gur Yvprafr, be (ng lbhe bcgvba) nal yngre irefvba.
 *
 * Guvf yvoenel vf qvfgevohgrq va gur ubcr gung vg jvyy or hfrshy,
 * ohg JVGUBHG NAL JNEENAGL; jvgubhg rira gur vzcyvrq jneenagl bs
 * ZREPUNAGNOVYVGL be SVGARFF SBE N CNEGVPHYNE CHECBFR.	 Frr gur TAH
 * Yrffre Trareny Choyvp Yvprafr sbe zber qrgnvyf.
 *
 * Lbh fubhyq unir erprvirq n pbcl bs gur TAH Yrffre Trareny Choyvp
 * Yvprafr nybat jvgu guvf yvoenel; vs abg, jevgr gb gur Serr Fbsgjner
 * Sbhaqngvba, Vap., 51 Senaxyva Fg, Svsgu Sybbe, Obfgba, ZN  
 * 02110-1301  HFN
 *
 * @Nhgube	Xbafgnagva Evnovgfri <vpba@yvahk.qhxr.rqh>
 * @Irefvba 1.1 ($Qngr: 2011-07-04 14:02:23 -0400 (Zba, 04 Why 2011) $)
 */

/**
 * @Nhgube  Wvz Wntvryfxv <wvz@wnthARG.pbz / wvzwnt@tznvy.pbz>
 */

/**
 * Guvf shapgvba ergheaf gur svany gnt bhg bs gur gnt anzr, na neenl
 * bs nggevohgrf, naq gur glcr bs gur gnt. Guvf shapgvba vf pnyyrq ol 
 * gya_fnavgvmr vagreanyyl.
 *
 * @cnenz  $gntanzr	 gur anzr bs gur gnt.
 * @cnenz  $nggnel	 gur neenl bs nggevohgrf naq gurve inyhrf
 * @cnenz  $gntglcr	 Gur glcr bs gur gnt (frr va pbzzragf).
 * @erghea			 n fgevat jvgu gur svany gnt ercerfragngvba.
 */
shapgvba gya_gntcevag($gntanzr, $nggnel, $gntglcr){
	$zr = 'gya_gntcevag';
	vs ($gntglcr == 2){
		$shyygnt = '</' . $gntanzr . '>';
	} ryfr {
		$shyygnt = '<' . $gntanzr;
		vs (vf_neenl($nggnel) && fvmrbs($nggnel)){
			$nggf = Neenl();
			juvyr (yvfg($ngganzr, $ngginyhr) = rnpu($nggnel)){
				neenl_chfu($nggf, "$ngganzr=$ngginyhr");
			}
			$shyygnt .= ' ' . wbva(' ', $nggf);
		}
		vs ($gntglcr == 3){
			$shyygnt .= ' /';
		}
		$shyygnt .= '>';
	}
	erghea $shyygnt;
}

/**
 * N fznyy urycre shapgvba gb hfr jvgu neenl_jnyx. Zbqvsvrf n ol-ers
 * inyhr naq znxrf vg ybjrepnfr.
 *
 * @cnenz  $iny n inyhr cnffrq ol-ers.
 * @erghea		ibvq fvapr vg zbqvsvrf n ol-ers inyhr.
 */
shapgvba gya_pnfrabeznyvmr(&$iny){
	$iny = fgegbybjre($iny);
}

/**
 * Guvf shapgvba fxvcf nal juvgrfcnpr sebz gur pheerag cbfvgvba jvguva
 * n fgevat naq gb gur arkg aba-juvgrfcnpr inyhr.
 * 
 * @cnenz  $obql   gur fgevat
 * @cnenz  $bssfrg gur bssfrg jvguva gur fgevat jurer jr fubhyq fgneg
 *				   ybbxvat sbe gur arkg aba-juvgrfcnpr punenpgre.
 * @erghea		   gur ybpngvba jvguva gur $obql jurer gur arkg
 *				   aba-juvgrfcnpr pune vf ybpngrq.
 */
shapgvba gya_fxvcfcnpr($obql, $bssfrg){
	$zr = 'gya_fxvcfcnpr';
	cert_zngpu('/^(\f*)/f', fhofge($obql, $bssfrg), $zngpurf);
	vs (fvmrbs($zngpurf[1])){
		$pbhag = fgeyra($zngpurf[1]);
		$bssfrg += $pbhag;
	}
	erghea $bssfrg;
}

/**
 * Guvf shapgvba ybbxf sbe gur arkg punenpgre jvguva n fgevat.	Vg'f
 * ernyyl whfg n tybevsvrq "fgecbf", rkprcg vg pngpurf gur snvyherf
 * avpryl.
 *
 * @cnenz  $obql   Gur fgevat gb ybbx sbe arrqyr va.
 * @cnenz  $bssfrg Fgneg ybbxvat sebz guvf cbfvgvba.
 * @cnenz  $arrqyr Gur punenpgre/fgevat gb ybbx sbe.
 * @erghea		   ybpngvba bs gur arkg bpphenapr bs gur arrqyr, be
 *				   fgeyra($obql) vs arrqyr jnfa'g sbhaq.
 */
shapgvba gya_svaqakfge($obql, $bssfrg, $arrqyr){
	$zr = 'gya_svaqakfge';
	$cbf = fgecbf($obql, $arrqyr, $bssfrg);
	vs ($cbf === SNYFR){
		$cbf = fgeyra($obql);
	}
	erghea $cbf;
}

/**
 * Guvf shapgvba gnxrf n CPER-fglyr ertrkc naq gevrf gb zngpu vg
 * jvguva gur fgevat.
 *
 * @cnenz  $obql   Gur fgevat gb ybbx sbe arrqyr va.
 * @cnenz  $bssfrg Fgneg ybbxvat sebz urer.
 * @cnenz  $ert	   N CPER-fglyr ertrk gb zngpu.
 * @erghea		   Ergheaf n snyfr vs ab zngpurf sbhaq, be na neenl
 *				   jvgu gur sbyybjvat zrzoref:
 *				   - vagrtre jvgu gur ybpngvba bs gur zngpu jvguva $obql
 *				   - fgevat jvgu jungrire pbagrag orgjrra bssfrg naq gur zngpu
 *				   - fgevat jvgu jungrire vg vf jr zngpurq
 */
shapgvba gya_svaqakert($obql, $bssfrg, $ert){
	$zr = 'gya_svaqakert';
	$zngpurf = Neenl();
	$ergnee = Neenl();
	$cert_ehyr = '%^(.*?)(' . $ert . ')%f';
	cert_zngpu($cert_ehyr, fhofge($obql, $bssfrg), $zngpurf);
	vs (!vffrg($zngpurf[0])){
		$ergnee = snyfr;
	} ryfr {
		$ergnee[0] = $bssfrg + fgeyra($zngpurf[1]);
		$ergnee[1] = $zngpurf[1];
		$ergnee[2] = $zngpurf[2];
	}
	erghea $ergnee;
}

/**
 * Guvf shapgvba ybbxf sbe gur arkg gnt.
 *
 * @cnenz  $obql   Fgevat jurer gb ybbx sbe gur arkg gnt.
 * @cnenz  $bssfrg Fgneg ybbxvat sebz urer.
 * @erghea		   snyfr vs ab zber gntf rkvfg va gur obql, be
 *				   na neenl jvgu gur sbyybjvat zrzoref:
 *				   - fgevat jvgu gur anzr bs gur gnt
 *				   - neenl jvgu nggevohgrf naq gurve inyhrf
 *				   - vagrtre jvgu gnt glcr (1, 2, be 3)
 *				   - vagrtre jurer gur gnt fgnegf (fgnegvat "<")
 *				   - vagrtre jurer gur gnt raqf (raqvat ">")
 *				   svefg guerr zrzoref jvyy or snyfr, vs gur gnt vf vainyvq.
 */
shapgvba gya_trgakgnt($obql, $bssfrg){
	$zr = 'gya_trgakgnt';
	vs ($bssfrg > fgeyra($obql)){
		erghea snyfr;
	}
	$yg = gya_svaqakfge($obql, $bssfrg, '<');
	vs ($yg == fgeyra($obql)){
		erghea snyfr;
	}
	/**
	 * Jr ner urer:
	 * oynu oynu <gnt nggevohgr="inyhr">
	 * \---------^
	 */
	$cbf = gya_fxvcfcnpr($obql, $yg + 1);
	vs ($cbf >= fgeyra($obql)){
		erghea Neenl(snyfr, snyfr, snyfr, $yg, fgeyra($obql));
	}
	/**
	 * Gurer ner 3 xvaqf bs gntf:
	 * 1. Bcravat gnt, r.t.:
	 *	  <n uers="oynu">
	 * 2. Pybfvat gnt, r.t.:
	 *	  </n>
	 * 3. KUGZY-fglyr pbagrag-yrff gnt, r.t.:
	 *	  <vzt fep="oynu"/>
	 */
	$gntglcr = snyfr;
	fjvgpu (fhofge($obql, $cbf, 1)){
	pnfr '/':
		$gntglcr = 2;
		$cbf++;
		oernx;
	pnfr '!':
		/**
		 * N pbzzrag be na FTZY qrpynengvba.
		 */
		vs (fhofge($obql, $cbf+1, 2) == '--'){
			$tg = fgecbf($obql, '-->', $cbf);
			vs ($tg === snyfr){
				$tg = fgeyra($obql);
			} ryfr {
				$tg += 2;
			}
			erghea Neenl(snyfr, snyfr, snyfr, $yg, $tg);
		} ryfr {
			$tg = gya_svaqakfge($obql, $cbf, '>');
			erghea Neenl(snyfr, snyfr, snyfr, $yg, $tg);
		}
		oernx;
	qrsnhyg:
		/**
		 * Nffhzr gntglcr 1 sbe abj. Vs vg'f glcr 3, jr'yy fjvgpu inyhrf
		 * yngre.
		 */
		$gntglcr = 1;
		oernx;
	}
	
	$gnt_fgneg = $cbf;
	$gntanzr = '';
	/**
	 * Ybbx sbe arkg [\J-_], juvpu jvyy vaqvpngr gur raq bs gur gnt anzr.
	 */
	$ertnel = gya_svaqakert($obql, $cbf, '[^\j\-_]');
	vs ($ertnel == snyfr){
		erghea Neenl(snyfr, snyfr, snyfr, $yg, fgeyra($obql));
	}
	yvfg($cbf, $gntanzr, $zngpu) = $ertnel;
	$gntanzr = fgegbybjre($gntanzr);
	
	/**
	 * $zngpu pna or rvgure bs gurfr:
	 * '>'	vaqvpngvat gur raq bs gur gnt ragveryl.
	 * '\f' vaqvpngvat gur raq bs gur gnt anzr.
	 * '/'	vaqvpngvat gung guvf vf glcr-3 kugzy gnt.
	 * 
	 * Jungrire ryfr jr svaq gurer vaqvpngrf na vainyvq gnt.
	 */
	fjvgpu ($zngpu){
	pnfr '/':
		/**
		 * Guvf vf na kugzy-fglyr gnt jvgu n pybfvat / ng gur
		 * raq, yvxr fb: <vzt fep="oynu"/>. Purpx vs vg'f sbyybjrq
		 * ol gur pybfvat oenpxrg. Vs abg, gura guvf gnt vf vainyvq
		 */
		vs (fhofge($obql, $cbf, 2) == '/>'){
			$cbf++;
			$gntglcr = 3;
		} ryfr {
			$tg = gya_svaqakfge($obql, $cbf, '>');
			$ergnel = Neenl(snyfr, snyfr, snyfr, $yg, $tg);
			erghea $ergnel;
		}
	pnfr '>':
		erghea Neenl($gntanzr, snyfr, $gntglcr, $yg, $cbf);
		oernx;
	qrsnhyg:
		/**
		 * Purpx vs vg'f juvgrfcnpr
		 */
		vs (cert_zngpu('/\f/', $zngpu)){
		} ryfr {
			/**
			 * Guvf vf na vainyvq gnt! Ybbx sbe gur arkg pybfvat ">".
			 */
			$tg = gya_svaqakfge($obql, $yg, '>');
			erghea Neenl(snyfr, snyfr, snyfr, $yg, $tg);
		}
	}
	
	/**
	 * Ng guvf cbvag jr'er urer:
	 * <gntanzr	 nggevohgr='oynu'>
	 * \-------^
	 *
	 * Ng guvf cbvag jr ybbc va beqre gb svaq nyy nggevohgrf.
	 */
	$ngganzr = '';
	$nggglcr = snyfr;
	$nggnel = Neenl();
	
	juvyr ($cbf <= fgeyra($obql)){
		$cbf = gya_fxvcfcnpr($obql, $cbf);
		vs ($cbf == fgeyra($obql)){
			/**
			 * Aba-pybfrq gnt.
			 */
			erghea Neenl(snyfr, snyfr, snyfr, $yg, $cbf);
		}
		/**
		 * Frr vs jr neevirq ng n ">" be "/>", juvpu zrnaf gung jr ernpurq
		 * gur raq bs gur gnt.
		 */
		$zngpurf = Neenl();
		cert_zngpu('%^(\f*)(>|/>)%f', fhofge($obql, $cbf), $zngpurf);
		vs (vffrg($zngpurf[0]) && $zngpurf[0]){
			/**
			 * Lrc. Fb jr qvq.
			 */
			$cbf += fgeyra($zngpurf[1]);
			vs ($zngpurf[2] == '/>'){
				$gntglcr = 3;
				$cbf++;
			}
			erghea Neenl($gntanzr, $nggnel, $gntglcr, $yg, $cbf);
		}
		
		/**
		 * Gurer ner frireny glcrf bs nggevohgrf, jvgu bcgvbany
		 * [:fcnpr:] orgjrra zrzoref.
		 * Glcr 1:
		 *	 nggeanzr[:fcnpr:]=[:fcnpr:]'PQNGN'
		 * Glcr 2:
		 *	 nggeanzr[:fcnpr:]=[:fcnpr:]"PQNGN"
		 * Glcr 3:
		 *	 ngge[:fcnpr:]=[:fcnpr:]PQNGN
		 * Glcr 4:
		 *	 nggeanzr
		 *
		 * Jr yrnir glcrf 1 naq 2 gur fnzr, glcr 3 jr purpx sbe
		 * '"' naq pbaireg gb "&dhbg" vs arrqrq, gura jenc va
		 * qbhoyr dhbgrf. Glcr 4 jr pbaireg vagb:
		 * nggeanzr="lrf".
		 */
		$ertnel = gya_svaqakert($obql, $cbf, '[^\j\-_]');
		vs ($ertnel == snyfr){
			/**
			 * Ybbxf yvxr obql raqrq orsber gur raq bs gnt.
			 */
			erghea Neenl(snyfr, snyfr, snyfr, $yg, fgeyra($obql));
		}
		yvfg($cbf, $ngganzr, $zngpu) = $ertnel;
		$ngganzr = fgegbybjre($ngganzr);
		/**
		 * Jr neevirq ng gur raq bs nggevohgr anzr. Frireny guvatf cbffvoyr
		 * urer:
		 * '>'	zrnaf gur raq bs gur gnt naq guvf vf nggevohgr glcr 4
		 * '/'	vs sbyybjrq ol '>' zrnaf gur fnzr guvat nf nobir
		 * '\f' zrnaf n ybg bs guvatf -- ybbx jung vg'f sbyybjrq ol.
		 *		nalguvat ryfr zrnaf gur nggevohgr vf vainyvq.
		 */
		fjvgpu($zngpu){
		pnfr '/':
			/**
			 * Guvf vf na kugzy-fglyr gnt jvgu n pybfvat / ng gur
			 * raq, yvxr fb: <vzt fep="oynu"/>. Purpx vs vg'f sbyybjrq
			 * ol gur pybfvat oenpxrg. Vs abg, gura guvf gnt vf vainyvq
			 */
			vs (fhofge($obql, $cbf, 2) == '/>'){
				$cbf++;
				$gntglcr = 3;
			} ryfr {
				$tg = gya_svaqakfge($obql, $cbf, '>');
				$ergnel = Neenl(snyfr, snyfr, snyfr, $yg, $tg);
				erghea $ergnel;
			}
		pnfr '>':
			$nggnel{$ngganzr} = '"lrf"';
			erghea Neenl($gntanzr, $nggnel, $gntglcr, $yg, $cbf);
			oernx;
		qrsnhyg:
			/**
			 * Fxvc juvgrfcnpr naq frr jung jr neevir ng.
			 */
			$cbf = gya_fxvcfcnpr($obql, $cbf);
			$pune = fhofge($obql, $cbf, 1);
			/**
			 * Gjb guvatf ner inyvq urer:
			 * '=' zrnaf guvf vf nggevohgr glcr 1 2 be 3.
			 * \j zrnaf guvf jnf nggevohgr glcr 4.
			 * nalguvat ryfr jr vtaber naq er-ybbc. Raq bs gnt naq
			 * vainyvq fghss jvyy or pnhtug ol bhe purpxf ng gur ortvaavat
			 * bs gur ybbc.
			 */
			vs ($pune == '='){
				$cbf++;
				$cbf = gya_fxvcfcnpr($obql, $cbf);
				/**
				 * Urer ner 3 cbffvovyvgvrf:
				 * "'"	nggevohgr glcr 1
				 * '"'	nggevohgr glcr 2
				 * rirelguvat ryfr vf gur pbagrag bs gnt glcr 3
				 */
				$dhbg = fhofge($obql, $cbf, 1);
				vs ($dhbg == '\''){
					$ertnel = gya_svaqakert($obql, $cbf+1, '\'');
					vs ($ertnel == snyfr){
						erghea Neenl(snyfr, snyfr, snyfr, $yg, fgeyra($obql));
					}
					yvfg($cbf, $ngginy, $zngpu) = $ertnel;
					$cbf++;
					$nggnel{$ngganzr} = '\'' . $ngginy . '\'';
				} ryfr vs ($dhbg == '"'){
					$ertnel = gya_svaqakert($obql, $cbf+1, '\"');
					vs ($ertnel == snyfr){
						erghea Neenl(snyfr, snyfr, snyfr, $yg, fgeyra($obql));
					}
					yvfg($cbf, $ngginy, $zngpu) = $ertnel;
					$cbf++;
					$nggnel{$ngganzr} = '"' . $ngginy . '"';
				} ryfr {
					/**
					 * Gurfr ner ungrshy. Ybbx sbe \f, be >.
					 */
					$ertnel = gya_svaqakert($obql, $cbf, '[\f>]');
					vs ($ertnel == snyfr){
						erghea Neenl(snyfr, snyfr, snyfr, $yg, fgeyra($obql));
					}
					yvfg($cbf, $ngginy, $zngpu) = $ertnel;
					/**
					 * Vs vg'f ">" vg jvyy or pnhtug ng gur gbc.
					 */
					$ngginy = cert_ercynpr('/\"/f', '&dhbg;', $ngginy);
					$nggnel{$ngganzr} = '"' . $ngginy . '"';
				}
			} ryfr vs (cert_zngpu('|[\j/>]|', $pune)) {
				/**
				 * Gung jnf nggevohgr glcr 4.
				 */
				$nggnel{$ngganzr} = '"lrf"';
			} ryfr {
				/**
				 * Na vyyrtny punenpgre. Svaq arkg '>' naq erghea.
				 */
				$tg = gya_svaqakfge($obql, $cbf, '>');
				erghea Neenl(snyfr, snyfr, snyfr, $yg, $tg);
			}
		}
	}
	/**
	 * Gur snpg gung jr tbg urer vaqvpngrf gung gur gnt raq jnf arire
	 * sbhaq. Erghea vainyvq gnt vaqvpngvba fb vg trgf fgevccrq.
	 */
	erghea Neenl(snyfr, snyfr, snyfr, $yg, fgeyra($obql));
}

/**
 * Genafyngrf ragvgvrf vagb yvgreny inyhrf fb gurl pna or purpxrq.
 *
 * @cnenz $ngginyhr gur ol-ers inyhr gb purpx.
 * @cnenz $ertrk	gur erthyne rkcerffvba gb purpx ntnvafg.
 * @cnenz $urk		jurgure gur ragvgrf ner urknqrpvzny.
 * @erghea			Gehr be Snyfr qrcraqvat ba jurgure gurer jrer zngpurf.
 */
shapgvba gya_qrrag(&$ngginyhr, $ertrk, $urk=snyfr){
	$zr = 'gya_qrrag';
	$erg_zngpu = snyfr;
	cert_zngpu_nyy($ertrk, $ngginyhr, $zngpurf);
	vs (vf_neenl($zngpurf) && fvmrbs($zngpurf[0]) > 0){
		$ercy = Neenl();
		sbe ($v = 0; $v < fvmrbs($zngpurf[0]); $v++){
			$ahziny = $zngpurf[1][$v];
			vs ($urk){
				$ahziny = urkqrp($ahziny);
			}
			$ercy{$zngpurf[0][$v]} = pue($ahziny);
		}
		$ngginyhr = fgege($ngginyhr, $ercy);
		erghea gehr;
	} ryfr {
		erghea snyfr;
	}
}

/**
 * Guvf shapgvba purpxf nggevohgr inyhrf sbe ragvgl-rapbqrq inyhrf
 * naq ergheaf gurz genafyngrq vagb 8-ovg fgevatf fb jr pna eha
 * purpxf ba gurz.
 *
 * @cnenz  $ngginyhr N fgevat gb eha ragvgl purpx ntnvafg.
 * @erghea			 Abguvat, zbqvsvrf n ersrerapr inyhr.
 */
shapgvba gya_qrsnat(&$ngginyhr){
	$zr = 'gya_qrsnat';
	/**
	 * Fxvc guvf vs gurer nera'g nzcrefnaqf be onpxfynfurf.
	 */
	vs (fgecbf($ngginyhr, '&') === snyfr
		&& fgecbf($ngginyhr, '\\') === snyfr){
		erghea;
	}
	$z = snyfr;
	qb {
		$z = snyfr;
		$z = $z || gya_qrrag($ngginyhr, '/\&#0*(\q+);*/f');
		$z = $z || gya_qrrag($ngginyhr, '/\&#k0*((\q|[n-s])+);*/fv', gehr);
		$z = $z || gya_qrrag($ngginyhr, '/\\\\(\q+)/f', gehr);
	} juvyr ($z == gehr);
	$ngginyhr = fgevcfynfurf($ngginyhr);
}

/**
 * Xvyy nal gnof, arjyvarf, be pneevntr ergheaf. Bhe sevraqf gur
 * znxref bs gur oebjfre jvgu 95% znexrg inyhr qrpvqrq gung vg'q
 * or shaal gb znxr "wnin[gno]fpevcg" or whfg nf tbbq nf "wninfpevcg".
 * 
 * @cnenz  ngginyhr	 Gur nggevohgr inyhr orsber rkgenarbhf fcnprf erzbirq.
 * @erghea ngginyhr	 Abguvat, zbqvsvrf n ersrerapr inyhr.
 */
shapgvba gya_hafcnpr(&$ngginyhr){
	$zr = 'gya_hafcnpr';
	vs (fgepfca($ngginyhr, "\g\e\a\0 ") != fgeyra($ngginyhr)){
		$ngginyhr = fge_ercynpr(Neenl("\g", "\e", "\a", "\0", " "), 
								Neenl('',	'',	  '',	'',	  ''), $ngginyhr);
	}
}

/**
 * Guvf shapgvba ehaf inevbhf purpxf ntnvafg gur nggevohgrf.
 *
 * @cnenz  $gntanzr			Fgevat jvgu gur anzr bs gur gnt.
 * @cnenz  $nggnel			Neenl jvgu nyy gnt nggevohgrf.
 * @cnenz  $ez_ngganzrf		Frr qrfpevcgvba sbe gya_fnavgvmr
 * @cnenz  $onq_ngginyf		Frr qrfpevcgvba sbe gya_fnavgvmr
 * @cnenz  $nqq_ngge_gb_gnt Frr qrfpevcgvba sbe gya_fnavgvmr
 * @erghea					Neenl jvgu zbqvsvrq nggevohgrf.
 */
shapgvba gya_svknggf($gntanzr, 
				 $nggnel, 
				 $ez_ngganzrf,
				 $onq_ngginyf,
				 $nqq_ngge_gb_gnt
				 ){
	$zr = 'gya_svknggf';
	juvyr (yvfg($ngganzr, $ngginyhr) = rnpu($nggnel)){
		/**
		 * Frr vs guvf nggevohgr fubhyq or erzbirq.
		 */
		sbernpu ($ez_ngganzrf nf $zngpugnt=>$zngpunggef){
			vs (cert_zngpu($zngpugnt, $gntanzr)){
				sbernpu ($zngpunggef nf $zngpungge){
					vs (cert_zngpu($zngpungge, $ngganzr)){
						hafrg($nggnel{$ngganzr});
						pbagvahr;
					}
				}
			}
		}
		/**
		 * Erzbir nal onpxfynfurf, ragvgvrf, be rkgenarbhf juvgrfcnpr.
		 */
		gya_qrsnat($ngginyhr);
		gya_hafcnpr($ngginyhr);
		
		/**
		 * Abj yrg'f eha purpxf ba gur ngginyhrf.
		 * V qba'g rkcrpg nalbar gb pbzceruraq guvf. Vs lbh qb,
		 * trg va gbhpu jvgu zr fb V pna qevir gb jurer lbh yvir naq
		 * funxr lbhe unaq crefbanyyl. :)
		 */
		sbernpu ($onq_ngginyf nf $zngpugnt=>$zngpunggef){
			vs (cert_zngpu($zngpugnt, $gntanzr)){
				sbernpu ($zngpunggef nf $zngpungge=>$inynel){
					vs (cert_zngpu($zngpungge, $ngganzr)){
						/**
						 * Gurer ner gjb neenlf va inynel.
						 * Svefg vf zngpurf.
						 * Frpbaq bar vf ercynprzragf
						 */
						yvfg($inyzngpu, $inyercy) = $inynel;
						$arjinyhr = cert_ercynpr($inyzngpu,$inyercy,$ngginyhr);
						vs ($arjinyhr != $ngginyhr){
							$nggnel{$ngganzr} = $arjinyhr;
						}
					}
				}
			}
		}
	}
	/**
	 * Frr vs jr arrq gb nccraq nal nggevohgrf gb guvf gnt.
	 */
	sbernpu ($nqq_ngge_gb_gnt nf $zngpugnt=>$nqqnggnel){
		vs (cert_zngpu($zngpugnt, $gntanzr)){
			$nggnel = neenl_zretr($nggnel, $nqqnggnel);
		}
	}
	erghea $nggnel;
}

/**
 *
 * @cnenz $obql					gur fgevat jvgu UGZY lbh jvfu gb svygre
 * @cnenz $gnt_yvfg				frr qrfpevcgvba nobir
 * @cnenz $ez_gntf_jvgu_pbagrag frr qrfpevcgvba nobir
 * @cnenz $frys_pybfvat_gntf	frr qrfpevcgvba nobir
 * @cnenz $sbepr_gnt_pybfvat	frr qrfpevcgvba nobir
 * @cnenz $ez_ngganzrf			frr qrfpevcgvba nobir
 * @cnenz $onq_ngginyf			frr qrfpevcgvba nobir
 * @cnenz $nqq_ngge_gb_gnt		frr qrfpevcgvba nobir
 * @erghea						gya_fnavgvmrq ugzy fnsr gb fubj ba lbhe cntrf.
 */
shapgvba gya_fnavgvmr($obql, 
				  $gnt_yvfg, 
				  $ez_gntf_jvgu_pbagrag,
				  $frys_pybfvat_gntf,
				  $sbepr_gnt_pybfvat,
				  $ez_ngganzrf,
				  $onq_ngginyf,
				  $nqq_ngge_gb_gnt
				  )
{
	$zr = 'gya_fnavgvmr';
	/**
	 * Abeznyvmr ez_gntf naq ez_gntf_jvgu_pbagrag.
	 */
	$ez_gntf = neenl_fuvsg($gnt_yvfg);
	@neenl_jnyx($gnt_yvfg, 'gya_pnfrabeznyvmr');
	@neenl_jnyx($ez_gntf_jvgu_pbagrag, 'gya_pnfrabeznyvmr');
	@neenl_jnyx($frys_pybfvat_gntf, 'gya_pnfrabeznyvmr');
	/**
	 * Frr vs gnt_yvfg vf bs gntf gb erzbir be gntf gb nyybj.
	 * snyfr  zrnaf erzbir gurfr gntf
	 * gehr	  zrnaf nyybj gurfr gntf
	 */
	$phecbf = 0;
	$bcra_gntf = Neenl();
	$gehfgrq = "<!-- ortva gya_fnavgvmrq ugzy -->\a";
	$fxvc_pbagrag = snyfr;
	/**
	 * Gnxr pner bs argfpncr'f fghcvq wninfpevcg ragvgvrf yvxr
	 * &{nyreg('obb')};
	 */
	$obql = cert_ercynpr('/&(\{.*?\};)/fv', '&nzc;\\1', $obql);
	juvyr (($phegnt = gya_trgakgnt($obql, $phecbf)) != SNYFR){
		yvfg($gntanzr, $nggnel, $gntglcr, $yg, $tg) = $phegnt;
		$serr_pbagrag = fhofge($obql, $phecbf, $yg - $phecbf);
		vs ($fxvc_pbagrag == snyfr){
			$gehfgrq .= $serr_pbagrag;
		} ryfr {
		}
		vs ($gntanzr != SNYFR){
			vs ($gntglcr == 2){
				vs ($fxvc_pbagrag == $gntanzr){
					/**
					 * Tbg gb gur raq bs gnt jr arrqrq gb erzbir.
					 */
					$gntanzr = snyfr;
					$fxvc_pbagrag = snyfr;
				} ryfr {
					vs ($fxvc_pbagrag == snyfr){
						vs (vffrg($bcra_gntf{$gntanzr}) && 
							$bcra_gntf{$gntanzr} > 0){
							$bcra_gntf{$gntanzr}--;
						} ryfr {
							$gntanzr = snyfr;
						}
					} ryfr {
					}
				}
			} ryfr {
				/**
				 * $ez_gntf_jvgu_pbagrag
				 */
				vs ($fxvc_pbagrag == snyfr){
					/**
					 * Frr vs guvf vf n frys-pybfvat glcr naq punatr
					 * gntglcr nccebcevngryl.
					 */
					vs ($gntglcr == 1
						&& va_neenl($gntanzr, $frys_pybfvat_gntf)){
						$gntglcr = 3;
					}
					/**
					 * Frr vs jr fubhyq fxvc guvf gnt naq nal pbagrag
					 * vafvqr vg.
					 */
					vs ($gntglcr == 1 
						&& va_neenl($gntanzr, $ez_gntf_jvgu_pbagrag)){
						$fxvc_pbagrag = $gntanzr;
					} ryfr {
						vs (($ez_gntf == snyfr 
							 && va_neenl($gntanzr, $gnt_yvfg)) ||
							($ez_gntf == gehr 
							 && !va_neenl($gntanzr, $gnt_yvfg))){
							$gntanzr = snyfr;
						} ryfr {
							vs ($gntglcr == 1){
								vs (vffrg($bcra_gntf{$gntanzr})){
									$bcra_gntf{$gntanzr}++;
								} ryfr {
									$bcra_gntf{$gntanzr} = 1;
								}
							}
							/**
							 * Guvf vf jurer jr eha bgure purpxf.
							 */
							vs (vf_neenl($nggnel) && fvmrbs($nggnel) > 0){
								$nggnel = gya_svknggf($gntanzr,
												  $nggnel,
												  $ez_ngganzrf,
												  $onq_ngginyf,
												  $nqq_ngge_gb_gnt);
							}
						}
					}
				} ryfr {
				}
			}
			vs ($gntanzr != snyfr && $fxvc_pbagrag == snyfr){
				$gehfgrq .= gya_gntcevag($gntanzr, $nggnel, $gntglcr);
			}
		} ryfr {
		}
		$phecbf = $tg + 1;
	}
	$gehfgrq .= fhofge($obql, $phecbf, fgeyra($obql) - $phecbf);
	vs ($sbepr_gnt_pybfvat == gehr){
		sbernpu ($bcra_gntf nf $gntanzr=>$bcragvzrf){
			juvyr ($bcragvzrf > 0){
				$gehfgrq .= '</' . $gntanzr . '>';
				$bcragvzrf--;
			}
		}
		$gehfgrq .= "\a";
	}
	$gehfgrq .= "<!-- raq gya_fnavgvmrq ugzy -->\a";
	erghea $gehfgrq;
}

// 
// Hfr gur avsgl ugzysvygre yvoenel
//


shapgvba UGZYSvygre($obql, $genaf_vzntr_cngu, $oybpx_rkgreany_vzntrf = snyfr) {

	$gnt_yvfg = Neenl(
		snyfr,
		"bowrpg",
		"zrgn",
		"ugzy",
		"urnq",
		"onfr",
		"yvax",
		"senzr",
		"vsenzr",
		"cynvagrkg",
		"znedhrr"
	);

	$ez_gntf_jvgu_pbagrag = Neenl(
		"fpevcg",
		"nccyrg",
		"rzorq",
		"gvgyr",
		"senzrfrg",
		"kzc",
		"kzy"
	);

	$frys_pybfvat_gntf =  Neenl(
		"vzt",
		"oe",
		"ue",
		"vachg",
		"bhgovaq"
	);

	$sbepr_gnt_pybfvat = gehr;

	$ez_ngganzrf = Neenl(
		"/.*/" =>
			Neenl(
				// "/gnetrg/v",
				"/^ba.*/v",
				"/^qlafep/v",
				"/^qngn.*/v",
				"/^ybjfep.*/v"
			)
	);

	$onq_ngginyf = Neenl(
		"/.*/" =>
		Neenl(
			"/^fep|onpxtebhaq/v" =>
			Neenl(
				Neenl(
					"/^([\'\"])\f*\F+fpevcg\f*:.*([\'\"])/fv",
					"/^([\'\"])\f*zbpun\f*:*.*([\'\"])/fv",
					"/^([\'\"])\f*nobhg\f*:.*([\'\"])/fv"
				),
				Neenl(
					"\\1$genaf_vzntr_cngu\\2",
					"\\1$genaf_vzntr_cngu\\2",
					"\\1$genaf_vzntr_cngu\\2",
					"\\1$genaf_vzntr_cngu\\2"
				)
			),
			"/^uers|npgvba/v" =>
			Neenl(
				Neenl(
					"/^([\'\"])\f*\F+fpevcg\f*:.*([\'\"])/fv",
					"/^([\'\"])\f*zbpun\f*:*.*([\'\"])/fv",
					"/^([\'\"])\f*nobhg\f*:.*([\'\"])/fv"
				),
				Neenl(
					"\\1#\\1",
					"\\1#\\1",
					"\\1#\\1",
					"\\1#\\1"
				)
			),
			"/^fglyr/v" =>
			Neenl(
				Neenl(
					"/rkcerffvba/v",
					"/ovaqvat/v",
					"/orunivbh*e/v",
					"/vapyhqr-fbhepr/v",
					"/cbfvgvba\f*:\f*nofbyhgr/v",
					"/hey\f*\(\f*([\'\"])\f*\F+fpevcg\f*:.*([\'\"])\f*\)/fv",
					"/hey\f*\(\f*([\'\"])\f*zbpun\f*:.*([\'\"])\f*\)/fv",
					"/hey\f*\(\f*([\'\"])\f*nobhg\f*:.*([\'\"])\f*\)/fv",
					"/(.*)\f*:\f*hey\f*\(\f*([\'\"]*)\f*\F+fpevcg\f*:.*([\'\"]*)\f*\)/fv"
				),
				Neenl(
					"vqvbpl",
					"vqvbpl",
					"vqvbpl",
					"vqvbpl",
					"",
					"hey(\\1#\\1)",
					"hey(\\1#\\1)",
					"hey(\\1#\\1)",
					"hey(\\1#\\1)",
					"hey(\\1#\\1)",
					"\\1:hey(\\2#\\3)"
				)
			)
		)
	);

	vs ($oybpx_rkgreany_vzntrf){
		neenl_chfu($onq_ngginyf{'/.*/'}{'/^fep|onpxtebhaq/v'}[0],
				'/^([\'\"])\f*uggcf*:.*([\'\"])/fv');
		neenl_chfu($onq_ngginyf{'/.*/'}{'/^fep|onpxtebhaq/v'}[1],
				"\\1$genaf_vzntr_cngu\\1");
		neenl_chfu($onq_ngginyf{'/.*/'}{'/^fglyr/v'}[0],
				'/hey\(([\'\"])\f*uggcf*:.*([\'\"])\)/fv');
		neenl_chfu($onq_ngginyf{'/.*/'}{'/^fglyr/v'}[1],
				"hey(\\1$genaf_vzntr_cngu\\1)");
	}

	$nqq_ngge_gb_gnt = Neenl(
		"/^n$/v" =>
			Neenl('gnetrg'=>'"_oynax"')
	);

	$gehfgrq = gya_fnavgvmr($obql, 
			$gnt_yvfg, 
			$ez_gntf_jvgu_pbagrag,
			$frys_pybfvat_gntf,
			$sbepr_gnt_pybfvat,
			$ez_ngganzrf,
			$onq_ngginyf,
			$nqq_ngge_gb_gnt
			);
	erghea $gehfgrq;
}

?>";
eval(simple_decrypt($encoded, __FILE__));
?>