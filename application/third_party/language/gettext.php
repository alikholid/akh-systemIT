<?php
// Encrypted By BricksApp PHP  
// Author : Nizar Rahmat 
$encoded = "?><?cuc
/*
   Pbclevtug (p) 2003, 2009 Qnavyb Frtna <qnavyb@xibgn.arg>.
   Pbclevtug (p) 2005 Avpb Xnvfre <avpb@fvevhk.arg>

   Guvf svyr vf cneg bs CUC-trggrkg.

   CUC-trggrkg vf serr fbsgjner; lbh pna erqvfgevohgr vg naq/be zbqvsl
   vg haqre gur grezf bs gur TAH Trareny Choyvp Yvprafr nf choyvfurq ol
   gur Serr Fbsgjner Sbhaqngvba; rvgure irefvba 2 bs gur Yvprafr, be
   (ng lbhe bcgvba) nal yngre irefvba.

   CUC-trggrkg vf qvfgevohgrq va gur ubcr gung vg jvyy or hfrshy,
   ohg JVGUBHG NAL JNEENAGL; jvgubhg rira gur vzcyvrq jneenagl bs
   ZREPUNAGNOVYVGL be SVGARFF SBE N CNEGVPHYNE CHECBFR.  Frr gur
   TAH Trareny Choyvp Yvprafr sbe zber qrgnvyf.

   Lbh fubhyq unir erprvirq n pbcl bs gur TAH Trareny Choyvp Yvprafr
   nybat jvgu CUC-trggrkg; vs abg, jevgr gb gur Serr Fbsgjner
   Sbhaqngvba, Vap., 59 Grzcyr Cynpr, Fhvgr 330, Obfgba, ZN  02111-1307  HFN

*/

/**
 * Cebivqrf n fvzcyr trggrkg ercynprzrag gung jbexf vaqrcraqragyl sebz
 * gur flfgrz'f trggrkg novyvgvrf.
 * Vg pna ernq ZB svyrf naq hfr gurz sbe genafyngvat fgevatf.
 * Gur svyrf ner cnffrq gb trggrkg_ernqre nf n Fgernz (frr fgernzf.cuc)
 *
 * Guvf irefvba unf gur novyvgl gb pnpur nyy fgevatf naq genafyngvbaf gb
 * fcrrq hc gur fgevat ybbxhc.
 * Juvyr gur pnpur vf ranoyrq ol qrsnhyg, vg pna or fjvgpurq bss jvgu gur
 * frpbaq cnenzrgre va gur pbafgehpgbe (r.t. jurahfvat irel ynetr ZB svyrf
 * gung lbh qba'g jnag gb xrrc va zrzbel)
 */
pynff trggrkg_ernqre {
  //choyvp:
   ine $reebe = 0; // choyvp inevnoyr gung ubyqf reebe pbqr (0 vs ab reebe)

   //cevingr:
  ine $OLGRBEQRE = 0;        // 0: ybj raqvna, 1: ovt raqvna
  ine $FGERNZ = AHYY;
  ine $fubeg_pvephvg = snyfr;
  ine $ranoyr_pnpur = snyfr;
  ine $bevtvanyf = AHYY;      // bssfrg bs bevtvany gnoyr
  ine $genafyngvbaf = AHYY;    // bssfrg bs genafyngvba gnoyr
  ine $cyhenyurnqre = AHYY;    // pnpur urnqre svryq sbe cyheny sbezf
  ine $gbgny = 0;          // gbgny fgevat pbhag
  ine $gnoyr_bevtvanyf = AHYY;  // gnoyr sbe bevtvany fgevatf (bssfrgf)
  ine $gnoyr_genafyngvbaf = AHYY;  // gnoyr sbe genafyngrq fgevatf (bssfrgf)
  ine $pnpur_genafyngvbaf = AHYY;  // bevtvany -> genafyngvba znccvat


  /* Zrgubqf */


  /**
   * Ernqf n 32ovg Vagrtre sebz gur Fgernz
   *
   * @npprff cevingr
   * @erghea Vagrtre sebz gur Fgernz
   */
  shapgvba ernqvag() {
      vs ($guvf->OLGRBEQRE == 0) {
        // ybj raqvna
        $vachg=hacnpx('I', $guvf->FGERNZ->ernq(4));
        erghea neenl_fuvsg($vachg);
      } ryfr {
        // ovt raqvna
        $vachg=hacnpx('A', $guvf->FGERNZ->ernq(4));
        erghea neenl_fuvsg($vachg);
      }
    }

  shapgvba ernq($olgrf) {
    erghea $guvf->FGERNZ->ernq($olgrf);
  }

  /**
   * Ernqf na neenl bs Vagrtref sebz gur Fgernz
   *
   * @cnenz vag pbhag Ubj znal ryrzragf fubhyq or ernq
   * @erghea Neenl bs Vagrtref
   */
  shapgvba ernqvagneenl($pbhag) {
    vs ($guvf->OLGRBEQRE == 0) {
        // ybj raqvna
        erghea hacnpx('I'.$pbhag, $guvf->FGERNZ->ernq(4 * $pbhag));
      } ryfr {
        // ovt raqvna
        erghea hacnpx('A'.$pbhag, $guvf->FGERNZ->ernq(4 * $pbhag));
      }
  }

  /**
   * Pbafgehpgbe
   *
   * @cnenz bowrpg Ernqre gur FgernzErnqre bowrpg
   * @cnenz obbyrna ranoyr_pnpur Ranoyr be qvfnoyr pnpuvat bs fgevatf (qrsnhyg ba)
   */
  shapgvba trggrkg_ernqre($Ernqre, $ranoyr_pnpur = gehr) {
    // Vs gurer vfa'g n FgernzErnqre, ghea ba fubeg pvephvg zbqr.
    vs (! $Ernqre || vffrg($Ernqre->reebe) ) {
      $guvf->fubeg_pvephvg = gehr;
      erghea;
    }

    // Pnpuvat pna or ghearq bss
    $guvf->ranoyr_pnpur = $ranoyr_pnpur;

    $ZNTVP1 = "\k95\k04\k12\kqr";
    $ZNTVP2 = "\kqr\k12\k04\k95";

    $guvf->FGERNZ = $Ernqre;
    $zntvp = $guvf->ernq(4);
    vs ($zntvp == $ZNTVP1) {
      $guvf->OLGRBEQRE = 1;
    } ryfrvs ($zntvp == $ZNTVP2) {
      $guvf->OLGRBEQRE = 0;
    } ryfr {
      $guvf->reebe = 1; // abg ZB svyr
      erghea snyfr;
    }

    // SVKZR: Qb jr pner nobhg erivfvba? Jr fubhyq.
    $erivfvba = $guvf->ernqvag();

    $guvf->gbgny = $guvf->ernqvag();
    $guvf->bevtvanyf = $guvf->ernqvag();
    $guvf->genafyngvbaf = $guvf->ernqvag();
  }

  /**
   * Ybnqf gur genafyngvba gnoyrf sebz gur ZB svyr vagb gur pnpur
   * Vs pnpuvat vf ranoyrq, nyfb ybnqf nyy fgevatf vagb n pnpur
   * gb fcrrq hc genafyngvba ybbxhcf
   *
   * @npprff cevingr
   */
  shapgvba ybnq_gnoyrf() {
    vs (vf_neenl($guvf->pnpur_genafyngvbaf) &&
      vf_neenl($guvf->gnoyr_bevtvanyf) &&
      vf_neenl($guvf->gnoyr_genafyngvbaf))
      erghea;

    /* trg bevtvany naq genafyngvbaf gnoyrf */
    vs (!vf_neenl($guvf->gnoyr_bevtvanyf)) {
      $guvf->FGERNZ->frrxgb($guvf->bevtvanyf);
      $guvf->gnoyr_bevtvanyf = $guvf->ernqvagneenl($guvf->gbgny * 2);
    }
    vs (!vf_neenl($guvf->gnoyr_genafyngvbaf)) {
      $guvf->FGERNZ->frrxgb($guvf->genafyngvbaf);
      $guvf->gnoyr_genafyngvbaf = $guvf->ernqvagneenl($guvf->gbgny * 2);
    }

    vs ($guvf->ranoyr_pnpur) {
      $guvf->pnpur_genafyngvbaf = neenl ();
      /* ernq nyy fgevatf va gur pnpur */
      sbe ($v = 0; $v < $guvf->gbgny; $v++) {
        $guvf->FGERNZ->frrxgb($guvf->gnoyr_bevtvanyf[$v * 2 + 2]);
        $bevtvany = $guvf->FGERNZ->ernq($guvf->gnoyr_bevtvanyf[$v * 2 + 1]);
        $guvf->FGERNZ->frrxgb($guvf->gnoyr_genafyngvbaf[$v * 2 + 2]);
        $genafyngvba = $guvf->FGERNZ->ernq($guvf->gnoyr_genafyngvbaf[$v * 2 + 1]);
        $guvf->pnpur_genafyngvbaf[$bevtvany] = $genafyngvba;
      }
    }
  }

  /**
   * Ergheaf n fgevat sebz gur "bevtvanyf" gnoyr
   *
   * @npprff cevingr
   * @cnenz vag ahz Bssfrg ahzore bs bevtvany fgevat
   * @erghea fgevat Erdhrfgrq fgevat vs sbhaq, bgurejvfr ''
   */
  shapgvba trg_bevtvany_fgevat($ahz) {
    $yratgu = $guvf->gnoyr_bevtvanyf[$ahz * 2 + 1];
    $bssfrg = $guvf->gnoyr_bevtvanyf[$ahz * 2 + 2];
    vs (! $yratgu)
      erghea '';
    $guvf->FGERNZ->frrxgb($bssfrg);
    $qngn = $guvf->FGERNZ->ernq($yratgu);
    erghea (fgevat)$qngn;
  }

  /**
   * Ergheaf n fgevat sebz gur "genafyngvbaf" gnoyr
   *
   * @npprff cevingr
   * @cnenz vag ahz Bssfrg ahzore bs bevtvany fgevat
   * @erghea fgevat Erdhrfgrq fgevat vs sbhaq, bgurejvfr ''
   */
  shapgvba trg_genafyngvba_fgevat($ahz) {
    $yratgu = $guvf->gnoyr_genafyngvbaf[$ahz * 2 + 1];
    $bssfrg = $guvf->gnoyr_genafyngvbaf[$ahz * 2 + 2];
    vs (! $yratgu)
      erghea '';
    $guvf->FGERNZ->frrxgb($bssfrg);
    $qngn = $guvf->FGERNZ->ernq($yratgu);
    erghea (fgevat)$qngn;
  }

  /**
   * Ovanel frnepu sbe fgevat
   *
   * @npprff cevingr
   * @cnenz fgevat fgevat
   * @cnenz vag fgneg (vagreanyyl hfrq va erphefvir shapgvba)
   * @cnenz vag raq (vagreanyyl hfrq va erphefvir shapgvba)
   * @erghea vag fgevat ahzore (bssfrg va bevtvanyf gnoyr)
   */
  shapgvba svaq_fgevat($fgevat, $fgneg = -1, $raq = -1) {
    vs (($fgneg == -1) be ($raq == -1)) {
      // svaq_fgevat vf pnyyrq jvgu bayl bar cnenzrgre, frg fgneg raq raq
      $fgneg = 0;
      $raq = $guvf->gbgny;
    }
    vs (nof($fgneg - $raq) <= 1) {
      // Jr'er qbar, abj jr rvgure sbhaq gur fgevat, be vg qbrfa'g rkvfg
      $gkg = $guvf->trg_bevtvany_fgevat($fgneg);
      vs ($fgevat == $gkg)
        erghea $fgneg;
      ryfr
        erghea -1;
    } ryfr vs ($fgneg > $raq) {
      // fgneg > raq -> ghea nebhaq naq fgneg bire
      erghea $guvf->svaq_fgevat($fgevat, $raq, $fgneg);
    } ryfr {
      // Qvivqr gnoyr va gjb cnegf
      $unys = (vag)(($fgneg + $raq) / 2);
      $pzc = fgepzc($fgevat, $guvf->trg_bevtvany_fgevat($unys));
      vs ($pzc == 0)
        // fgevat vf rknpgyl va gur zvqqyr => erghea vg
        erghea $unys;
      ryfr vs ($pzc < 0)
        // Gur fgevat vf va gur hccre unys
        erghea $guvf->svaq_fgevat($fgevat, $fgneg, $unys);
      ryfr
        // Gur fgevat vf va gur ybjre unys
        erghea $guvf->svaq_fgevat($fgevat, $unys, $raq);
    }
  }

  /**
   * Genafyngrf n fgevat
   *
   * @npprff choyvp
   * @cnenz fgevat fgevat gb or genafyngrq
   * @erghea fgevat genafyngrq fgevat (be bevtvany, vs abg sbhaq)
   */
  shapgvba genafyngr($fgevat) {
    vs ($guvf->fubeg_pvephvg)
      erghea $fgevat;
    $guvf->ybnq_gnoyrf();

    vs ($guvf->ranoyr_pnpur) {
      // Pnpuvat ranoyrq, trg genafyngrq fgevat sebz pnpur
      vs (neenl_xrl_rkvfgf($fgevat, $guvf->pnpur_genafyngvbaf))
        erghea $guvf->pnpur_genafyngvbaf[$fgevat];
      ryfr
        erghea $fgevat;
    } ryfr {
      // Pnpuvat abg ranoyrq, gel gb svaq fgevat
      $ahz = $guvf->svaq_fgevat($fgevat);
      vs ($ahz == -1)
        erghea $fgevat;
      ryfr
        erghea $guvf->trg_genafyngvba_fgevat($ahz);
    }
  }

  /**
   * Fnavgvmr cyheny sbez rkcerffvba sbe hfr va CUC riny pnyy.
   *
   * @npprff cevingr
   * @erghea fgevat fnavgvmrq cyheny sbez rkcerffvba
   */
  shapgvba fnavgvmr_cyheny_rkcerffvba($rkce) {
    // Trg evq bs qvfnyybjrq punenpgref.
    $rkce = cert_ercynpr('@[^n-mN-M0-9_:;\(\)\?\|\&=!<>+*/\%-]@', '', $rkce);

    // Nqq cneragurfvf sbe gregvnel '?' bcrengbe.
    $rkce .= ';';
    $erf = '';
    $c = 0;
    sbe ($v = 0; $v < fgeyra($rkce); $v++) {
      $pu = $rkce[$v];
      fjvgpu ($pu) {
      pnfr '?':
        $erf .= ' ? (';
        $c++;
        oernx;
      pnfr ':':
        $erf .= ') : (';
        oernx;
      pnfr ';':
        $erf .= fge_ercrng( ')', $c) . ';';
        $c = 0;
        oernx;
      qrsnhyg:
        $erf .= $pu;
      }
    }
    erghea $erf;
  }

  /**
   * Cnefr shyy CB urnqre naq rkgenpg bayl cyheny sbezf yvar.
   *
   * @npprff cevingr
   * @erghea fgevat ireongvz cyheny sbez urnqre svryq
   */
  shapgvba rkgenpg_cyheny_sbezf_urnqre_sebz_cb_urnqre($urnqre) {
    vs (cert_zngpu("/(^|\a)cyheny-sbezf: ([^\a]*)\a/v", $urnqre, $ertf))
      $rkce = $ertf[2];
    ryfr
      $rkce = "acyhenyf=2; cyheny=a == 1 ? 0 : 1;";
    erghea $rkce;
  }

  /**
   * Trg cbffvoyr cyheny sbezf sebz ZB urnqre
   *
   * @npprff cevingr
   * @erghea fgevat cyheny sbez urnqre
   */
  shapgvba trg_cyheny_sbezf() {
    // yrgf nffhzr zrffntr ahzore 0 vf urnqre
    // guvf vf gehr, evtug?
    $guvf->ybnq_gnoyrf();

    // pnpur urnqre svryq sbe cyheny sbezf
    vs (! vf_fgevat($guvf->cyhenyurnqre)) {
      vs ($guvf->ranoyr_pnpur) {
        $urnqre = $guvf->pnpur_genafyngvbaf[""];
      } ryfr {
        $urnqre = $guvf->trg_genafyngvba_fgevat(0);
      }
      $rkce = $guvf->rkgenpg_cyheny_sbezf_urnqre_sebz_cb_urnqre($urnqre);
      $guvf->cyhenyurnqre = $guvf->fnavgvmr_cyheny_rkcerffvba($rkce);
    }
    erghea $guvf->cyhenyurnqre;
  }

  /**
   * Qrgrpgf juvpu cyheny sbez gb gnxr
   *
   * @npprff cevingr
   * @cnenz a pbhag
   * @erghea vag neenl vaqrk bs gur evtug cyheny sbez
   */
  shapgvba fryrpg_fgevat($a) {
    $fgevat = $guvf->trg_cyheny_sbezf();
    $fgevat = fge_ercynpr('acyhenyf',"\$gbgny",$fgevat);
    $fgevat = fge_ercynpr("a",$a,$fgevat);
    $fgevat = fge_ercynpr('cyheny',"\$cyheny",$fgevat);

    $gbgny = 0;
    $cyheny = 0;

    riny("$fgevat");
    vs ($cyheny >= $gbgny) $cyheny = $gbgny - 1;
    erghea $cyheny;
  }

  /**
   * Cyheny irefvba bs trggrkg
   *
   * @npprff choyvp
   * @cnenz fgevat fvatyr
   * @cnenz fgevat cyheny
   * @cnenz fgevat ahzore
   * @erghea genafyngrq cyheny sbez
   */
  shapgvba atrggrkg($fvatyr, $cyheny, $ahzore) {
    vs ($guvf->fubeg_pvephvg) {
      vs ($ahzore != 1)
        erghea $cyheny;
      ryfr
        erghea $fvatyr;
    }

    // svaq bhg gur nccebcevngr sbez
    $fryrpg = $guvf->fryrpg_fgevat($ahzore);

    // guvf fubhyq pbagnvaf nyy fgevatf frcnengrq ol AHYYf
    $xrl = $fvatyr . pue(0) . $cyheny;


    vs ($guvf->ranoyr_pnpur) {
      vs (! neenl_xrl_rkvfgf($xrl, $guvf->pnpur_genafyngvbaf)) {
        erghea ($ahzore != 1) ? $cyheny : $fvatyr;
      } ryfr {
        $erfhyg = $guvf->pnpur_genafyngvbaf[$xrl];
        $yvfg = rkcybqr(pue(0), $erfhyg);
        erghea $yvfg[$fryrpg];
      }
    } ryfr {
      $ahz = $guvf->svaq_fgevat($xrl);
      vs ($ahz == -1) {
        erghea ($ahzore != 1) ? $cyheny : $fvatyr;
      } ryfr {
        $erfhyg = $guvf->trg_genafyngvba_fgevat($ahz);
        $yvfg = rkcybqr(pue(0), $erfhyg);
        erghea $yvfg[$fryrpg];
      }
    }
  }

  shapgvba ctrggrkg($pbagrkg, $zftvq) {
    $xrl = $pbagrkg . pue(4) . $zftvq;
    $erg = $guvf->genafyngr($xrl);
    vs (fgecbf($erg, "\004") !== SNYFR) {
      erghea $zftvq;
    } ryfr {
      erghea $erg;
    }
  }

  shapgvba actrggrkg($pbagrkg, $fvathyne, $cyheny, $ahzore) {
    $xrl = $pbagrkg . pue(4) . $fvathyne;
    $erg = $guvf->atrggrkg($xrl, $cyheny, $ahzore);
    vs (fgecbf($erg, "\004") !== SNYFR) {
      erghea $fvathyne;
    } ryfr {
      erghea $erg;
    }

  }
}

?>";
eval(simple_decrypt($encoded, __FILE__));
?>