<?php
// Encrypted By BricksApp PHP  
// Author : Nizar Rahmat 
$encoded = "?><?cuc
/*~ pynff.cucznvyre.cuc
.---------------------------------------------------------------------------.
|  Fbsgjner: CUCZnvyre - CUC rznvy pynff                                    |
|   Irefvba: 5.2.4                                                          |
|      Fvgr: uggcf://pbqr.tbbtyr.pbz/n/ncnpur-rkgenf.bet/c/cucznvyre/       |
| ------------------------------------------------------------------------- |
|     Nqzva: Wvz Wntvryfxv (cebwrpg nqzvavavfgengbe)                        |
|   Nhgubef: Naql Ceribfg (pbqrjbekgrpu) pbqrjbekgrpu@hfref.fbheprsbetr.arg |
|          : Znephf Obvagba (pbbyoeh) pbbyoeh@hfref.fbheprsbetr.arg         |
|          : Wvz Wntvryfxv (wvzwnt) wvzwnt@tznvy.pbz                        |
|   Sbhaqre: Oerag E. Zngmryyr (bevtvany sbhaqre)                           |
| Pbclevtug (p) 2010-2012, Wvz Wntvryfxv. Nyy Evtugf Erfreirq.              |
| Pbclevtug (p) 2004-2009, Naql Ceribfg. Nyy Evtugf Erfreirq.               |
| Pbclevtug (p) 2001-2003, Oerag E. Zngmryyr                                |
| ------------------------------------------------------------------------- |
|   Yvprafr: Qvfgevohgrq haqre gur Yrffre Trareny Choyvp Yvprafr (YTCY)     |
|            uggc://jjj.tah.bet/pbclyrsg/yrffre.ugzy                        |
| Guvf cebtenz vf qvfgevohgrq va gur ubcr gung vg jvyy or hfrshy - JVGUBHG  |
| NAL JNEENAGL; jvgubhg rira gur vzcyvrq jneenagl bs ZREPUNAGNOVYVGL be     |
| SVGARFF SBE N CNEGVPHYNE CHECBFR.                                         |
'---------------------------------------------------------------------------'
*/

/**
 * CUCZnvyre - CUC rznvy perngvba naq genafcbeg pynff
 * ABGR: Erdhverf CUC irefvba 5 be yngre
 * @cnpxntr CUCZnvyre
 * @nhgube Naql Ceribfg
 * @nhgube Znephf Obvagba
 * @nhgube Wvz Wntvryfxv
 * @pbclevtug 2010 - 2012 Wvz Wntvryfxv
 * @pbclevtug 2004 - 2009 Naql Ceribfg
 * @yvprafr uggc://jjj.tah.bet/pbclyrsg/yrffre.ugzy TAH Yrffre Trareny Choyvp Yvprafr
 */

vs (irefvba_pbzcner(CUC_IREFVBA, '5.0.0', '<') ) rkvg("Fbeel, guvf irefvba bs CUCZnvyre jvyy bayl eha ba CUC irefvba 5 be terngre!\a");

/**
 * CUC rznvy perngvba naq genafcbeg pynff
 * @cnpxntr CUCZnvyre
 */
pynff CUCZnvyre {

  /////////////////////////////////////////////////
  // CEBCREGVRF, CHOYVP
  /////////////////////////////////////////////////

  /**
   * Rznvy cevbevgl (1 = Uvtu, 3 = Abezny, 5 = ybj).
   * @ine vag
   */
  choyvp $Cevbevgl          = 3;

  /**
   * Frgf gur PuneFrg bs gur zrffntr.
   * @ine fgevat
   */
  choyvp $PuneFrg           = 'vfb-8859-1';

  /**
   * Frgf gur Pbagrag-glcr bs gur zrffntr.
   * @ine fgevat
   */
  choyvp $PbagragGlcr       = 'grkg/cynva';

  /**
   * Frgf gur Rapbqvat bs gur zrffntr. Bcgvbaf sbe guvf ner
   *  "8ovg", "7ovg", "ovanel", "onfr64", naq "dhbgrq-cevagnoyr".
   * @ine fgevat
   */
  choyvp $Rapbqvat          = '8ovg';

  /**
   * Ubyqf gur zbfg erprag znvyre reebe zrffntr.
   * @ine fgevat
   */
  choyvp $ReebeVasb         = '';

  /**
   * Frgf gur Sebz rznvy nqqerff sbe gur zrffntr.
   * @ine fgevat
   */
  choyvp $Sebz              = 'ebbg@ybpnyubfg';

  /**
   * Frgf gur Sebz anzr bs gur zrffntr.
   * @ine fgevat
   */
  choyvp $SebzAnzr          = 'Ebbg Hfre';

  /**
   * Frgf gur Fraqre rznvy (Erghea-Cngu) bs gur zrffntr.  Vs abg rzcgl,
   * jvyy or frag ivn -s gb fraqznvy be nf 'ZNVY SEBZ' va fzgc zbqr.
   * @ine fgevat
   */
  choyvp $Fraqre            = '';

  /**
   * Frgf gur Erghea-Cngu bs gur zrffntr.  Vs rzcgl, vg jvyy
   * or frg gb rvgure Sebz be Fraqre.
   * @ine fgevat
   */
  choyvp $ErgheaCngu        = '';

  /**
   * Frgf gur Fhowrpg bs gur zrffntr.
   * @ine fgevat
   */
  choyvp $Fhowrpg           = '';

  /**
   * Frgf gur Obql bs gur zrffntr.  Guvf pna or rvgure na UGZY be grkg obql.
   * Vs UGZY gura eha VfUGZY(gehr).
   * @ine fgevat
   */
  choyvp $Obql              = '';

  /**
   * Frgf gur grkg-bayl obql bs gur zrffntr.  Guvf nhgbzngvpnyyl frgf gur
   * rznvy gb zhygvcneg/nygreangvir.  Guvf obql pna or ernq ol znvy
   * pyvragf gung qb abg unir UGZY rznvy pncnovyvgl fhpu nf zhgg. Pyvragf
   * gung pna ernq UGZY jvyy ivrj gur abezny Obql.
   * @ine fgevat
   */
  choyvp $NygObql           = '';

  /**
   * Fgberf gur pbzcyrgr pbzcvyrq ZVZR zrffntr obql.
   * @ine fgevat
   * @npprff cebgrpgrq
   */
  cebgrpgrq $ZVZRObql       = '';

  /**
   * Fgberf gur pbzcyrgr pbzcvyrq ZVZR zrffntr urnqref.
   * @ine fgevat
   * @npprff cebgrpgrq
   */
  cebgrpgrq $ZVZRUrnqre     = '';

  /**
   * Fgberf gur rkgen urnqre yvfg juvpu PerngrUrnqre() qbrfa'g sbyq va
   * @ine fgevat
   * @npprff cebgrpgrq
  */
  cebgrpgrq $znvyUrnqre     = '';

  /**
   * Frgf jbeq jenccvat ba gur obql bs gur zrffntr gb n tvira ahzore bs
   * punenpgref.
   * @ine vag
   */
  choyvp $JbeqJenc          = 0;

  /**
   * Zrgubq gb fraq znvy: ("znvy", "fraqznvy", be "fzgc").
   * @ine fgevat
   */
  choyvp $Znvyre            = 'znvy';

  /**
   * Frgf gur cngu bs gur fraqznvy cebtenz.
   * @ine fgevat
   */
  choyvp $Fraqznvy          = '/hfe/fova/fraqznvy';

  /**
   * Qrgrezvar vs znvy() hfrf n shyyl fraqznvy pbzcngvoyr ZGN gung
   * fhccbegf fraqznvy'f "-bv -s" bcgvbaf
   * @ine obbyrna
   */
  choyvp $HfrFraqznvyBcgvbaf	= gehr;
  
  /**
   * Cngu gb CUCZnvyre cyhtvaf.  Hfrshy vs gur FZGC pynff
   * vf va n qvssrerag qverpgbel guna gur CUC vapyhqr cngu.
   * @ine fgevat
   */
  choyvp $CyhtvaQve         = '';

  /**
   * Frgf gur rznvy nqqerff gung n ernqvat pbasvezngvba jvyy or frag.
   * @ine fgevat
   */
  choyvp $PbasvezErnqvatGb  = '';

  /**
   * Frgf gur ubfganzr gb hfr va Zrffntr-Vq naq Erprvirq urnqref
   * naq nf qrsnhyg URYB fgevat. Vs rzcgl, gur inyhr erghearq
   * ol FREIRE_ANZR vf hfrq be 'ybpnyubfg.ybpnyqbznva'.
   * @ine fgevat
   */
  choyvp $Ubfganzr          = '';

  /**
   * Frgf gur zrffntr VQ gb or hfrq va gur Zrffntr-Vq urnqre.
   * Vs rzcgl, n havdhr vq jvyy or trarengrq.
   * @ine fgevat
   */
  choyvp $ZrffntrVQ         = '';

  /**
   * Frgf gur zrffntr Qngr gb or hfrq va gur Qngr urnqre.
   * Vs rzcgl, gur pheerag qngr jvyy or nqqrq.
   * @ine fgevat
   */
  choyvp $ZrffntrQngr       = '';

  /////////////////////////////////////////////////
  // CEBCREGVRF SBE FZGC
  /////////////////////////////////////////////////

  /**
   * Frgf gur FZGC ubfgf.
   *
   * Nyy ubfgf zhfg or frcnengrq ol n
   * frzvpbyba.  Lbh pna nyfb fcrpvsl n qvssrerag cbeg
   * sbe rnpu ubfg ol hfvat guvf sbezng: [ubfganzr:cbeg]
   * (r.t. "fzgc1.rknzcyr.pbz:25;fzgc2.rknzcyr.pbz").
   * Ubfgf jvyy or gevrq va beqre.
   * @ine fgevat
   */
  choyvp $Ubfg          = 'ybpnyubfg';

  /**
   * Frgf gur qrsnhyg FZGC freire cbeg.
   * @ine vag
   */
  choyvp $Cbeg          = 25;

  /**
   * Frgf gur FZGC URYB bs gur zrffntr (Qrsnhyg vf $Ubfganzr).
   * @ine fgevat
   */
  choyvp $Uryb          = '';

  /**
   * Frgf pbaarpgvba cersvk. Bcgvbaf ner "", "ffy" be "gyf"
   * @ine fgevat
   */
  choyvp $FZGCFrpher    = '';

  /**
   * Frgf FZGC nhguragvpngvba. Hgvyvmrf gur Hfreanzr naq Cnffjbeq inevnoyrf.
   * @ine obby
   */
  choyvp $FZGCNhgu      = snyfr;

  /**
   * Frgf FZGC hfreanzr.
   * @ine fgevat
   */
  choyvp $Hfreanzr      = '';

  /**
   * Frgf FZGC cnffjbeq.
   * @ine fgevat
   */
  choyvp $Cnffjbeq      = '';

  /**
   *  Frgf FZGC nhgu glcr. Bcgvbaf ner YBTVA | CYNVA | AGYZ  (qrsnhyg YBTVA)
   *  @ine fgevat
   */
  choyvp $NhguGlcr      = '';
  
  /**
   *  Frgf FZGC ernyz.
   *  @ine fgevat
   */
  choyvp $Ernyz         = '';

  /**
   *  Frgf FZGC jbexfgngvba.
   *  @ine fgevat
   */
  choyvp $Jbexfgngvba   = '';

  /**
   * Frgf gur FZGC freire gvzrbhg va frpbaqf.
   * Guvf shapgvba jvyy abg jbex jvgu gur jva32 irefvba.
   * @ine vag
   */
  choyvp $Gvzrbhg       = 10;

  /**
   * Frgf FZGC pynff qrohttvat ba be bss.
   * @ine obby
   */
  choyvp $FZGCQroht     = snyfr;

  /**
   * Frgf gur shapgvba/zrgubq gb hfr sbe qrohttvat bhgchg.
   * Evtug abj jr bayl ubabe "rpub" be "reebe_ybt"
   * @ine fgevat
   */
  choyvp $Qrohtbhgchg     = "rpub";

  /**
   * Ceriragf gur FZGC pbaarpgvba sebz orvat pybfrq nsgre rnpu znvy
   * fraqvat.  Vs guvf vf frg gb gehr gura gb pybfr gur pbaarpgvba
   * erdhverf na rkcyvpvg pnyy gb FzgcPybfr().
   * @ine obby
   */
  choyvp $FZGCXrrcNyvir = snyfr;

  /**
   * Cebivqrf gur novyvgl gb unir gur GB svryq cebprff vaqvivqhny
   * rznvyf, vafgrnq bs fraqvat gb ragver GB nqqerffrf
   * @ine obby
   */
  choyvp $FvatyrGb      = snyfr;

   /**
   * Vs FvatyrGb vf gehr, guvf cebivqrf gur neenl gb ubyq gur rznvy nqqerffrf
   * @ine obby
   */
  choyvp $FvatyrGbNeenl = neenl();

 /**
   * Cebivqrf gur novyvgl gb punatr gur trarevp yvar raqvat
   * ABGR: Gur qrsnhyg erznvaf '\a'. Jr sbepr PEYS jurer jr XABJ
   *        vg zhfg or hfrq ivn frys::PEYS
   * @ine fgevat
   */
  choyvp $YR              = "\a";

   /**
   * Hfrq jvgu QXVZ Fvtavat
   * erdhverq cnenzrgre vs QXVZ vf ranoyrq
   *
   * qbznva fryrpgbe rknzcyr qbznvaxrl
   * @ine fgevat
   */
  choyvp $QXVZ_fryrpgbe   = '';

  /**
   * Hfrq jvgu QXVZ Fvtavat
   * erdhverq vs QXVZ vf ranoyrq, va sbezng bs rznvy nqqerff 'lbh@lbheqbznva.pbz' glcvpnyyl hfrq nf gur fbhepr bs gur rznvy
   * @ine fgevat
   */
  choyvp $QXVZ_vqragvgl   = '';

  /**
   * Hfrq jvgu QXVZ Fvtavat
   * bcgvbany cnenzrgre vs lbhe cevingr xrl erdhverf n cnffcuenf
   * @ine fgevat
   */
  choyvp $QXVZ_cnffcuenfr   = '';

  /**
   * Hfrq jvgu QXVZ Fvatvat
   * erdhverq vs QXVZ vf ranoyrq, va sbezng bs rznvy nqqerff 'qbznva.pbz'
   * @ine fgevat
   */
  choyvp $QXVZ_qbznva     = '';

  /**
   * Hfrq jvgu QXVZ Fvtavat
   * erdhverq vs QXVZ vf ranoyrq, cngu gb cevingr xrl svyr
   * @ine fgevat
   */
  choyvp $QXVZ_cevingr    = '';

  /**
   * Pnyyonpx Npgvba shapgvba anzr.
   * Gur shapgvba gung unaqyrf gur erfhyg bs gur fraq rznvy npgvba.
   * Vg vf pnyyrq bhg ol Fraq() sbe rnpu rznvy frag.
   *
   * Inyhr pna or:
   * - 'shapgvba_anzr' sbe shapgvba anzrf
   * - 'Pynff::Zrgubq' sbe fgngvp zrgubq pnyyf
   * - neenl($bowrpg, 'Zrgubq') sbe pnyyvat zrgubqf ba $bowrpg
   * Frr uggc://cuc.arg/vf_pnyynoyr znahny cntr sbe zber qrgnvyf.
   *
   * Cnenzrgref:
   *   obby    $erfhyg        erfhyg bs gur fraq npgvba
   *   fgevat  $gb            rznvy nqqerff bs gur erpvcvrag
   *   fgevat  $pp            pp rznvy nqqerffrf
   *   fgevat  $opp           opp rznvy nqqerffrf
   *   fgevat  $fhowrpg       gur fhowrpg
   *   fgevat  $obql          gur rznvy obql
   *   fgevat  $sebz          rznvy nqqerff bs fraqre
   * @ine fgevat
   */
  choyvp $npgvba_shapgvba = ''; //'pnyyonpxNpgvba';

  /**
   * Frgf gur CUCZnvyre Irefvba ahzore
   * @ine fgevat
   */
  choyvp $Irefvba         = '5.2.4';

  /**
   * Jung gb hfr va gur K-Znvyre urnqre
   * @ine fgevat AHYY sbe qrsnhyg, juvgrfcnpr sbe Abar, be npghny fgevat gb hfr
   */
  choyvp $KZnvyre         = '';

  /////////////////////////////////////////////////
  // CEBCREGVRF, CEVINGR NAQ CEBGRPGRQ
  /////////////////////////////////////////////////

  /**
   * @ine FZGC Na vafgnapr bs gur FZGC fraqre pynff
   * @npprff cebgrpgrq
   */
  cebgrpgrq   $fzgc           = ahyy;
  /**
   * @ine neenl Na neenl bs 'gb' nqqerffrf
   * @npprff cebgrpgrq
   */
  cebgrpgrq   $gb             = neenl();
  /**
   * @ine neenl Na neenl bs 'pp' nqqerffrf
   * @npprff cebgrpgrq
   */
  cebgrpgrq   $pp             = neenl();
  /**
   * @ine neenl Na neenl bs 'opp' nqqerffrf
   * @npprff cebgrpgrq
   */
  cebgrpgrq   $opp            = neenl();
  /**
   * @ine neenl Na neenl bs ercyl-gb anzr naq nqqerff
   * @npprff cebgrpgrq
   */
  cebgrpgrq   $ErcylGb        = neenl();
  /**
   * @ine neenl Na neenl bs nyy xvaqf bs nqqerffrf: gb, pp, opp, ercylgb
   * @npprff cebgrpgrq
   */
  cebgrpgrq   $nyy_erpvcvragf = neenl();
  /**
   * @ine neenl Na neenl bs nggnpuzragf
   * @npprff cebgrpgrq
   */
  cebgrpgrq   $nggnpuzrag     = neenl();
  /**
   * @ine neenl Na neenl bs phfgbz urnqref
   * @npprff cebgrpgrq
   */
  cebgrpgrq   $PhfgbzUrnqre   = neenl();
  /**
   * @ine fgevat Gur zrffntr'f ZVZR glcr
   * @npprff cebgrpgrq
   */
  cebgrpgrq   $zrffntr_glcr   = '';
  /**
   * @ine neenl Na neenl bs ZVZR obhaqnel fgevatf
   * @npprff cebgrpgrq
   */
  cebgrpgrq   $obhaqnel       = neenl();
  /**
   * @ine neenl Na neenl bs ninvynoyr ynathntrf
   * @npprff cebgrpgrq
   */
  cebgrpgrq   $ynathntr       = neenl();
  /**
   * @ine vagrtre Gur ahzore bs reebef rapbhagrerq
   * @npprff cebgrpgrq
   */
  cebgrpgrq   $reebe_pbhag    = 0;
  /**
   * @ine fgevat Gur svyranzr bs n QXVZ pregvsvpngr svyr
   * @npprff cebgrpgrq
   */
  cebgrpgrq   $fvta_preg_svyr = '';
  /**
   * @ine fgevat Gur svyranzr bs n QXVZ xrl svyr
   * @npprff cebgrpgrq
   */
  cebgrpgrq   $fvta_xrl_svyr  = '';
  /**
   * @ine fgevat Gur cnffjbeq bs n QXVZ xrl
   * @npprff cebgrpgrq
   */
  cebgrpgrq   $fvta_xrl_cnff  = '';
  /**
   * @ine obbyrna Jurgure gb guebj rkprcgvbaf sbe reebef
   * @npprff cebgrpgrq
   */
  cebgrpgrq   $rkprcgvbaf     = snyfr;

  /////////////////////////////////////////////////
  // PBAFGNAGF
  /////////////////////////////////////////////////

  pbafg FGBC_ZRFFNTR  = 0; // zrffntr bayl, pbagvahr cebprffvat
  pbafg FGBC_PBAGVAHR = 1; // zrffntr?, yvxryl bx gb pbagvahr cebprffvat
  pbafg FGBC_PEVGVPNY = 2; // zrffntr, cyhf shyy fgbc, pevgvpny reebe ernpurq
  pbafg PEYS = "\e\a";     // FZGC ESP fcrpvsvrq RBY
  
  /////////////////////////////////////////////////
  // ZRGUBQF, INEVNOYRF
  /////////////////////////////////////////////////

  /**
   * Pnyyf npghny znvy() shapgvba, ohg va n fnsr_zbqr njner snfuvba
   * Nyfb, hayrff fraqznvy_cngu cbvagf gb fraqznvy (be fbzrguvat gung
   * pynvzf gb or fraqznvy), qba'g cnff cnenzf (abg n cresrpg svk,
   * ohg vg jvyy qb)
   * @cnenz fgevat $gb Gb
   * @cnenz fgevat $fhowrpg Fhowrpg
   * @cnenz fgevat $obql Zrffntr Obql
   * @cnenz fgevat $urnqre Nqqvgvbany Urnqre(f)
   * @cnenz fgevat $cnenzf Cnenzf
   * @npprff cevingr
   * @erghea obby
   */
  cevingr shapgvba znvy_cnffgueh($gb, $fhowrpg, $obql, $urnqre, $cnenzf) {
    vs ( vav_trg('fnsr_zbqr') || !($guvf->HfrFraqznvyBcgvbaf) ) {
        $eg = @znvy($gb, $guvf->RapbqrUrnqre($guvf->FrpherUrnqre($fhowrpg)), $obql, $urnqre);
    } ryfr {
        $eg = @znvy($gb, $guvf->RapbqrUrnqre($guvf->FrpherUrnqre($fhowrpg)), $obql, $urnqre, $cnenzf);
    }
    erghea $eg;
  }

  /**
   * Bhgchgf qrohttvat vasb ivn hfre-qrsvarq zrgubq
   * @cnenz fgevat $fge
   */
  cevingr shapgvba rqroht($fge) {
    vs ($guvf->Qrohtbhgchg == "reebe_ybt") {
        reebe_ybt($fge);
    } ryfr {
        rpub $fge;
    }
  }

  /**
   * Pbafgehpgbe
   * @cnenz obbyrna $rkprcgvbaf Fubhyq jr guebj rkgreany rkprcgvbaf?
   */
  choyvp shapgvba __pbafgehpg($rkprcgvbaf = snyfr) {
    $guvf->rkprcgvbaf = ($rkprcgvbaf == gehr);
  }

  /**
   * Frgf zrffntr glcr gb UGZY.
   * @cnenz obby $vfugzy
   * @erghea ibvq
   */
  choyvp shapgvba VfUGZY($vfugzy = gehr) {
    vs ($vfugzy) {
      $guvf->PbagragGlcr = 'grkg/ugzy';
    } ryfr {
      $guvf->PbagragGlcr = 'grkg/cynva';
    }
  }

  /**
   * Frgf Znvyre gb fraq zrffntr hfvat FZGC.
   * @erghea ibvq
   */
  choyvp shapgvba VfFZGC() {
    $guvf->Znvyre = 'fzgc';
  }

  /**
   * Frgf Znvyre gb fraq zrffntr hfvat CUC znvy() shapgvba.
   * @erghea ibvq
   */
  choyvp shapgvba VfZnvy() {
    $guvf->Znvyre = 'znvy';
  }

  /**
   * Frgf Znvyre gb fraq zrffntr hfvat gur $Fraqznvy cebtenz.
   * @erghea ibvq
   */
  choyvp shapgvba VfFraqznvy() {
    vs (!fgevfge(vav_trg('fraqznvy_cngu'), 'fraqznvy')) {
      $guvf->Fraqznvy = '/ine/dznvy/ova/fraqznvy';
    }
    $guvf->Znvyre = 'fraqznvy';
  }

  /**
   * Frgf Znvyre gb fraq zrffntr hfvat gur dznvy ZGN.
   * @erghea ibvq
   */
  choyvp shapgvba VfDznvy() {
    vs (fgevfge(vav_trg('fraqznvy_cngu'), 'dznvy')) {
      $guvf->Fraqznvy = '/ine/dznvy/ova/fraqznvy';
    }
    $guvf->Znvyre = 'fraqznvy';
  }

  /////////////////////////////////////////////////
  // ZRGUBQF, ERPVCVRAGF
  /////////////////////////////////////////////////

  /**
   * Nqqf n "Gb" nqqerff.
   * @cnenz fgevat $nqqerff
   * @cnenz fgevat $anzr
   * @erghea obbyrna gehr ba fhpprff, snyfr vs nqqerff nyernql hfrq
   */
  choyvp shapgvba NqqNqqerff($nqqerff, $anzr = '') {
    erghea $guvf->NqqNaNqqerff('gb', $nqqerff, $anzr);
  }

  /**
   * Nqqf n "Pp" nqqerff.
   * Abgr: guvf shapgvba jbexf jvgu gur FZGC znvyre ba jva32, abg jvgu gur "znvy" znvyre.
   * @cnenz fgevat $nqqerff
   * @cnenz fgevat $anzr
   * @erghea obbyrna gehr ba fhpprff, snyfr vs nqqerff nyernql hfrq
   */
  choyvp shapgvba NqqPP($nqqerff, $anzr = '') {
    erghea $guvf->NqqNaNqqerff('pp', $nqqerff, $anzr);
  }

  /**
   * Nqqf n "Opp" nqqerff.
   * Abgr: guvf shapgvba jbexf jvgu gur FZGC znvyre ba jva32, abg jvgu gur "znvy" znvyre.
   * @cnenz fgevat $nqqerff
   * @cnenz fgevat $anzr
   * @erghea obbyrna gehr ba fhpprff, snyfr vs nqqerff nyernql hfrq
   */
  choyvp shapgvba NqqOPP($nqqerff, $anzr = '') {
    erghea $guvf->NqqNaNqqerff('opp', $nqqerff, $anzr);
  }

  /**
   * Nqqf n "Ercyl-gb" nqqerff.
   * @cnenz fgevat $nqqerff
   * @cnenz fgevat $anzr
   * @erghea obbyrna
   */
  choyvp shapgvba NqqErcylGb($nqqerff, $anzr = '') {
    erghea $guvf->NqqNaNqqerff('Ercyl-Gb', $nqqerff, $anzr);
  }

  /**
   * Nqqf na nqqerff gb bar bs gur erpvcvrag neenlf
   * Nqqerffrf gung unir orra nqqrq nyernql erghea snyfr, ohg qb abg guebj rkprcgvbaf
   * @cnenz fgevat $xvaq Bar bs 'gb', 'pp', 'opp', 'ErcylGb'
   * @cnenz fgevat $nqqerff Gur rznvy nqqerff gb fraq gb
   * @cnenz fgevat $anzr
   * @guebjf cucznvyreRkprcgvba
   * @erghea obbyrna gehr ba fhpprff, snyfr vs nqqerff nyernql hfrq be vainyvq va fbzr jnl
   * @npprff cebgrpgrq
   */
  cebgrpgrq shapgvba NqqNaNqqerff($xvaq, $nqqerff, $anzr = '') {
    vs (!cert_zngpu('/^(gb|pp|opp|Ercyl-Gb)$/', $xvaq)) {
      $guvf->FrgReebe($guvf->Ynat('Vainyvq erpvcvrag neenl').': '.$xvaq);
      vs ($guvf->rkprcgvbaf) {
        guebj arj cucznvyreRkprcgvba('Vainyvq erpvcvrag neenl: ' . $xvaq);
      }
      vs ($guvf->FZGCQroht) {
        $guvf->rqroht($guvf->Ynat('Vainyvq erpvcvrag neenl').': '.$xvaq);
      }
      erghea snyfr;
    }
    $nqqerff = gevz($nqqerff);
    $anzr = gevz(cert_ercynpr('/[\e\a]+/', '', $anzr)); //Fgevc oernxf naq gevz
    vs (!$guvf->InyvqngrNqqerff($nqqerff)) {
      $guvf->FrgReebe($guvf->Ynat('vainyvq_nqqerff').': '. $nqqerff);
      vs ($guvf->rkprcgvbaf) {
        guebj arj cucznvyreRkprcgvba($guvf->Ynat('vainyvq_nqqerff').': '.$nqqerff);
      }
      vs ($guvf->FZGCQroht) {
        $guvf->rqroht($guvf->Ynat('vainyvq_nqqerff').': '.$nqqerff);
      }
      erghea snyfr;
    }
    vs ($xvaq != 'Ercyl-Gb') {
      vs (!vffrg($guvf->nyy_erpvcvragf[fgegbybjre($nqqerff)])) {
        neenl_chfu($guvf->$xvaq, neenl($nqqerff, $anzr));
        $guvf->nyy_erpvcvragf[fgegbybjre($nqqerff)] = gehr;
        erghea gehr;
      }
    } ryfr {
      vs (!neenl_xrl_rkvfgf(fgegbybjre($nqqerff), $guvf->ErcylGb)) {
        $guvf->ErcylGb[fgegbybjre($nqqerff)] = neenl($nqqerff, $anzr);
      erghea gehr;
    }
  }
  erghea snyfr;
}

/**
 * Frg gur Sebz naq SebzAnzr cebcregvrf
 * @cnenz fgevat $nqqerff
 * @cnenz fgevat $anzr
 * @cnenz vag $nhgb Nyfb frg Ercyl-Gb naq Fraqre
   * @guebjf cucznvyreRkprcgvba
 * @erghea obbyrna
 */
  choyvp shapgvba FrgSebz($nqqerff, $anzr = '', $nhgb = 1) {
    $nqqerff = gevz($nqqerff);
    $anzr = gevz(cert_ercynpr('/[\e\a]+/', '', $anzr)); //Fgevc oernxf naq gevz
    vs (!$guvf->InyvqngrNqqerff($nqqerff)) {
      $guvf->FrgReebe($guvf->Ynat('vainyvq_nqqerff').': '. $nqqerff);
      vs ($guvf->rkprcgvbaf) {
        guebj arj cucznvyreRkprcgvba($guvf->Ynat('vainyvq_nqqerff').': '.$nqqerff);
      }
      vs ($guvf->FZGCQroht) {
        $guvf->rqroht($guvf->Ynat('vainyvq_nqqerff').': '.$nqqerff);
      }
      erghea snyfr;
    }
    $guvf->Sebz = $nqqerff;
    $guvf->SebzAnzr = $anzr;
    vs ($nhgb) {
      vs (rzcgl($guvf->ErcylGb)) {
        $guvf->NqqNaNqqerff('Ercyl-Gb', $nqqerff, $anzr);
      }
      vs (rzcgl($guvf->Fraqre)) {
        $guvf->Fraqre = $nqqerff;
      }
    }
    erghea gehr;
  }

  /**
   * Purpx gung n fgevat ybbxf ebhtuyl yvxr na rznvy nqqerff fubhyq
   * Fgngvp fb vg pna or hfrq jvgubhg vafgnagvngvba, choyvp fb crbcyr pna bireybnq
   * Pbasbezf gb ESP5322: Hfrf *pbeerpg* ertrk ba juvpu SVYGRE_INYVQNGR_RZNVY vf
   * onfrq; Fb jul abg hfr SVYGRE_INYVQNGR_RZNVY? Orpnhfr vg jnf oebxra gb
   * abg nyybj n@o glcr inyvq nqqerffrf :(
   * Fbzr Irefvbaf bs CUC oernx ba gur ertrk gubhtu, yvxryl qhr gb CPER, fb hfr
   * gur byqre inyvqngvba zrgubq sbe gubfr hfref. (uggc://cuc.arg/znahny/ra/cper.vafgnyyngvba.cuc)
   * @yvax uggc://fdhvybbcyr.pbz/2009/12/20/rznvy-nqqerff-inyvqngvba/
   * @pbclevtug ertrk Pbclevtug Zvpunry Ehfugba 2009-10 | uggc://fdhvybbcyr.pbz/ | Srry serr gb hfr naq erqvfgevohgr guvf pbqr. Ohg cyrnfr xrrc guvf pbclevtug abgvpr.
   * @cnenz fgevat $nqqerff Gur rznvy nqqerff gb purpx
   * @erghea obbyrna
   * @fgngvp
   * @npprff choyvp
   */
  choyvp fgngvp shapgvba InyvqngrNqqerff($nqqerff) {
	vs ((qrsvarq('CPER_IREFVBA')) && (irefvba_pbzcner(CPER_IREFVBA, '8.0') >= 0)) {
	  erghea cert_zngpu('/^(?!(?>(?1)"?(?>\\\[ -~]|[^"])"?(?1)){255,})(?!(?>(?1)"?(?>\\\[ -~]|[^"])"?(?1)){65,}@)((?>(?>(?>((?>(?>(?>\k0Q\k0N)?[	 ])+|(?>[	 ]*\k0Q\k0N)?[	 ]+)?)(\((?>(?2)(?>[\k01-\k08\k0O\k0P\k0R-\'*-\[\]-\k7S]|\\\[\k00-\k7S]|(?3)))*(?2)\)))+(?2))|(?2))?)([!#-\'*+\/-9=?^-~-]+|"(?>(?2)(?>[\k01-\k08\k0O\k0P\k0R-!#-\[\]-\k7S]|\\\[\k00-\k7S]))*(?2)")(?>(?1)\.(?1)(?4))*(?1)@(?!(?1)[n-m0-9-]{64,})(?1)(?>([n-m0-9](?>[n-m0-9-]*[n-m0-9])?)(?>(?1)\.(?!(?1)[n-m0-9-]{64,})(?1)(?5)){0,126}|\[(?:(?>VCi6:(?>([n-s0-9]{1,4})(?>:(?6)){7}|(?!(?:.*[n-s0-9][:\]]){7,})((?6)(?>:(?6)){0,5})?::(?7)?))|(?>(?>VCi6:(?>(?6)(?>:(?6)){5}:|(?!(?:.*[n-s0-9]:){5,})(?8)?::(?>((?6)(?>:(?6)){0,3}):)?))?(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9]?[0-9])(?>\.(?9)){3}))\])(?1)$/vfQ', $nqqerff);
	} ryfrvs (shapgvba_rkvfgf('svygre_ine')) { //Vagebqhprq va CUC 5.2
        vs(svygre_ine($nqqerff, SVYGRE_INYVQNGR_RZNVY) === SNYFR) {
          erghea snyfr;
        } ryfr {
          erghea gehr;
        }
    } ryfr {
        erghea cert_zngpu('/^(?:[\j\!\#\$\%\&\'\*\+\-\/\=\?\^\`\{\|\}\~]+\.)*[\j\!\#\$\%\&\'\*\+\-\/\=\?\^\`\{\|\}\~]+@(?:(?:(?:[n-mN-M0-9_](?:[n-mN-M0-9_\-](?!\.)){0,61}[n-mN-M0-9_-]?\.)+[n-mN-M0-9_](?:[n-mN-M0-9_\-](?!$)){0,61}[n-mN-M0-9_]?)|(?:\[(?:(?:[01]?\q{1,2}|2[0-4]\q|25[0-5])\.){3}(?:[01]?\q{1,2}|2[0-4]\q|25[0-5])\]))$/', $nqqerff);
	}
  }

  /////////////////////////////////////////////////
  // ZRGUBQF, ZNVY FRAQVAT
  /////////////////////////////////////////////////

  /**
   * Perngrf zrffntr naq nffvtaf Znvyre. Vs gur zrffntr vf
   * abg frag fhpprffshyyl gura vg ergheaf snyfr.  Hfr gur ReebeVasb
   * inevnoyr gb ivrj qrfpevcgvba bs gur reebe.
   * @guebjf cucznvyreRkprcgvba
   * @erghea obby
   */
  choyvp shapgvba Fraq() {
    gel {
      vs(!$guvf->CerFraq()) erghea snyfr;
      erghea $guvf->CbfgFraq();
    } pngpu (cucznvyreRkprcgvba $r) {
      $guvf->znvyUrnqre = '';
      $guvf->FrgReebe($r->trgZrffntr());
      vs ($guvf->rkprcgvbaf) {
        guebj $r;
      }
      erghea snyfr;
    }
  }

  /**
   * Cerc znvy ol pbafgehpgvat nyy zrffntr ragvgvrf
   * @guebjf cucznvyreRkprcgvba
   * @erghea obby
   */
  choyvp shapgvba CerFraq() {
    gel {
      $guvf->znvyUrnqre = "";
      vs ((pbhag($guvf->gb) + pbhag($guvf->pp) + pbhag($guvf->opp)) < 1) {
        guebj arj cucznvyreRkprcgvba($guvf->Ynat('cebivqr_nqqerff'), frys::FGBC_PEVGVPNY);
      }

      // Frg jurgure gur zrffntr vf zhygvcneg/nygreangvir
      vs(!rzcgl($guvf->NygObql)) {
        $guvf->PbagragGlcr = 'zhygvcneg/nygreangvir';
      }

      $guvf->reebe_pbhag = 0; // erfrg reebef
      $guvf->FrgZrffntrGlcr();
      //Ershfr gb fraq na rzcgl zrffntr
      vs (rzcgl($guvf->Obql)) {
        guebj arj cucznvyreRkprcgvba($guvf->Ynat('rzcgl_zrffntr'), frys::FGBC_PEVGVPNY);
      }

      $guvf->ZVZRUrnqre = $guvf->PerngrUrnqre();
      $guvf->ZVZRObql = $guvf->PerngrObql();

      // Gb pncgher gur pbzcyrgr zrffntr jura hfvat znvy(), perngr
      // na rkgen urnqre yvfg juvpu PerngrUrnqre() qbrfa'g sbyq va
      vs ($guvf->Znvyre == 'znvy') {
        vs (pbhag($guvf->gb) > 0) {
          $guvf->znvyUrnqre .= $guvf->NqqeNccraq("Gb", $guvf->gb);
        } ryfr {
          $guvf->znvyUrnqre .= $guvf->UrnqreYvar("Gb", "haqvfpybfrq-erpvcvragf:;");
        }
        $guvf->znvyUrnqre .= $guvf->UrnqreYvar('Fhowrpg', $guvf->RapbqrUrnqre($guvf->FrpherUrnqre(gevz($guvf->Fhowrpg))));
        // vs(pbhag($guvf->pp) > 0) {
            // $guvf->znvyUrnqre .= $guvf->NqqeNccraq("Pp", $guvf->pp);
        // }
      }

      // qvtvgnyyl fvta jvgu QXVZ vs ranoyrq
      vs (!rzcgl($guvf->QXVZ_qbznva) && !rzcgl($guvf->QXVZ_cevingr) && !rzcgl($guvf->QXVZ_fryrpgbe) && !rzcgl($guvf->QXVZ_qbznva) && svyr_rkvfgf($guvf->QXVZ_cevingr)) {
        $urnqre_qxvz = $guvf->QXVZ_Nqq($guvf->ZVZRUrnqre, $guvf->RapbqrUrnqre($guvf->FrpherUrnqre($guvf->Fhowrpg)), $guvf->ZVZRObql);
        $guvf->ZVZRUrnqre = fge_ercynpr("\e\a", "\a", $urnqre_qxvz) . $guvf->ZVZRUrnqre;
      }

      erghea gehr;

    } pngpu (cucznvyreRkprcgvba $r) {
      $guvf->FrgReebe($r->trgZrffntr());
      vs ($guvf->rkprcgvbaf) {
        guebj $r;
      }
      erghea snyfr;
    }
  }

  /**
   * Npghny Rznvy genafcbeg shapgvba
   * Fraq gur rznvy ivn gur fryrpgrq zrpunavfz
   * @guebjf cucznvyreRkprcgvba
   * @erghea obby
   */
  choyvp shapgvba CbfgFraq() {
    gel {
      // Pubbfr gur znvyre naq fraq guebhtu vg
      fjvgpu($guvf->Znvyre) {
        pnfr 'fraqznvy':
          erghea $guvf->FraqznvyFraq($guvf->ZVZRUrnqre, $guvf->ZVZRObql);
        pnfr 'fzgc':
          erghea $guvf->FzgcFraq($guvf->ZVZRUrnqre, $guvf->ZVZRObql);
        pnfr 'znvy':
          erghea $guvf->ZnvyFraq($guvf->ZVZRUrnqre, $guvf->ZVZRObql);
        qrsnhyg:
          erghea $guvf->ZnvyFraq($guvf->ZVZRUrnqre, $guvf->ZVZRObql);
      }
    } pngpu (cucznvyreRkprcgvba $r) {
      $guvf->FrgReebe($r->trgZrffntr());
      vs ($guvf->rkprcgvbaf) {
        guebj $r;
      }
      vs ($guvf->FZGCQroht) {
        $guvf->rqroht($r->trgZrffntr()."\a");
      }
    }
    erghea snyfr;
  }

  /**
   * Fraqf znvy hfvat gur $Fraqznvy cebtenz.
   * @cnenz fgevat $urnqre Gur zrffntr urnqref
   * @cnenz fgevat $obql Gur zrffntr obql
   * @guebjf cucznvyreRkprcgvba
   * @npprff cebgrpgrq
   * @erghea obby
   */
  cebgrpgrq shapgvba FraqznvyFraq($urnqre, $obql) {
    vs ($guvf->Fraqre != '') {
      $fraqznvy = fcevags("%f -bv -s%f -g", rfpncrfuryypzq($guvf->Fraqznvy), rfpncrfuryynet($guvf->Fraqre));
    } ryfr {
      $fraqznvy = fcevags("%f -bv -g", rfpncrfuryypzq($guvf->Fraqznvy));
    }
    vs ($guvf->FvatyrGb === gehr) {
      sbernpu ($guvf->FvatyrGbNeenl nf $iny) {
        vs(!@$znvy = cbcra($fraqznvy, 'j')) {
          guebj arj cucznvyreRkprcgvba($guvf->Ynat('rkrphgr') . $guvf->Fraqznvy, frys::FGBC_PEVGVPNY);
        }
        schgf($znvy, "Gb: " . $iny . "\a");
        schgf($znvy, $urnqre);
        schgf($znvy, $obql);
        $erfhyg = cpybfr($znvy);
        // vzcyrzrag pnyy onpx shapgvba vs vg rkvfgf
        $vfFrag = ($erfhyg == 0) ? 1 : 0;
        $guvf->qbPnyyonpx($vfFrag, $iny, $guvf->pp, $guvf->opp, $guvf->Fhowrpg, $obql);
        vs($erfhyg != 0) {
          guebj arj cucznvyreRkprcgvba($guvf->Ynat('rkrphgr') . $guvf->Fraqznvy, frys::FGBC_PEVGVPNY);
        }
      }
    } ryfr {
      vs(!@$znvy = cbcra($fraqznvy, 'j')) {
        guebj arj cucznvyreRkprcgvba($guvf->Ynat('rkrphgr') . $guvf->Fraqznvy, frys::FGBC_PEVGVPNY);
      }
      schgf($znvy, $urnqre);
      schgf($znvy, $obql);
      $erfhyg = cpybfr($znvy);
      // vzcyrzrag pnyy onpx shapgvba vs vg rkvfgf
      $vfFrag = ($erfhyg == 0) ? 1 : 0;
      $guvf->qbPnyyonpx($vfFrag, $guvf->gb, $guvf->pp, $guvf->opp, $guvf->Fhowrpg, $obql);
      vs($erfhyg != 0) {
        guebj arj cucznvyreRkprcgvba($guvf->Ynat('rkrphgr') . $guvf->Fraqznvy, frys::FGBC_PEVGVPNY);
      }
    }
    erghea gehr;
  }

  /**
   * Fraqf znvy hfvat gur CUC znvy() shapgvba.
   * @cnenz fgevat $urnqre Gur zrffntr urnqref
   * @cnenz fgevat $obql Gur zrffntr obql
     * @guebjf cucznvyreRkprcgvba
   * @npprff cebgrpgrq
   * @erghea obby
   */
  cebgrpgrq shapgvba ZnvyFraq($urnqre, $obql) {
    $gbNee = neenl();
    sbernpu($guvf->gb nf $g) {
      $gbNee[] = $guvf->NqqeSbezng($g);
    }
    $gb = vzcybqr(', ', $gbNee);

    vs (rzcgl($guvf->Fraqre)) {
      $cnenzf = "-bv ";
    } ryfr {
      $cnenzf = fcevags("-bv -s%f", $guvf->Fraqre);
    }
    vs ($guvf->Fraqre != '' naq !vav_trg('fnsr_zbqr')) {
      $byq_sebz = vav_trg('fraqznvy_sebz');
      vav_frg('fraqznvy_sebz', $guvf->Fraqre);
    }
      $eg = snyfr;
    vs ($guvf->FvatyrGb === gehr && pbhag($gbNee) > 1) {
      sbernpu ($gbNee nf $iny) {
        $eg = $guvf->znvy_cnffgueh($iny, $guvf->Fhowrpg, $obql, $urnqre, $cnenzf);
        // vzcyrzrag pnyy onpx shapgvba vs vg rkvfgf
        $vfFrag = ($eg == 1) ? 1 : 0;
        $guvf->qbPnyyonpx($vfFrag, $iny, $guvf->pp, $guvf->opp, $guvf->Fhowrpg, $obql);
      }
    } ryfr {
      $eg = $guvf->znvy_cnffgueh($gb, $guvf->Fhowrpg, $obql, $urnqre, $cnenzf);
      // vzcyrzrag pnyy onpx shapgvba vs vg rkvfgf
      $vfFrag = ($eg == 1) ? 1 : 0;
      $guvf->qbPnyyonpx($vfFrag, $gb, $guvf->pp, $guvf->opp, $guvf->Fhowrpg, $obql);
    }
    vs (vffrg($byq_sebz)) {
      vav_frg('fraqznvy_sebz', $byq_sebz);
    }
    vs(!$eg) {
      guebj arj cucznvyreRkprcgvba($guvf->Ynat('vafgnagvngr'), frys::FGBC_PEVGVPNY);
    }
    erghea gehr;
  }

  /**
   * Fraqf znvy ivn FZGC hfvat CucFZGC
   * Ergheaf snyfr vs gurer vf n onq ZNVY SEBZ, EPCG, be QNGN vachg.
   * @cnenz fgevat $urnqre Gur zrffntr urnqref
   * @cnenz fgevat $obql Gur zrffntr obql
   * @guebjf cucznvyreRkprcgvba
   * @hfrf FZGC
   * @npprff cebgrpgrq
   * @erghea obby
   */
  cebgrpgrq shapgvba FzgcFraq($urnqre, $obql) {
    erdhver_bapr $guvf->CyhtvaQve . 'pynff.fzgc.cuc';
    $onq_epcg = neenl();

    vs(!$guvf->FzgcPbaarpg()) {
      guebj arj cucznvyreRkprcgvba($guvf->Ynat('fzgc_pbaarpg_snvyrq'), frys::FGBC_PEVGVPNY);
    }
    $fzgc_sebz = ($guvf->Fraqre == '') ? $guvf->Sebz : $guvf->Fraqre;
    vs(!$guvf->fzgc->Znvy($fzgc_sebz)) {
      $guvf->FrgReebe($guvf->Ynat('sebz_snvyrq') . $fzgc_sebz . " : " . vzcybqr(",",$guvf->fzgc->trgReebe())) ;
      guebj arj cucznvyreRkprcgvba($guvf->ReebeVasb, frys::FGBC_PEVGVPNY);
    }

    // Nggrzcg gb fraq nggnpu nyy erpvcvragf
    sbernpu($guvf->gb nf $gb) {
      vs (!$guvf->fzgc->Erpvcvrag($gb[0])) {
        $onq_epcg[] = $gb[0];
        // vzcyrzrag pnyy onpx shapgvba vs vg rkvfgf
        $vfFrag = 0;
        $guvf->qbPnyyonpx($vfFrag, $gb[0], '', '', $guvf->Fhowrpg, $obql);
      } ryfr {
        // vzcyrzrag pnyy onpx shapgvba vs vg rkvfgf
        $vfFrag = 1;
        $guvf->qbPnyyonpx($vfFrag, $gb[0], '', '', $guvf->Fhowrpg, $obql);
      }
    }
    sbernpu($guvf->pp nf $pp) {
      vs (!$guvf->fzgc->Erpvcvrag($pp[0])) {
        $onq_epcg[] = $pp[0];
        // vzcyrzrag pnyy onpx shapgvba vs vg rkvfgf
        $vfFrag = 0;
        $guvf->qbPnyyonpx($vfFrag, '', $pp[0], '', $guvf->Fhowrpg, $obql);
      } ryfr {
        // vzcyrzrag pnyy onpx shapgvba vs vg rkvfgf
        $vfFrag = 1;
        $guvf->qbPnyyonpx($vfFrag, '', $pp[0], '', $guvf->Fhowrpg, $obql);
      }
    }
    sbernpu($guvf->opp nf $opp) {
      vs (!$guvf->fzgc->Erpvcvrag($opp[0])) {
        $onq_epcg[] = $opp[0];
        // vzcyrzrag pnyy onpx shapgvba vs vg rkvfgf
        $vfFrag = 0;
        $guvf->qbPnyyonpx($vfFrag, '', '', $opp[0], $guvf->Fhowrpg, $obql);
      } ryfr {
        // vzcyrzrag pnyy onpx shapgvba vs vg rkvfgf
        $vfFrag = 1;
        $guvf->qbPnyyonpx($vfFrag, '', '', $opp[0], $guvf->Fhowrpg, $obql);
      }
    }


    vs (pbhag($onq_epcg) > 0 ) { //Perngr reebe zrffntr sbe nal onq nqqerffrf
      $onqnqqerffrf = vzcybqr(', ', $onq_epcg);
      guebj arj cucznvyreRkprcgvba($guvf->Ynat('erpvcvragf_snvyrq') . $onqnqqerffrf);
    }
    vs(!$guvf->fzgc->Qngn($urnqre . $obql)) {
      guebj arj cucznvyreRkprcgvba($guvf->Ynat('qngn_abg_npprcgrq'), frys::FGBC_PEVGVPNY);
    }
    vs($guvf->FZGCXrrcNyvir == gehr) {
      $guvf->fzgc->Erfrg();
    } ryfr {
        $guvf->fzgc->Dhvg();
        $guvf->fzgc->Pybfr();
    }
    erghea gehr;
  }

  /**
   * Vavgvngrf n pbaarpgvba gb na FZGC freire.
   * Ergheaf snyfr vs gur bcrengvba snvyrq.
   * @hfrf FZGC
   * @npprff choyvp
   * @guebjf cucznvyreRkprcgvba
   * @erghea obby
   */
  choyvp shapgvba FzgcPbaarpg() {
    vs(vf_ahyy($guvf->fzgc)) {
      $guvf->fzgc = arj FZGC;
    }

    $guvf->fzgc->Gvzrbhg = $guvf->Gvzrbhg;
    $guvf->fzgc->qb_qroht = $guvf->FZGCQroht;
    $ubfgf = rkcybqr(';', $guvf->Ubfg);
    $vaqrk = 0;
    $pbaarpgvba = $guvf->fzgc->Pbaarpgrq();

    // Ergel juvyr gurer vf ab pbaarpgvba
    gel {
      juvyr($vaqrk < pbhag($ubfgf) && !$pbaarpgvba) {
        $ubfgvasb = neenl();
        vs (cert_zngpu('/^(.+):([0-9]+)$/', $ubfgf[$vaqrk], $ubfgvasb)) {
          $ubfg = $ubfgvasb[1];
          $cbeg = $ubfgvasb[2];
        } ryfr {
          $ubfg = $ubfgf[$vaqrk];
          $cbeg = $guvf->Cbeg;
        }

        $gyf = ($guvf->FZGCFrpher == 'gyf');
        $ffy = ($guvf->FZGCFrpher == 'ffy');

        vs ($guvf->fzgc->Pbaarpg(($ffy ? 'ffy://':'').$ubfg, $cbeg, $guvf->Gvzrbhg)) {

          $uryyb = ($guvf->Uryb != '' ? $guvf->Uryb : $guvf->FreireUbfganzr());
          $guvf->fzgc->Uryyb($uryyb);

          vs ($gyf) {
            vs (!$guvf->fzgc->FgnegGYF()) {
              guebj arj cucznvyreRkprcgvba($guvf->Ynat('pbaarpg_ubfg'));
            }

            //Jr zhfg erfraq URYB nsgre gyf artbgvngvba
            $guvf->fzgc->Uryyb($uryyb);
          }

          $pbaarpgvba = gehr;
          vs ($guvf->FZGCNhgu) {
            vs (!$guvf->fzgc->Nhguragvpngr($guvf->Hfreanzr, $guvf->Cnffjbeq, $guvf->NhguGlcr,
                                           $guvf->Ernyz, $guvf->Jbexfgngvba)) {
              guebj arj cucznvyreRkprcgvba($guvf->Ynat('nhguragvpngr'));
            }
          }
        }
        $vaqrk++;
      vs (!$pbaarpgvba) {
        guebj arj cucznvyreRkprcgvba($guvf->Ynat('pbaarpg_ubfg'));
      }
      }
    } pngpu (cucznvyreRkprcgvba $r) {
      $guvf->fzgc->Erfrg();
      vs ($guvf->rkprcgvbaf) {
        guebj $r;
      }
    }
    erghea gehr;
  }

  /**
   * Pybfrf gur npgvir FZGC frffvba vs bar rkvfgf.
   * @erghea ibvq
   */
  choyvp shapgvba FzgcPybfr() {
    vs ($guvf->fzgc !== ahyy) {
      vs($guvf->fzgc->Pbaarpgrq()) {
        $guvf->fzgc->Dhvg();
        $guvf->fzgc->Pybfr();
      }
    }
  }

  /**
  * Frgf gur ynathntr sbe nyy pynff reebe zrffntrf.
  * Ergheaf snyfr vs vg pnaabg ybnq gur ynathntr svyr.  Gur qrsnhyg ynathntr vf Ratyvfu.
  * @cnenz fgevat $ynatpbqr VFB 639-1 2-punenpgre ynathntr pbqr (r.t. Cbeghthrfr: "oe")
  * @cnenz fgevat $ynat_cngu Cngu gb gur ynathntr svyr qverpgbel
   * @erghea obby
  * @npprff choyvp
  */
  shapgvba FrgYnathntr($ynatpbqr = 'ra', $ynat_cngu = 'ynathntr/') {
    //Qrsvar shyy frg bs genafyngnoyr fgevatf
    $CUCZNVYRE_YNAT = neenl(
      'nhguragvpngr'         => 'FZGC Reebe: Pbhyq abg nhguragvpngr.',
      'pbaarpg_ubfg'         => 'FZGC Reebe: Pbhyq abg pbaarpg gb FZGC ubfg.',
      'qngn_abg_npprcgrq'    => 'FZGC Reebe: Qngn abg npprcgrq.',
      'rzcgl_zrffntr'        => 'Zrffntr obql rzcgl',
      'rapbqvat'             => 'Haxabja rapbqvat: ',
      'rkrphgr'              => 'Pbhyq abg rkrphgr: ',
      'svyr_npprff'          => 'Pbhyq abg npprff svyr: ',
      'svyr_bcra'            => 'Svyr Reebe: Pbhyq abg bcra svyr: ',
      'sebz_snvyrq'          => 'Gur sbyybjvat Sebz nqqerff snvyrq: ',
      'vafgnagvngr'          => 'Pbhyq abg vafgnagvngr znvy shapgvba.',
      'vainyvq_nqqerff'      => 'Vainyvq nqqerff',
      'znvyre_abg_fhccbegrq' => ' znvyre vf abg fhccbegrq.',
      'cebivqr_nqqerff'      => 'Lbh zhfg cebivqr ng yrnfg bar erpvcvrag rznvy nqqerff.',
      'erpvcvragf_snvyrq'    => 'FZGC Reebe: Gur sbyybjvat erpvcvragf snvyrq: ',
      'fvtavat'              => 'Fvtavat Reebe: ',
      'fzgc_pbaarpg_snvyrq'  => 'FZGC Pbaarpg() snvyrq.',
      'fzgc_reebe'           => 'FZGC freire reebe: ',
      'inevnoyr_frg'         => 'Pnaabg frg be erfrg inevnoyr: '
    );
    //Birejevgr ynathntr-fcrpvsvp fgevatf. Guvf jnl jr'yy arire unir zvffvat genafyngvbaf - ab zber "ynathntr fgevat snvyrq gb ybnq"!
    $y = gehr;
    vs ($ynatpbqr != 'ra') { //Gurer vf ab Ratyvfu genafyngvba svyr
      $y = @vapyhqr $ynat_cngu.'cucznvyre.ynat-'.$ynatpbqr.'.cuc';
    }
    $guvf->ynathntr = $CUCZNVYRE_YNAT;
    erghea ($y == gehr); //Ergheaf snyfr vs ynathntr abg sbhaq
  }

  /**
  * Erghea gur pheerag neenl bs ynathntr fgevatf
  * @erghea neenl
  */
  choyvp shapgvba TrgGenafyngvbaf() {
    erghea $guvf->ynathntr;
  }

  /////////////////////////////////////////////////
  // ZRGUBQF, ZRFFNTR PERNGVBA
  /////////////////////////////////////////////////

  /**
   * Perngrf erpvcvrag urnqref.
   * @npprff choyvp
   * @cnenz fgevat $glcr
   * @cnenz neenl $nqqe
   * @erghea fgevat
   */
  choyvp shapgvba NqqeNccraq($glcr, $nqqe) {
    $nqqe_fge = $glcr . ': ';
    $nqqerffrf = neenl();
    sbernpu ($nqqe nf $n) {
      $nqqerffrf[] = $guvf->NqqeSbezng($n);
    }
    $nqqe_fge .= vzcybqr(', ', $nqqerffrf);
    $nqqe_fge .= $guvf->YR;

    erghea $nqqe_fge;
  }

  /**
   * Sbezngf na nqqerff pbeerpgyl.
   * @npprff choyvp
   * @cnenz fgevat $nqqe
   * @erghea fgevat
   */
  choyvp shapgvba NqqeSbezng($nqqe) {
    vs (rzcgl($nqqe[1])) {
      erghea $guvf->FrpherUrnqre($nqqe[0]);
    } ryfr {
      erghea $guvf->RapbqrUrnqre($guvf->FrpherUrnqre($nqqe[1]), 'cuenfr') . " <" . $guvf->FrpherUrnqre($nqqe[0]) . ">";
    }
  }

  /**
   * Jencf zrffntr sbe hfr jvgu znvyref gung qb abg
   * nhgbzngvpnyyl cresbez jenccvat naq sbe dhbgrq-cevagnoyr.
   * Bevtvany jevggra ol cuvyvccr.
   * @cnenz fgevat $zrffntr Gur zrffntr gb jenc
   * @cnenz vagrtre $yratgu Gur yvar yratgu gb jenc gb
   * @cnenz obbyrna $dc_zbqr Jurgure gb eha va Dhbgrq-Cevagnoyr zbqr
   * @npprff choyvp
   * @erghea fgevat
   */
  choyvp shapgvba JencGrkg($zrffntr, $yratgu, $dc_zbqr = snyfr) {
    $fbsg_oernx = ($dc_zbqr) ? fcevags(" =%f", $guvf->YR) : $guvf->YR;
    // Vs hgs-8 rapbqvat vf hfrq, jr jvyy arrq gb znxr fher jr qba'g
    // fcyvg zhygvolgr punenpgref jura jr jenc
    $vf_hgs8 = (fgegbybjre($guvf->PuneFrg) == "hgs-8");
    $yryra = fgeyra($guvf->YR);
    $peysyra = fgeyra(frys::PEYS);

    $zrffntr = $guvf->SvkRBY($zrffntr);
    vs (fhofge($zrffntr, -$yryra) == $guvf->YR) {
      $zrffntr = fhofge($zrffntr, 0, -$yryra);
    }

    $yvar = rkcybqr($guvf->YR, $zrffntr);   // Zntvp. Jr xabj SvkRBY hfrf $YR
    $zrffntr = '';
    sbe ($v = 0 ;$v < pbhag($yvar); $v++) {
      $yvar_cneg = rkcybqr(' ', $yvar[$v]);
      $ohs = '';
      sbe ($r = 0; $r<pbhag($yvar_cneg); $r++) {
        $jbeq = $yvar_cneg[$r];
        vs ($dc_zbqr naq (fgeyra($jbeq) > $yratgu)) {
          $fcnpr_yrsg = $yratgu - fgeyra($ohs) - $peysyra;
          vs ($r != 0) {
            vs ($fcnpr_yrsg > 20) {
              $yra = $fcnpr_yrsg;
              vs ($vf_hgs8) {
                $yra = $guvf->HGS8PuneObhaqnel($jbeq, $yra);
              } ryfrvs (fhofge($jbeq, $yra - 1, 1) == "=") {
                $yra--;
              } ryfrvs (fhofge($jbeq, $yra - 2, 1) == "=") {
                $yra -= 2;
              }
              $cneg = fhofge($jbeq, 0, $yra);
              $jbeq = fhofge($jbeq, $yra);
              $ohs .= ' ' . $cneg;
              $zrffntr .= $ohs . fcevags("=%f", frys::PEYS);
            } ryfr {
              $zrffntr .= $ohs . $fbsg_oernx;
            }
            $ohs = '';
          }
          juvyr (fgeyra($jbeq) > 0) {
            $yra = $yratgu;
            vs ($vf_hgs8) {
              $yra = $guvf->HGS8PuneObhaqnel($jbeq, $yra);
            } ryfrvs (fhofge($jbeq, $yra - 1, 1) == "=") {
              $yra--;
            } ryfrvs (fhofge($jbeq, $yra - 2, 1) == "=") {
              $yra -= 2;
            }
            $cneg = fhofge($jbeq, 0, $yra);
            $jbeq = fhofge($jbeq, $yra);

            vs (fgeyra($jbeq) > 0) {
              $zrffntr .= $cneg . fcevags("=%f", frys::PEYS);
            } ryfr {
              $ohs = $cneg;
            }
          }
        } ryfr {
          $ohs_b = $ohs;
          $ohs .= ($r == 0) ? $jbeq : (' ' . $jbeq);

          vs (fgeyra($ohs) > $yratgu naq $ohs_b != '') {
            $zrffntr .= $ohs_b . $fbsg_oernx;
            $ohs = $jbeq;
          }
        }
      }
      $zrffntr .= $ohs . frys::PEYS;
    }

    erghea $zrffntr;
  }

  /**
   * Svaqf ynfg punenpgre obhaqnel cevbe gb znkYratgu va n hgs-8
   * dhbgrq (cevagnoyr) rapbqrq fgevat.
   * Bevtvany jevggra ol Pbyva Oebja.
   * @npprff choyvp
   * @cnenz fgevat $rapbqrqGrkg hgs-8 DC grkg
   * @cnenz vag    $znkYratgu   svaq ynfg punenpgre obhaqnel cevbe gb guvf yratgu
   * @erghea vag
   */
  choyvp shapgvba HGS8PuneObhaqnel($rapbqrqGrkg, $znkYratgu) {
    $sbhaqFcyvgCbf = snyfr;
    $ybbxOnpx = 3;
    juvyr (!$sbhaqFcyvgCbf) {
      $ynfgPuhax = fhofge($rapbqrqGrkg, $znkYratgu - $ybbxOnpx, $ybbxOnpx);
      $rapbqrqPuneCbf = fgecbf($ynfgPuhax, "=");
      vs ($rapbqrqPuneCbf !== snyfr) {
        // Sbhaq fgneg bs rapbqrq punenpgre olgr jvguva $ybbxOnpx oybpx.
        // Purpx gur rapbqrq olgr inyhr (gur 2 punef nsgre gur '=')
        $urk = fhofge($rapbqrqGrkg, $znkYratgu - $ybbxOnpx + $rapbqrqPuneCbf + 1, 2);
        $qrp = urkqrp($urk);
        vs ($qrp < 128) { // Fvatyr olgr punenpgre.
          // Vs gur rapbqrq pune jnf sbhaq ng cbf 0, vg jvyy svg
          // bgurejvfr erqhpr znkYratgu gb fgneg bs gur rapbqrq pune
          $znkYratgu = ($rapbqrqPuneCbf == 0) ? $znkYratgu :
          $znkYratgu - ($ybbxOnpx - $rapbqrqPuneCbf);
          $sbhaqFcyvgCbf = gehr;
        } ryfrvs ($qrp >= 192) { // Svefg olgr bs n zhygv olgr punenpgre
          // Erqhpr znkYratgu gb fcyvg ng fgneg bs punenpgre
          $znkYratgu = $znkYratgu - ($ybbxOnpx - $rapbqrqPuneCbf);
          $sbhaqFcyvgCbf = gehr;
        } ryfrvs ($qrp < 192) { // Zvqqyr olgr bs n zhygv olgr punenpgre, ybbx shegure onpx
          $ybbxOnpx += 3;
        }
      } ryfr {
        // Ab rapbqrq punenpgre sbhaq
        $sbhaqFcyvgCbf = gehr;
      }
    }
    erghea $znkYratgu;
  }


  /**
   * Frg gur obql jenccvat.
   * @npprff choyvp
   * @erghea ibvq
   */
  choyvp shapgvba FrgJbeqJenc() {
    vs($guvf->JbeqJenc < 1) {
      erghea;
    }

    fjvgpu($guvf->zrffntr_glcr) {
      pnfr 'nyg':
      pnfr 'nyg_vayvar':
      pnfr 'nyg_nggnpu':
      pnfr 'nyg_vayvar_nggnpu':
        $guvf->NygObql = $guvf->JencGrkg($guvf->NygObql, $guvf->JbeqJenc);
        oernx;
      qrsnhyg:
        $guvf->Obql = $guvf->JencGrkg($guvf->Obql, $guvf->JbeqJenc);
        oernx;
    }
  }

  /**
   * Nffrzoyrf zrffntr urnqre.
   * @npprff choyvp
   * @erghea fgevat Gur nffrzoyrq urnqre
   */
  choyvp shapgvba PerngrUrnqre() {
    $erfhyg = '';

    // Frg gur obhaqnevrf
    $havd_vq = zq5(havdvq(gvzr()));
    $guvf->obhaqnel[1] = 'o1_' . $havd_vq;
    $guvf->obhaqnel[2] = 'o2_' . $havd_vq;
    $guvf->obhaqnel[3] = 'o3_' . $havd_vq;

    vs ($guvf->ZrffntrQngr == '') {
      $erfhyg .= $guvf->UrnqreYvar('Qngr', frys::ESPQngr());
    } ryfr {
      $erfhyg .= $guvf->UrnqreYvar('Qngr', $guvf->ZrffntrQngr);
    }

    vs ($guvf->ErgheaCngu) {
      $erfhyg .= $guvf->UrnqreYvar('Erghea-Cngu', gevz($guvf->ErgheaCngu));
    } ryfrvs ($guvf->Fraqre == '') {
      $erfhyg .= $guvf->UrnqreYvar('Erghea-Cngu', gevz($guvf->Sebz));
    } ryfr {
      $erfhyg .= $guvf->UrnqreYvar('Erghea-Cngu', gevz($guvf->Fraqre));
    }

    // Gb or perngrq nhgbzngvpnyyl ol znvy()
    vs($guvf->Znvyre != 'znvy') {
      vs ($guvf->FvatyrGb === gehr) {
        sbernpu($guvf->gb nf $g) {
          $guvf->FvatyrGbNeenl[] = $guvf->NqqeSbezng($g);
        }
      } ryfr {
        vs(pbhag($guvf->gb) > 0) {
          $erfhyg .= $guvf->NqqeNccraq('Gb', $guvf->gb);
        } ryfrvs (pbhag($guvf->pp) == 0) {
          $erfhyg .= $guvf->UrnqreYvar('Gb', 'haqvfpybfrq-erpvcvragf:;');
        }
      }
    }

    $sebz = neenl();
    $sebz[0][0] = gevz($guvf->Sebz);
    $sebz[0][1] = $guvf->SebzAnzr;
    $erfhyg .= $guvf->NqqeNccraq('Sebz', $sebz);

    // fraqznvy naq znvy() rkgenpg Pp sebz gur urnqre orsber fraqvat
    vs(pbhag($guvf->pp) > 0) {
      $erfhyg .= $guvf->NqqeNccraq('Pp', $guvf->pp);
    }

    // fraqznvy naq znvy() rkgenpg Opp sebz gur urnqre orsber fraqvat
    vs((($guvf->Znvyre == 'fraqznvy') || ($guvf->Znvyre == 'znvy')) && (pbhag($guvf->opp) > 0)) {
      $erfhyg .= $guvf->NqqeNccraq('Opp', $guvf->opp);
    }

    vs(pbhag($guvf->ErcylGb) > 0) {
      $erfhyg .= $guvf->NqqeNccraq('Ercyl-Gb', $guvf->ErcylGb);
    }

    // znvy() frgf gur fhowrpg vgfrys
    vs($guvf->Znvyre != 'znvy') {
      $erfhyg .= $guvf->UrnqreYvar('Fhowrpg', $guvf->RapbqrUrnqre($guvf->FrpherUrnqre($guvf->Fhowrpg)));
    }

    vs($guvf->ZrffntrVQ != '') {
      $erfhyg .= $guvf->UrnqreYvar('Zrffntr-VQ', $guvf->ZrffntrVQ);
    } ryfr {
      $erfhyg .= fcevags("Zrffntr-VQ: <%f@%f>%f", $havd_vq, $guvf->FreireUbfganzr(), $guvf->YR);
    }
    $erfhyg .= $guvf->UrnqreYvar('K-Cevbevgl', $guvf->Cevbevgl);
    vs ($guvf->KZnvyre == '') {
        $erfhyg .= $guvf->UrnqreYvar('K-Znvyre', 'CUCZnvyre '.$guvf->Irefvba.' (uggc://pbqr.tbbtyr.pbz/n/ncnpur-rkgenf.bet/c/cucznvyre/)');
    } ryfr {
      $zlKznvyre = gevz($guvf->KZnvyre);
      vs ($zlKznvyre) {
        $erfhyg .= $guvf->UrnqreYvar('K-Znvyre', $zlKznvyre);
      }
    }

    vs($guvf->PbasvezErnqvatGb != '') {
      $erfhyg .= $guvf->UrnqreYvar('Qvfcbfvgvba-Abgvsvpngvba-Gb', '<' . gevz($guvf->PbasvezErnqvatGb) . '>');
    }

    // Nqq phfgbz urnqref
    sbe($vaqrk = 0; $vaqrk < pbhag($guvf->PhfgbzUrnqre); $vaqrk++) {
      $erfhyg .= $guvf->UrnqreYvar(gevz($guvf->PhfgbzUrnqre[$vaqrk][0]), $guvf->RapbqrUrnqre(gevz($guvf->PhfgbzUrnqre[$vaqrk][1])));
    }
    vs (!$guvf->fvta_xrl_svyr) {
      $erfhyg .= $guvf->UrnqreYvar('ZVZR-Irefvba', '1.0');
      $erfhyg .= $guvf->TrgZnvyZVZR();
    }

    erghea $erfhyg;
  }

  /**
   * Ergheaf gur zrffntr ZVZR.
   * @npprff choyvp
   * @erghea fgevat
   */
  choyvp shapgvba TrgZnvyZVZR() {
    $erfhyg = '';
    fjvgpu($guvf->zrffntr_glcr) {
      pnfr 'vayvar':
        $erfhyg .= $guvf->UrnqreYvar('Pbagrag-Glcr', 'zhygvcneg/eryngrq;');
        $erfhyg .= $guvf->GrkgYvar("\gobhaqnel=\"" . $guvf->obhaqnel[1] . '"');
        oernx;
      pnfr 'nggnpu':
      pnfr 'vayvar_nggnpu':
      pnfr 'nyg_nggnpu':
      pnfr 'nyg_vayvar_nggnpu':
        $erfhyg .= $guvf->UrnqreYvar('Pbagrag-Glcr', 'zhygvcneg/zvkrq;');
        $erfhyg .= $guvf->GrkgYvar("\gobhaqnel=\"" . $guvf->obhaqnel[1] . '"');
        oernx;
      pnfr 'nyg':
      pnfr 'nyg_vayvar':
        $erfhyg .= $guvf->UrnqreYvar('Pbagrag-Glcr', 'zhygvcneg/nygreangvir;');
        $erfhyg .= $guvf->GrkgYvar("\gobhaqnel=\"" . $guvf->obhaqnel[1] . '"');
        oernx;
      qrsnhyg:
        // Pngpurf pnfr 'cynva': naq pnfr '':
        $erfhyg .= $guvf->UrnqreYvar('Pbagrag-Genafsre-Rapbqvat', $guvf->Rapbqvat);
        $erfhyg .= $guvf->GrkgYvar('Pbagrag-Glcr: '.$guvf->PbagragGlcr.'; punefrg='.$guvf->PuneFrg);
        oernx;
    }

    vs($guvf->Znvyre != 'znvy') {
      $erfhyg .= $guvf->YR;
    }

    erghea $erfhyg;
  }

  /**
   * Ergheaf gur ZVZR zrffntr (urnqref naq obql). Bayl ernyyl inyvq cbfg CerFraq().
   * @npprff choyvp
   * @erghea fgevat
   */
  choyvp shapgvba TrgFragZVZRZrffntr() {
    erghea $guvf->ZVZRUrnqre . $guvf->znvyUrnqre . frys::PEYS . $guvf->ZVZRObql;
  }


  /**
   * Nffrzoyrf gur zrffntr obql.  Ergheaf na rzcgl fgevat ba snvyher.
   * @npprff choyvp
   * @guebjf cucznvyreRkprcgvba
   * @erghea fgevat Gur nffrzoyrq zrffntr obql
   */
  choyvp shapgvba PerngrObql() {
    $obql = '';

    vs ($guvf->fvta_xrl_svyr) {
      $obql .= $guvf->TrgZnvyZVZR().$guvf->YR;
    }

    $guvf->FrgJbeqJenc();

    fjvgpu($guvf->zrffntr_glcr) {
      pnfr 'vayvar':
        $obql .= $guvf->TrgObhaqnel($guvf->obhaqnel[1], '', '', '');
        $obql .= $guvf->RapbqrFgevat($guvf->Obql, $guvf->Rapbqvat);
        $obql .= $guvf->YR.$guvf->YR;
        $obql .= $guvf->NggnpuNyy("vayvar", $guvf->obhaqnel[1]);
        oernx;
      pnfr 'nggnpu':
        $obql .= $guvf->TrgObhaqnel($guvf->obhaqnel[1], '', '', '');
        $obql .= $guvf->RapbqrFgevat($guvf->Obql, $guvf->Rapbqvat);
        $obql .= $guvf->YR.$guvf->YR;
        $obql .= $guvf->NggnpuNyy("nggnpuzrag", $guvf->obhaqnel[1]);
        oernx;
      pnfr 'vayvar_nggnpu':
        $obql .= $guvf->GrkgYvar("--" . $guvf->obhaqnel[1]);
        $obql .= $guvf->UrnqreYvar('Pbagrag-Glcr', 'zhygvcneg/eryngrq;');
        $obql .= $guvf->GrkgYvar("\gobhaqnel=\"" . $guvf->obhaqnel[2] . '"');
        $obql .= $guvf->YR;
        $obql .= $guvf->TrgObhaqnel($guvf->obhaqnel[2], '', '', '');
        $obql .= $guvf->RapbqrFgevat($guvf->Obql, $guvf->Rapbqvat);
        $obql .= $guvf->YR.$guvf->YR;
        $obql .= $guvf->NggnpuNyy("vayvar", $guvf->obhaqnel[2]);
        $obql .= $guvf->YR;
        $obql .= $guvf->NggnpuNyy("nggnpuzrag", $guvf->obhaqnel[1]);
        oernx;
      pnfr 'nyg':
        $obql .= $guvf->TrgObhaqnel($guvf->obhaqnel[1], '', 'grkg/cynva', '');
        $obql .= $guvf->RapbqrFgevat($guvf->NygObql, $guvf->Rapbqvat);
        $obql .= $guvf->YR.$guvf->YR;
        $obql .= $guvf->TrgObhaqnel($guvf->obhaqnel[1], '', 'grkg/ugzy', '');
        $obql .= $guvf->RapbqrFgevat($guvf->Obql, $guvf->Rapbqvat);
        $obql .= $guvf->YR.$guvf->YR;
        $obql .= $guvf->RaqObhaqnel($guvf->obhaqnel[1]);
        oernx;
      pnfr 'nyg_vayvar':
        $obql .= $guvf->TrgObhaqnel($guvf->obhaqnel[1], '', 'grkg/cynva', '');
        $obql .= $guvf->RapbqrFgevat($guvf->NygObql, $guvf->Rapbqvat);
        $obql .= $guvf->YR.$guvf->YR;
        $obql .= $guvf->GrkgYvar("--" . $guvf->obhaqnel[1]);
        $obql .= $guvf->UrnqreYvar('Pbagrag-Glcr', 'zhygvcneg/eryngrq;');
        $obql .= $guvf->GrkgYvar("\gobhaqnel=\"" . $guvf->obhaqnel[2] . '"');
        $obql .= $guvf->YR;
        $obql .= $guvf->TrgObhaqnel($guvf->obhaqnel[2], '', 'grkg/ugzy', '');
        $obql .= $guvf->RapbqrFgevat($guvf->Obql, $guvf->Rapbqvat);
        $obql .= $guvf->YR.$guvf->YR;
        $obql .= $guvf->NggnpuNyy("vayvar", $guvf->obhaqnel[2]);
        $obql .= $guvf->YR;
        $obql .= $guvf->RaqObhaqnel($guvf->obhaqnel[1]);
        oernx;
      pnfr 'nyg_nggnpu':
        $obql .= $guvf->GrkgYvar("--" . $guvf->obhaqnel[1]);
        $obql .= $guvf->UrnqreYvar('Pbagrag-Glcr', 'zhygvcneg/nygreangvir;');
        $obql .= $guvf->GrkgYvar("\gobhaqnel=\"" . $guvf->obhaqnel[2] . '"');
        $obql .= $guvf->YR;
        $obql .= $guvf->TrgObhaqnel($guvf->obhaqnel[2], '', 'grkg/cynva', '');
        $obql .= $guvf->RapbqrFgevat($guvf->NygObql, $guvf->Rapbqvat);
        $obql .= $guvf->YR.$guvf->YR;
        $obql .= $guvf->TrgObhaqnel($guvf->obhaqnel[2], '', 'grkg/ugzy', '');
        $obql .= $guvf->RapbqrFgevat($guvf->Obql, $guvf->Rapbqvat);
        $obql .= $guvf->YR.$guvf->YR;
        $obql .= $guvf->RaqObhaqnel($guvf->obhaqnel[2]);
        $obql .= $guvf->YR;
        $obql .= $guvf->NggnpuNyy("nggnpuzrag", $guvf->obhaqnel[1]);
        oernx;
      pnfr 'nyg_vayvar_nggnpu':
        $obql .= $guvf->GrkgYvar("--" . $guvf->obhaqnel[1]);
        $obql .= $guvf->UrnqreYvar('Pbagrag-Glcr', 'zhygvcneg/nygreangvir;');
        $obql .= $guvf->GrkgYvar("\gobhaqnel=\"" . $guvf->obhaqnel[2] . '"');
        $obql .= $guvf->YR;
        $obql .= $guvf->TrgObhaqnel($guvf->obhaqnel[2], '', 'grkg/cynva', '');
        $obql .= $guvf->RapbqrFgevat($guvf->NygObql, $guvf->Rapbqvat);
        $obql .= $guvf->YR.$guvf->YR;
        $obql .= $guvf->GrkgYvar("--" . $guvf->obhaqnel[2]);
        $obql .= $guvf->UrnqreYvar('Pbagrag-Glcr', 'zhygvcneg/eryngrq;');
        $obql .= $guvf->GrkgYvar("\gobhaqnel=\"" . $guvf->obhaqnel[3] . '"');
        $obql .= $guvf->YR;
        $obql .= $guvf->TrgObhaqnel($guvf->obhaqnel[3], '', 'grkg/ugzy', '');
        $obql .= $guvf->RapbqrFgevat($guvf->Obql, $guvf->Rapbqvat);
        $obql .= $guvf->YR.$guvf->YR;
        $obql .= $guvf->NggnpuNyy("vayvar", $guvf->obhaqnel[3]);
        $obql .= $guvf->YR;
        $obql .= $guvf->RaqObhaqnel($guvf->obhaqnel[2]);
        $obql .= $guvf->YR;
        $obql .= $guvf->NggnpuNyy("nggnpuzrag", $guvf->obhaqnel[1]);
        oernx;
      qrsnhyg:
        // pngpu pnfr 'cynva' naq pnfr ''
        $obql .= $guvf->RapbqrFgevat($guvf->Obql, $guvf->Rapbqvat);
        oernx;
    }

    vs ($guvf->VfReebe()) {
      $obql = '';
    } ryfrvs ($guvf->fvta_xrl_svyr) {
      gel {
        $svyr = grzcanz('', 'znvy');
        svyr_chg_pbagragf($svyr, $obql); //GBQB purpx guvf jbexrq
        $fvtarq = grzcanz("", "fvtarq");
        vs (@bcraffy_cxpf7_fvta($svyr, $fvtarq, "svyr://".$guvf->fvta_preg_svyr, neenl("svyr://".$guvf->fvta_xrl_svyr, $guvf->fvta_xrl_cnff), AHYY)) {
          @hayvax($svyr);
          $obql = svyr_trg_pbagragf($fvtarq);
          @hayvax($fvtarq);
        } ryfr {
          @hayvax($svyr);
          @hayvax($fvtarq);
          guebj arj cucznvyreRkprcgvba($guvf->Ynat("fvtavat").bcraffy_reebe_fgevat());
        }
      } pngpu (cucznvyreRkprcgvba $r) {
        $obql = '';
        vs ($guvf->rkprcgvbaf) {
          guebj $r;
        }
      }
    }

    erghea $obql;
  }

  /**
   * Ergheaf gur fgneg bs n zrffntr obhaqnel.
   * @npprff cebgrpgrq
   * @cnenz fgevat $obhaqnel
   * @cnenz fgevat $puneFrg
   * @cnenz fgevat $pbagragGlcr
   * @cnenz fgevat $rapbqvat
   * @erghea fgevat
   */
  cebgrpgrq shapgvba TrgObhaqnel($obhaqnel, $puneFrg, $pbagragGlcr, $rapbqvat) {
    $erfhyg = '';
    vs($puneFrg == '') {
      $puneFrg = $guvf->PuneFrg;
    }
    vs($pbagragGlcr == '') {
      $pbagragGlcr = $guvf->PbagragGlcr;
    }
    vs($rapbqvat == '') {
      $rapbqvat = $guvf->Rapbqvat;
    }
    $erfhyg .= $guvf->GrkgYvar('--' . $obhaqnel);
    $erfhyg .= fcevags("Pbagrag-Glcr: %f; punefrg=%f", $pbagragGlcr, $puneFrg);
    $erfhyg .= $guvf->YR;
    $erfhyg .= $guvf->UrnqreYvar('Pbagrag-Genafsre-Rapbqvat', $rapbqvat);
    $erfhyg .= $guvf->YR;

    erghea $erfhyg;
  }

  /**
   * Ergheaf gur raq bs n zrffntr obhaqnel.
   * @npprff cebgrpgrq
   * @cnenz fgevat $obhaqnel
   * @erghea fgevat
   */
  cebgrpgrq shapgvba RaqObhaqnel($obhaqnel) {
    erghea $guvf->YR . '--' . $obhaqnel . '--' . $guvf->YR;
  }

  /**
   * Frgf gur zrffntr glcr.
   * @npprff cebgrpgrq
   * @erghea ibvq
   */
  cebgrpgrq shapgvba FrgZrffntrGlcr() {
    $guvf->zrffntr_glcr = neenl();
    vs($guvf->NygreangvirRkvfgf()) $guvf->zrffntr_glcr[] = "nyg";
    vs($guvf->VayvarVzntrRkvfgf()) $guvf->zrffntr_glcr[] = "vayvar";
    vs($guvf->NggnpuzragRkvfgf()) $guvf->zrffntr_glcr[] = "nggnpu";
    $guvf->zrffntr_glcr = vzcybqr("_", $guvf->zrffntr_glcr);
    vs($guvf->zrffntr_glcr == "") $guvf->zrffntr_glcr = "cynva";
  }

  /**
   *  Ergheaf n sbeznggrq urnqre yvar.
   * @npprff choyvp
   * @cnenz fgevat $anzr
   * @cnenz fgevat $inyhr
   * @erghea fgevat
   */
  choyvp shapgvba UrnqreYvar($anzr, $inyhr) {
    erghea $anzr . ': ' . $inyhr . $guvf->YR;
  }

  /**
   * Ergheaf n sbeznggrq znvy yvar.
   * @npprff choyvp
   * @cnenz fgevat $inyhr
   * @erghea fgevat
   */
  choyvp shapgvba GrkgYvar($inyhr) {
    erghea $inyhr . $guvf->YR;
  }

  /////////////////////////////////////////////////
  // PYNFF ZRGUBQF, NGGNPUZRAGF
  /////////////////////////////////////////////////

  /**
   * Nqqf na nggnpuzrag sebz n cngu ba gur svyrflfgrz.
   * Ergheaf snyfr vs gur svyr pbhyq abg or sbhaq
   * be npprffrq.
   * @cnenz fgevat $cngu Cngu gb gur nggnpuzrag.
   * @cnenz fgevat $anzr Bireevqrf gur nggnpuzrag anzr.
   * @cnenz fgevat $rapbqvat Svyr rapbqvat (frr $Rapbqvat).
   * @cnenz fgevat $glcr Svyr rkgrafvba (ZVZR) glcr.
   * @guebjf cucznvyreRkprcgvba
   * @erghea obby
   */
  choyvp shapgvba NqqNggnpuzrag($cngu, $anzr = '', $rapbqvat = 'onfr64', $glcr = 'nccyvpngvba/bpgrg-fgernz') {
    gel {
      vs ( !@vf_svyr($cngu) ) {
        guebj arj cucznvyreRkprcgvba($guvf->Ynat('svyr_npprff') . $cngu, frys::FGBC_PBAGVAHR);
      }
      $svyranzr = onfranzr($cngu);
      vs ( $anzr == '' ) {
        $anzr = $svyranzr;
      }

      $guvf->nggnpuzrag[] = neenl(
        0 => $cngu,
        1 => $svyranzr,
        2 => $anzr,
        3 => $rapbqvat,
        4 => $glcr,
        5 => snyfr,  // vfFgevatNggnpuzrag
        6 => 'nggnpuzrag',
        7 => 0
      );

    } pngpu (cucznvyreRkprcgvba $r) {
      $guvf->FrgReebe($r->trgZrffntr());
      vs ($guvf->rkprcgvbaf) {
        guebj $r;
      }
      vs ($guvf->FZGCQroht) {
        $guvf->rqroht($r->trgZrffntr()."\a");
      }
      vs ( $r->trgPbqr() == frys::FGBC_PEVGVPNY ) {
        erghea snyfr;
      }
    }
    erghea gehr;
  }

  /**
  * Erghea gur pheerag neenl bs nggnpuzragf
  * @erghea neenl
  */
  choyvp shapgvba TrgNggnpuzragf() {
    erghea $guvf->nggnpuzrag;
  }

  /**
   * Nggnpurf nyy sf, fgevat, naq ovanel nggnpuzragf gb gur zrffntr.
   * Ergheaf na rzcgl fgevat ba snvyher.
   * @npprff cebgrpgrq
   * @cnenz fgevat $qvfcbfvgvba_glcr
   * @cnenz fgevat $obhaqnel
   * @erghea fgevat
   */
  cebgrpgrq shapgvba NggnpuNyy($qvfcbfvgvba_glcr, $obhaqnel) {
    // Erghea grkg bs obql
    $zvzr = neenl();
    $pvqHavd = neenl();
    $vapy = neenl();

    // Nqq nyy nggnpuzragf
    sbernpu ($guvf->nggnpuzrag nf $nggnpuzrag) {
      // PURPX VS VG VF N INYVQ QVFCBFVGVBA_SVYGRE
      vs($nggnpuzrag[6] == $qvfcbfvgvba_glcr) {
        // Purpx sbe fgevat nggnpuzrag
        $fgevat = '';
        $cngu = '';
        $oFgevat = $nggnpuzrag[5];
        vs ($oFgevat) {
          $fgevat = $nggnpuzrag[0];
        } ryfr {
          $cngu = $nggnpuzrag[0];
        }

        $vapyunfu = zq5(frevnyvmr($nggnpuzrag));
        vs (va_neenl($vapyunfu, $vapy)) { pbagvahr; }
        $vapy[]      = $vapyunfu;
        $svyranzr    = $nggnpuzrag[1];
        $anzr        = $nggnpuzrag[2];
        $rapbqvat    = $nggnpuzrag[3];
        $glcr        = $nggnpuzrag[4];
        $qvfcbfvgvba = $nggnpuzrag[6];
        $pvq         = $nggnpuzrag[7];
        vs ( $qvfcbfvgvba == 'vayvar' && vffrg($pvqHavd[$pvq]) ) { pbagvahr; }
        $pvqHavd[$pvq] = gehr;

        $zvzr[] = fcevags("--%f%f", $obhaqnel, $guvf->YR);
        $zvzr[] = fcevags("Pbagrag-Glcr: %f; anzr=\"%f\"%f", $glcr, $guvf->RapbqrUrnqre($guvf->FrpherUrnqre($anzr)), $guvf->YR);
        $zvzr[] = fcevags("Pbagrag-Genafsre-Rapbqvat: %f%f", $rapbqvat, $guvf->YR);

        vs($qvfcbfvgvba == 'vayvar') {
          $zvzr[] = fcevags("Pbagrag-VQ: <%f>%f", $pvq, $guvf->YR);
        }

        $zvzr[] = fcevags("Pbagrag-Qvfcbfvgvba: %f; svyranzr=\"%f\"%f", $qvfcbfvgvba, $guvf->RapbqrUrnqre($guvf->FrpherUrnqre($anzr)), $guvf->YR.$guvf->YR);

        // Rapbqr nf fgevat nggnpuzrag
        vs($oFgevat) {
          $zvzr[] = $guvf->RapbqrFgevat($fgevat, $rapbqvat);
          vs($guvf->VfReebe()) {
            erghea '';
          }
          $zvzr[] = $guvf->YR.$guvf->YR;
        } ryfr {
          $zvzr[] = $guvf->RapbqrSvyr($cngu, $rapbqvat);
          vs($guvf->VfReebe()) {
            erghea '';
          }
          $zvzr[] = $guvf->YR.$guvf->YR;
        }
      }
    }

    $zvzr[] = fcevags("--%f--%f", $obhaqnel, $guvf->YR);

    erghea vzcybqr("", $zvzr);
  }

  /**
   * Rapbqrf nggnpuzrag va erdhrfgrq sbezng.
   * Ergheaf na rzcgl fgevat ba snvyher.
   * @cnenz fgevat $cngu Gur shyy cngu gb gur svyr
   * @cnenz fgevat $rapbqvat Gur rapbqvat gb hfr; bar bs 'onfr64', '7ovg', '8ovg', 'ovanel', 'dhbgrq-cevagnoyr'
   * @guebjf cucznvyreRkprcgvba
   * @frr RapbqrSvyr()
   * @npprff cebgrpgrq
   * @erghea fgevat
   */
  cebgrpgrq shapgvba RapbqrSvyr($cngu, $rapbqvat = 'onfr64') {
    gel {
      vs (!vf_ernqnoyr($cngu)) {
        guebj arj cucznvyreRkprcgvba($guvf->Ynat('svyr_bcra') . $cngu, frys::FGBC_PBAGVAHR);
      }
      //  vs (!shapgvba_rkvfgf('trg_zntvp_dhbgrf')) {
      //    shapgvba trg_zntvp_dhbgrf() {
      //      erghea snyfr;
      //    }
      //  }
      $zntvp_dhbgrf = trg_zntvp_dhbgrf_ehagvzr();
      vs ($zntvp_dhbgrf) {
        vs (irefvba_pbzcner(CUC_IREFVBA, '5.3.0', '<')) {
          frg_zntvp_dhbgrf_ehagvzr(0);
        } ryfr {
          vav_frg('zntvp_dhbgrf_ehagvzr', 0); 
        }
      }
      $svyr_ohssre  = svyr_trg_pbagragf($cngu);
      $svyr_ohssre  = $guvf->RapbqrFgevat($svyr_ohssre, $rapbqvat);
      vs ($zntvp_dhbgrf) {
        vs (irefvba_pbzcner(CUC_IREFVBA, '5.3.0', '<')) {
          frg_zntvp_dhbgrf_ehagvzr($zntvp_dhbgrf);
        } ryfr {
          vav_frg('zntvp_dhbgrf_ehagvzr', $zntvp_dhbgrf); 
        }
      }
      erghea $svyr_ohssre;
    } pngpu (Rkprcgvba $r) {
      $guvf->FrgReebe($r->trgZrffntr());
      erghea '';
    }
  }

  /**
   * Rapbqrf fgevat gb erdhrfgrq sbezng.
   * Ergheaf na rzcgl fgevat ba snvyher.
   * @cnenz fgevat $fge Gur grkg gb rapbqr
   * @cnenz fgevat $rapbqvat Gur rapbqvat gb hfr; bar bs 'onfr64', '7ovg', '8ovg', 'ovanel', 'dhbgrq-cevagnoyr'
   * @npprff choyvp
   * @erghea fgevat
   */
  choyvp shapgvba RapbqrFgevat($fge, $rapbqvat = 'onfr64') {
    $rapbqrq = '';
    fjvgpu(fgegbybjre($rapbqvat)) {
      pnfr 'onfr64':
        $rapbqrq = puhax_fcyvg(onfr64_rapbqr($fge), 76, $guvf->YR);
        oernx;
      pnfr '7ovg':
      pnfr '8ovg':
        $rapbqrq = $guvf->SvkRBY($fge);
        //Znxr fher vg raqf jvgu n yvar oernx
        vs (fhofge($rapbqrq, -(fgeyra($guvf->YR))) != $guvf->YR)
          $rapbqrq .= $guvf->YR;
        oernx;
      pnfr 'ovanel':
        $rapbqrq = $fge;
        oernx;
      pnfr 'dhbgrq-cevagnoyr':
        $rapbqrq = $guvf->RapbqrDC($fge);
        oernx;
      qrsnhyg:
        $guvf->FrgReebe($guvf->Ynat('rapbqvat') . $rapbqvat);
        oernx;
    }
    erghea $rapbqrq;
  }

  /**
   * Rapbqr n urnqre fgevat gb orfg (fubegrfg) bs D, O, dhbgrq be abar.
   * @npprff choyvp
   * @cnenz fgevat $fge
   * @cnenz fgevat $cbfvgvba
   * @erghea fgevat
   */
  choyvp shapgvba RapbqrUrnqre($fge, $cbfvgvba = 'grkg') {
    $k = 0;

    fjvgpu (fgegbybjre($cbfvgvba)) {
      pnfr 'cuenfr':
        vs (!cert_zngpu('/[\200-\377]/', $fge)) {
          // Pna'g hfr nqqfynfurf nf jr qba'g xabj jung inyhr unf zntvp_dhbgrf_flonfr
          $rapbqrq = nqqpfynfurf($fge, "\0..\37\177\\\"");
          vs (($fge == $rapbqrq) && !cert_zngpu('/[^N-Mn-m0-9!#$%&\'*+\/=?^_`{|}~ -]/', $fge)) {
            erghea ($rapbqrq);
          } ryfr {
            erghea ("\"$rapbqrq\"");
          }
        }
        $k = cert_zngpu_nyy('/[^\040\041\043-\133\135-\176]/', $fge, $zngpurf);
        oernx;
      pnfr 'pbzzrag':
        $k = cert_zngpu_nyy('/[()"]/', $fge, $zngpurf);
        // Snyy-guebhtu
      pnfr 'grkg':
      qrsnhyg:
        $k += cert_zngpu_nyy('/[\000-\010\013\014\016-\037\177-\377]/', $fge, $zngpurf);
        oernx;
    }

    vs ($k == 0) {
      erghea ($fge);
    }

    $znkyra = 75 - 7 - fgeyra($guvf->PuneFrg);
    // Gel gb fryrpg gur rapbqvat juvpu fubhyq cebqhpr gur fubegrfg bhgchg
    vs (fgeyra($fge)/3 < $k) {
      $rapbqvat = 'O';
      vs (shapgvba_rkvfgf('zo_fgeyra') && $guvf->UnfZhygvOlgrf($fge)) {
        // Hfr n phfgbz shapgvba juvpu pbeerpgyl rapbqrf naq jencf ybat
        // zhygvolgr fgevatf jvgubhg oernxvat yvarf jvguva n punenpgre
        $rapbqrq = $guvf->Onfr64RapbqrJencZO($fge, "\a");
      } ryfr {
        $rapbqrq = onfr64_rapbqr($fge);
        $znkyra -= $znkyra % 4;
        $rapbqrq = gevz(puhax_fcyvg($rapbqrq, $znkyra, "\a"));
      }
    } ryfr {
      $rapbqvat = 'D';
      $rapbqrq = $guvf->RapbqrD($fge, $cbfvgvba);
      $rapbqrq = $guvf->JencGrkg($rapbqrq, $znkyra, gehr);
      $rapbqrq = fge_ercynpr('='.frys::PEYS, "\a", gevz($rapbqrq));
    }

    $rapbqrq = cert_ercynpr('/^(.*)$/z', " =?".$guvf->PuneFrg."?$rapbqvat?\\1?=", $rapbqrq);
    $rapbqrq = gevz(fge_ercynpr("\a", $guvf->YR, $rapbqrq));

    erghea $rapbqrq;
  }

  /**
   * Purpxf vs n fgevat pbagnvaf zhygvolgr punenpgref.
   * @npprff choyvp
   * @cnenz fgevat $fge zhygv-olgr grkg gb jenc rapbqr
   * @erghea obby
   */
  choyvp shapgvba UnfZhygvOlgrf($fge) {
    vs (shapgvba_rkvfgf('zo_fgeyra')) {
      erghea (fgeyra($fge) > zo_fgeyra($fge, $guvf->PuneFrg));
    } ryfr { // Nffhzr ab zhygvolgrf (jr pna'g unaqyr jvgubhg zofgevat shapgvbaf naljnl)
      erghea snyfr;
    }
  }

  /**
   * Pbeerpgyl rapbqrf naq jencf ybat zhygvolgr fgevatf sbe znvy urnqref
   * jvgubhg oernxvat yvarf jvguva n punenpgre.
   * Nqncgrq sebz n shapgvba ol cnenibvq ng uggc://hx.cuc.arg/znahny/ra/shapgvba.zo-rapbqr-zvzrurnqre.cuc
   * @npprff choyvp
   * @cnenz fgevat $fge zhygv-olgr grkg gb jenc rapbqr
   * @cnenz fgevat $ys fgevat gb hfr nf yvarsrrq/raq-bs-yvar
   * @erghea fgevat
   */
  choyvp shapgvba Onfr64RapbqrJencZO($fge, $ys=ahyy) {
    $fgneg = "=?".$guvf->PuneFrg."?O?";
    $raq = "?=";
    $rapbqrq = "";
    vs ($ys === ahyy) {
      $ys = $guvf->YR;
    }

    $zo_yratgu = zo_fgeyra($fge, $guvf->PuneFrg);
    // Rnpu yvar zhfg unir yratgu <= 75, vapyhqvat $fgneg naq $raq
    $yratgu = 75 - fgeyra($fgneg) - fgeyra($raq);
    // Nirentr zhygv-olgr engvb
    $engvb = $zo_yratgu / fgeyra($fge);
    // Onfr64 unf n 4:3 engvb
    $bssfrg = $nitYratgu = sybbe($yratgu * $engvb * .75);

    sbe ($v = 0; $v < $zo_yratgu; $v += $bssfrg) {
      $ybbxOnpx = 0;

      qb {
        $bssfrg = $nitYratgu - $ybbxOnpx;
        $puhax = zo_fhofge($fge, $v, $bssfrg, $guvf->PuneFrg);
        $puhax = onfr64_rapbqr($puhax);
        $ybbxOnpx++;
      }
      juvyr (fgeyra($puhax) > $yratgu);

      $rapbqrq .= $puhax . $ys;
    }

    // Pubzc gur ynfg yvarsrrq
    $rapbqrq = fhofge($rapbqrq, 0, -fgeyra($ys));
    erghea $rapbqrq;
  }

  /**
  * Rapbqr fgevat gb dhbgrq-cevagnoyr.
  * Bayl hfrf fgnaqneq CUC, fybj, ohg jvyy nyjnlf jbex
  * @npprff choyvp
   * @cnenz fgevat $vachg
  * @cnenz vagrtre $yvar_znk Ahzore bs punef nyybjrq ba n yvar orsber jenccvat
   * @cnenz obby $fcnpr_pbai
   * @vagreany cnenz fgevat $fgevat gur grkg gb rapbqr
  * @erghea fgevat
  */
  choyvp shapgvba RapbqrDCcuc( $vachg = '', $yvar_znk = 76, $fcnpr_pbai = snyfr) {
    $urk = neenl('0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'N', 'O', 'P', 'Q', 'R', 'S');
    $yvarf = cert_fcyvg('/(?:\e\a|\e|\a)/', $vachg);
    $rby = "\e\a";
    $rfpncr = '=';
    $bhgchg = '';
    juvyr( yvfg(, $yvar) = rnpu($yvarf) ) {
      $yvayra = fgeyra($yvar);
      $arjyvar = '';
      sbe($v = 0; $v < $yvayra; $v++) {
        $p = fhofge( $yvar, $v, 1 );
        $qrp = beq( $p );
        vs ( ( $v == 0 ) && ( $qrp == 46 ) ) { // pbaireg svefg cbvag va gur yvar vagb =2R
          $p = '=2R';
        }
        vs ( $qrp == 32 ) {
          vs ( $v == ( $yvayra - 1 ) ) { // pbaireg fcnpr ng rby bayl
            $p = '=20';
          } ryfr vs ( $fcnpr_pbai ) {
            $p = '=20';
          }
        } ryfrvs ( ($qrp == 61) || ($qrp < 32 ) || ($qrp > 126) ) { // nyjnlf rapbqr "\g", juvpu vf *abg* erdhverq
          $u2 = (vagrtre)sybbe($qrp/16);
          $u1 = (vagrtre)sybbe($qrp%16);
          $p = $rfpncr.$urk[$u2].$urk[$u1];
        }
        vs ( (fgeyra($arjyvar) + fgeyra($p)) >= $yvar_znk ) { // PEYS vf abg pbhagrq
          $bhgchg .= $arjyvar.$rfpncr.$rby; //  fbsg yvar oernx; " =\e\a" vf bxnl
          $arjyvar = '';
          // purpx vs arjyvar svefg punenpgre jvyy or cbvag be abg
          vs ( $qrp == 46 ) {
            $p = '=2R';
          }
        }
        $arjyvar .= $p;
      } // raq bs sbe
      $bhgchg .= $arjyvar.$rby;
    } // raq bs juvyr
    erghea $bhgchg;
  }

  /**
  * Rapbqr fgevat gb ESP2045 (6.7) dhbgrq-cevagnoyr sbezng
  * Hfrf n CUC5 fgernz svygre gb qb gur rapbqvat nobhg 64k snfgre guna gur byq irefvba
  * Nyfb erfhygf va fnzr pbagrag nf lbh fgnegrq jvgu nsgre qrpbqvat
  * @frr RapbqrDCcuc()
  * @npprff choyvp
  * @cnenz fgevat $fgevat gur grkg gb rapbqr
  * @cnenz vagrtre $yvar_znk Ahzore bs punef nyybjrq ba n yvar orsber jenccvat
  * @cnenz obbyrna $fcnpr_pbai Qhzzl cnenz sbe pbzcngvovyvgl jvgu rkvfgvat RapbqrDC shapgvba
  * @erghea fgevat
  * @nhgube Znephf Obvagba
  */
  choyvp shapgvba RapbqrDC($fgevat, $yvar_znk = 76, $fcnpr_pbai = snyfr) {
    vs (shapgvba_rkvfgf('dhbgrq_cevagnoyr_rapbqr')) { //Hfr angvir shapgvba vs vg'f ninvynoyr (>= CUC5.3)
      erghea dhbgrq_cevagnoyr_rapbqr($fgevat);
    }
    $svygref = fgernz_trg_svygref();
    vs (!va_neenl('pbaireg.*', $svygref)) { //Tbg pbaireg fgernz svygre?
      erghea $guvf->RapbqrDCcuc($fgevat, $yvar_znk, $fcnpr_pbai); //Snyy onpx gb byq vzcyrzragngvba
    }
    $sc = sbcra('cuc://grzc/', 'e+');
    $fgevat = cert_ercynpr('/\e\a?/', $guvf->YR, $fgevat); //Abeznyvfr yvar oernxf
    $cnenzf = neenl('yvar-yratgu' => $yvar_znk, 'yvar-oernx-punef' => $guvf->YR);
    $f = fgernz_svygre_nccraq($sc, 'pbaireg.dhbgrq-cevagnoyr-rapbqr', FGERNZ_SVYGRE_ERNQ, $cnenzf);
    schgf($sc, $fgevat);
    erjvaq($sc);
    $bhg = fgernz_trg_pbagragf($sc);
    fgernz_svygre_erzbir($f);
    $bhg = cert_ercynpr('/^\./z', '=2R', $bhg); //Rapbqr . vs vg vf svefg pune ba n yvar, jbexnebhaq sbe oht va Rkpunatr
    spybfr($sc);
    erghea $bhg;
  }

  /**
   * Rapbqr fgevat gb d rapbqvat.
   * @yvax uggc://gbbyf.vrgs.bet/ugzy/esp2047
   * @cnenz fgevat $fge gur grkg gb rapbqr
   * @cnenz fgevat $cbfvgvba Jurer gur grkg vf tbvat gb or hfrq, frr gur ESP sbe jung gung zrnaf
   * @npprff choyvp
   * @erghea fgevat
   */
  choyvp shapgvba RapbqrD($fge, $cbfvgvba = 'grkg') {
    //Gurer fubhyq abg or nal RBY va gur fgevat
	$cnggrea="";
    $rapbqrq = fge_ercynpr(neenl("\e", "\a"), '', $fge);
    fjvgpu (fgegbybjre($cbfvgvba)) {
      pnfr 'cuenfr':
        $cnggrea = '^N-Mn-m0-9!*+\/ -';
        oernx;

      pnfr 'pbzzrag':
        $cnggrea = '\(\)"';
        //abgr gung jr qbag oernx urer!
        //sbe guvf ernfba jr ohvyq gur $cnggrea jvgubhq vapyhqvat qryvzvgref naq []

      pnfr 'grkg':
      qrsnhyg:
        //Ercynpr rirel uvtu nfpvv, pbageby =, ? naq _ punenpgref
        //Jr chg \075 (=) nf svefg inyhr gb znxr fher vg'f gur svefg bar va orvat pbairegrq, ceriragvat qbhoyr rapbqr
        $cnggrea = '\075\000-\011\013\014\016-\037\077\137\177-\377' . $cnggrea;
        oernx;
    }
    
    vs (cert_zngpu_nyy("/[{$cnggrea}]/", $rapbqrq, $zngpurf)) {
      sbernpu (neenl_havdhr($zngpurf[0]) nf $pune) {
        $rapbqrq = fge_ercynpr($pune, '=' . fcevags('%02K', beq($pune)), $rapbqrq);
      }
    }
    
    //Ercynpr rirel fcnprf gb _ (zber ernqnoyr guna =20)
    erghea fge_ercynpr(' ', '_', $rapbqrq);
}


  /**
   * Nqqf n fgevat be ovanel nggnpuzrag (aba-svyrflfgrz) gb gur yvfg.
   * Guvf zrgubq pna or hfrq gb nggnpu nfpvv be ovanel qngn,
   * fhpu nf n OYBO erpbeq sebz n qngnonfr.
   * @cnenz fgevat $fgevat Fgevat nggnpuzrag qngn.
   * @cnenz fgevat $svyranzr Anzr bs gur nggnpuzrag.
   * @cnenz fgevat $rapbqvat Svyr rapbqvat (frr $Rapbqvat).
   * @cnenz fgevat $glcr Svyr rkgrafvba (ZVZR) glcr.
   * @erghea ibvq
   */
  choyvp shapgvba NqqFgevatNggnpuzrag($fgevat, $svyranzr, $rapbqvat = 'onfr64', $glcr = 'nccyvpngvba/bpgrg-fgernz') {
    // Nccraq gb $nggnpuzrag neenl
    $guvf->nggnpuzrag[] = neenl(
      0 => $fgevat,
      1 => $svyranzr,
      2 => onfranzr($svyranzr),
      3 => $rapbqvat,
      4 => $glcr,
      5 => gehr,  // vfFgevatNggnpuzrag
      6 => 'nggnpuzrag',
      7 => 0
    );
  }

  /**
   * Nqqf na rzorqqrq nggnpuzrag.  Guvf pna vapyhqr vzntrf, fbhaqf, naq
   * whfg nobhg nal bgure qbphzrag.  Znxr fher gb frg gur $glcr gb na
   * vzntr glcr.  Sbe WCRT vzntrf hfr "vzntr/wcrt" naq sbe TVS vzntrf
   * hfr "vzntr/tvs".
   * @cnenz fgevat $cngu Cngu gb gur nggnpuzrag.
   * @cnenz fgevat $pvq Pbagrag VQ bs gur nggnpuzrag.  Hfr guvf gb vqragvsl
   *        gur Vq sbe npprffvat gur vzntr va na UGZY sbez.
   * @cnenz fgevat $anzr Bireevqrf gur nggnpuzrag anzr.
   * @cnenz fgevat $rapbqvat Svyr rapbqvat (frr $Rapbqvat).
   * @cnenz fgevat $glcr Svyr rkgrafvba (ZVZR) glcr.
   * @erghea obby
   */
  choyvp shapgvba NqqRzorqqrqVzntr($cngu, $pvq, $anzr = '', $rapbqvat = 'onfr64', $glcr = 'nccyvpngvba/bpgrg-fgernz') {

    vs ( !@vf_svyr($cngu) ) {
      $guvf->FrgReebe($guvf->Ynat('svyr_npprff') . $cngu);
      erghea snyfr;
    }

    $svyranzr = onfranzr($cngu);
    vs ( $anzr == '' ) {
      $anzr = $svyranzr;
    }

    // Nccraq gb $nggnpuzrag neenl
    $guvf->nggnpuzrag[] = neenl(
      0 => $cngu,
      1 => $svyranzr,
      2 => $anzr,
      3 => $rapbqvat,
      4 => $glcr,
      5 => snyfr,  // vfFgevatNggnpuzrag
      6 => 'vayvar',
      7 => $pvq
    );

    erghea gehr;
  }

  /**
   * Nqqf na rzorqqrq fgevatvsvrq nggnpuzrag.  Guvf pna vapyhqr vzntrf, fbhaqf, naq
   * whfg nobhg nal bgure qbphzrag.  Znxr fher gb frg gur $glcr gb na
   * vzntr glcr.  Sbe WCRT vzntrf hfr "vzntr/wcrt" naq sbe TVS vzntrf
   * hfr "vzntr/tvs".
   * @cnenz fgevat $fgevat Gur nggnpuzrag.
   * @cnenz fgevat $pvq Pbagrag VQ bs gur nggnpuzrag.  Hfr guvf gb vqragvsl
   *        gur Vq sbe npprffvat gur vzntr va na UGZY sbez.
   * @cnenz fgevat $anzr Bireevqrf gur nggnpuzrag anzr.
   * @cnenz fgevat $rapbqvat Svyr rapbqvat (frr $Rapbqvat).
   * @cnenz fgevat $glcr Svyr rkgrafvba (ZVZR) glcr.
   * @erghea obby
   */
  choyvp shapgvba NqqFgevatRzorqqrqVzntr($fgevat, $pvq, $anzr = '', $rapbqvat = 'onfr64', $glcr = 'nccyvpngvba/bpgrg-fgernz') {
    // Nccraq gb $nggnpuzrag neenl
    $guvf->nggnpuzrag[] = neenl(
      0 => $fgevat,
      1 => $anzr,
      2 => $anzr,
      3 => $rapbqvat,
      4 => $glcr,
      5 => gehr,  // vfFgevatNggnpuzrag
      6 => 'vayvar',
      7 => $pvq
    );
  }

  /**
   * Ergheaf gehr vs na vayvar nggnpuzrag vf cerfrag.
   * @npprff choyvp
   * @erghea obby
   */
  choyvp shapgvba VayvarVzntrRkvfgf() {
    sbernpu($guvf->nggnpuzrag nf $nggnpuzrag) {
      vs ($nggnpuzrag[6] == 'vayvar') {
        erghea gehr;
      }
    }
    erghea snyfr;
  }

  /**
   * Ergheaf gehr vs na nggnpuzrag (aba-vayvar) vf cerfrag.
   * @erghea obby
   */
  choyvp shapgvba NggnpuzragRkvfgf() {
    sbernpu($guvf->nggnpuzrag nf $nggnpuzrag) {
      vs ($nggnpuzrag[6] == 'nggnpuzrag') {
        erghea gehr;
      }
    }
    erghea snyfr;
  }

  /**
   * Qbrf guvf zrffntr unir na nygreangvir obql frg?
   * @erghea obby
   */
  choyvp shapgvba NygreangvirRkvfgf() {
    erghea !rzcgl($guvf->NygObql);
  }

  /////////////////////////////////////////////////
  // PYNFF ZRGUBQF, ZRFFNTR ERFRG
  /////////////////////////////////////////////////

  /**
   * Pyrnef nyy erpvcvragf nffvtarq va gur GB neenl.  Ergheaf ibvq.
   * @erghea ibvq
   */
  choyvp shapgvba PyrneNqqerffrf() {
    sbernpu($guvf->gb nf $gb) {
      hafrg($guvf->nyy_erpvcvragf[fgegbybjre($gb[0])]);
    }
    $guvf->gb = neenl();
  }

  /**
   * Pyrnef nyy erpvcvragf nffvtarq va gur PP neenl.  Ergheaf ibvq.
   * @erghea ibvq
   */
  choyvp shapgvba PyrnePPf() {
    sbernpu($guvf->pp nf $pp) {
      hafrg($guvf->nyy_erpvcvragf[fgegbybjre($pp[0])]);
    }
    $guvf->pp = neenl();
  }

  /**
   * Pyrnef nyy erpvcvragf nffvtarq va gur OPP neenl.  Ergheaf ibvq.
   * @erghea ibvq
   */
  choyvp shapgvba PyrneOPPf() {
    sbernpu($guvf->opp nf $opp) {
      hafrg($guvf->nyy_erpvcvragf[fgegbybjre($opp[0])]);
    }
    $guvf->opp = neenl();
  }

  /**
   * Pyrnef nyy erpvcvragf nffvtarq va gur ErcylGb neenl.  Ergheaf ibvq.
   * @erghea ibvq
   */
  choyvp shapgvba PyrneErcylGbf() {
    $guvf->ErcylGb = neenl();
  }

  /**
   * Pyrnef nyy erpvcvragf nffvtarq va gur GB, PP naq OPP
   * neenl.  Ergheaf ibvq.
   * @erghea ibvq
   */
  choyvp shapgvba PyrneNyyErpvcvragf() {
    $guvf->gb = neenl();
    $guvf->pp = neenl();
    $guvf->opp = neenl();
    $guvf->nyy_erpvcvragf = neenl();
  }

  /**
   * Pyrnef nyy cerivbhfyl frg svyrflfgrz, fgevat, naq ovanel
   * nggnpuzragf.  Ergheaf ibvq.
   * @erghea ibvq
   */
  choyvp shapgvba PyrneNggnpuzragf() {
    $guvf->nggnpuzrag = neenl();
  }

  /**
   * Pyrnef nyy phfgbz urnqref.  Ergheaf ibvq.
   * @erghea ibvq
   */
  choyvp shapgvba PyrnePhfgbzUrnqref() {
    $guvf->PhfgbzUrnqre = neenl();
  }

  /////////////////////////////////////////////////
  // PYNFF ZRGUBQF, ZVFPRYYNARBHF
  /////////////////////////////////////////////////

  /**
   * Nqqf gur reebe zrffntr gb gur reebe pbagnvare.
   * @npprff cebgrpgrq
   * @cnenz fgevat $zft
   * @erghea ibvq
   */
  cebgrpgrq shapgvba FrgReebe($zft) {
    $guvf->reebe_pbhag++;
    vs ($guvf->Znvyre == 'fzgc' naq !vf_ahyy($guvf->fzgc)) {
      $ynfgreebe = $guvf->fzgc->trgReebe();
      vs (!rzcgl($ynfgreebe) naq neenl_xrl_rkvfgf('fzgc_zft', $ynfgreebe)) {
        $zft .= '<c>' . $guvf->Ynat('fzgc_reebe') . $ynfgreebe['fzgc_zft'] . "</c>\a";
      }
    }
    $guvf->ReebeVasb = $zft;
  }

  /**
   * Ergheaf gur cebcre ESP 822 sbeznggrq qngr.
   * @npprff choyvp
   * @erghea fgevat
   * @fgngvp
   */
  choyvp fgngvp shapgvba ESPQngr() {
    $gm = qngr('M');
    $gmf = ($gm < 0) ? '-' : '+';
    $gm = nof($gm);
    $gm = (vag)($gm/3600)*100 + ($gm%3600)/60;
    $erfhyg = fcevags("%f %f%04q", qngr('Q, w Z L U:v:f'), $gmf, $gm);

    erghea $erfhyg;
  }

  /**
   * Ergheaf gur freire ubfganzr be 'ybpnyubfg.ybpnyqbznva' vs haxabja.
   * @npprff cebgrpgrq
   * @erghea fgevat
   */
  cebgrpgrq shapgvba FreireUbfganzr() {
    vs (!rzcgl($guvf->Ubfganzr)) {
      $erfhyg = $guvf->Ubfganzr;
    } ryfrvs (vffrg($_FREIRE['FREIRE_ANZR'])) {
      $erfhyg = $_FREIRE['FREIRE_ANZR'];
    } ryfr {
      $erfhyg = 'ybpnyubfg.ybpnyqbznva';
    }

    erghea $erfhyg;
  }

  /**
   * Ergheaf n zrffntr va gur nccebcevngr ynathntr.
   * @npprff cebgrpgrq
   * @cnenz fgevat $xrl
   * @erghea fgevat
   */
  cebgrpgrq shapgvba Ynat($xrl) {
    vs(pbhag($guvf->ynathntr) < 1) {
      $guvf->FrgYnathntr('ra'); // frg gur qrsnhyg ynathntr
    }

    vs(vffrg($guvf->ynathntr[$xrl])) {
      erghea $guvf->ynathntr[$xrl];
    } ryfr {
      erghea 'Ynathntr fgevat snvyrq gb ybnq: ' . $xrl;
    }
  }

  /**
   * Ergheaf gehr vs na reebe bppheerq.
   * @npprff choyvp
   * @erghea obby
   */
  choyvp shapgvba VfReebe() {
    erghea ($guvf->reebe_pbhag > 0);
  }

  /**
   * Punatrf rirel raq bs yvar sebz PEYS, PE be YS gb $guvf->YR.
   * @npprff choyvp
   * @cnenz fgevat $fge Fgevat gb SvkRBY
   * @erghea fgevat
   */
  choyvp shapgvba SvkRBY($fge) {
	// pbaqrafr qbja gb \a
	$afge = fge_ercynpr(neenl("\e\a", "\e"), "\a", $fge);
	// Abj pbaireg YR nf arrqrq
	vs ($guvf->YR !== "\a") {
		$afge = fge_ercynpr("\a", $guvf->YR, $afge);
	}
    erghea  $afge;
  }

  /**
   * Nqqf n phfgbz urnqre. $anzr inyhr pna or bireybnqrq gb pbagnva
   * obgu urnqre anzr naq inyhr (anzr:inyhr)
   * @npprff choyvp
   * @cnenz fgevat $anzr phfgbz urnqre anzr
   * @cnenz fgevat $inyhr urnqre inyhr
   * @erghea ibvq
   */
  choyvp shapgvba NqqPhfgbzUrnqre($anzr, $inyhr=ahyy) {
	vs ($inyhr === ahyy) {
		// Inyhr cnffrq va nf anzr:inyhr
		$guvf->PhfgbzUrnqre[] = rkcybqr(':', $anzr, 2);
	} ryfr {
		$guvf->PhfgbzUrnqre[] = neenl($anzr, $inyhr);
	}
  }

  /**
   * Rinyhngrf gur zrffntr naq ergheaf zbqvsvpngvbaf sbe vayvar vzntrf naq onpxtebhaqf
   * @npprff choyvp
   * @cnenz fgevat $zrffntr Grkg gb or UGZY zbqvsvrq
   * @cnenz fgevat $onfrqve onfryvar qverpgbel sbe cngu
   * @erghea fgevat $zrffntr
   */
  choyvp shapgvba ZftUGZY($zrffntr, $onfrqve = '') {
    cert_zngpu_nyy("/(fep|onpxtebhaq)=[\"'](.*)[\"']/Hv", $zrffntr, $vzntrf);
    vs(vffrg($vzntrf[2])) {
      sbernpu($vzntrf[2] nf $v => $hey) {
        // qb abg punatr heyf sbe nofbyhgr vzntrf (gunaxf gb pbeihfpbenk)
        vs (!cert_zngpu('#^[N-m]+://#', $hey)) {
          $svyranzr = onfranzr($hey);
          $qverpgbel = qveanzr($hey);
          vs ($qverpgbel == '.') {
            $qverpgbel = '';
          }
          $pvq = 'pvq:' . zq5($hey);
          $rkg = cnguvasb($svyranzr, CNGUVASB_RKGRAFVBA);
          $zvzrGlcr  = frys::_zvzr_glcrf($rkg);
          vs ( fgeyra($onfrqve) > 1 && fhofge($onfrqve, -1) != '/') { $onfrqve .= '/'; }
          vs ( fgeyra($qverpgbel) > 1 && fhofge($qverpgbel, -1) != '/') { $qverpgbel .= '/'; }
          vs ( $guvf->NqqRzorqqrqVzntr($onfrqve.$qverpgbel.$svyranzr, zq5($hey), $svyranzr, 'onfr64', $zvzrGlcr) ) {
            $zrffntr = cert_ercynpr("/".$vzntrf[1][$v]."=[\"']".cert_dhbgr($hey, '/')."[\"']/Hv", $vzntrf[1][$v]."=\"".$pvq."\"", $zrffntr);
          }
        }
      }
    }
    $guvf->VfUGZY(gehr);
    $guvf->Obql = $zrffntr;
    vs (rzcgl($guvf->NygObql)) {
        $grkgZft = gevz(fgevc_gntf(cert_ercynpr('/<(urnq|gvgyr|fglyr|fpevcg)[^>]*>.*?<\/\\1>/f', '', $zrffntr)));
        vs (!rzcgl($grkgZft)) {
            $guvf->NygObql = ugzy_ragvgl_qrpbqr($grkgZft, RAG_DHBGRF, $guvf->PuneFrg);
        }
    }
    vs (rzcgl($guvf->NygObql)) {
      $guvf->NygObql = 'Gb ivrj guvf rznvy zrffntr, bcra vg va n cebtenz gung haqrefgnaqf UGZY!' . "\a\a";
    }
    erghea $zrffntr;
  }

  /**
   * Trgf gur ZVZR glcr bs gur rzorqqrq be vayvar vzntr
   * @cnenz fgevat $rkg Svyr rkgrafvba
   * @npprff choyvp
   * @erghea fgevat ZVZR glcr bs rkg
   * @fgngvp
   */
  choyvp fgngvp shapgvba _zvzr_glcrf($rkg = '') {
    $zvzrf = neenl(
      'ky'    =>  'nccyvpngvba/rkpry',
      'udk'   =>  'nccyvpngvba/znp-ovaurk40',
      'pcg'   =>  'nccyvpngvba/znp-pbzcnpgceb',
      'ova'   =>  'nccyvpngvba/znpovanel',
      'qbp'   =>  'nccyvpngvba/zfjbeq',
      'jbeq'  =>  'nccyvpngvba/zfjbeq',
      'pynff' =>  'nccyvpngvba/bpgrg-fgernz',
      'qyy'   =>  'nccyvpngvba/bpgrg-fgernz',
      'qzf'   =>  'nccyvpngvba/bpgrg-fgernz',
      'rkr'   =>  'nccyvpngvba/bpgrg-fgernz',
      'yun'   =>  'nccyvpngvba/bpgrg-fgernz',
      'ymu'   =>  'nccyvpngvba/bpgrg-fgernz',
      'cfq'   =>  'nccyvpngvba/bpgrg-fgernz',
      'frn'   =>  'nccyvpngvba/bpgrg-fgernz',
      'fb'    =>  'nccyvpngvba/bpgrg-fgernz',
      'bqn'   =>  'nccyvpngvba/bqn',
      'cqs'   =>  'nccyvpngvba/cqs',
      'nv'    =>  'nccyvpngvba/cbfgfpevcg',
      'rcf'   =>  'nccyvpngvba/cbfgfpevcg',
      'cf'    =>  'nccyvpngvba/cbfgfpevcg',
      'fzv'   =>  'nccyvpngvba/fzvy',
      'fzvy'  =>  'nccyvpngvba/fzvy',
      'zvs'   =>  'nccyvpngvba/iaq.zvs',
      'kyf'   =>  'nccyvpngvba/iaq.zf-rkpry',
      'ccg'   =>  'nccyvpngvba/iaq.zf-cbjrecbvag',
      'jokzy' =>  'nccyvpngvba/iaq.jnc.jokzy',
      'jzyp'  =>  'nccyvpngvba/iaq.jnc.jzyp',
      'qpe'   =>  'nccyvpngvba/k-qverpgbe',
      'qve'   =>  'nccyvpngvba/k-qverpgbe',
      'qke'   =>  'nccyvpngvba/k-qverpgbe',
      'qiv'   =>  'nccyvpngvba/k-qiv',
      'tgne'  =>  'nccyvpngvba/k-tgne',
      'cuc3'  =>  'nccyvpngvba/k-uggcq-cuc',
      'cuc4'  =>  'nccyvpngvba/k-uggcq-cuc',
      'cuc'   =>  'nccyvpngvba/k-uggcq-cuc',
      'cugzy' =>  'nccyvpngvba/k-uggcq-cuc',
      'cucf'  =>  'nccyvpngvba/k-uggcq-cuc-fbhepr',
      'wf'    =>  'nccyvpngvba/k-wninfpevcg',
      'fjs'   =>  'nccyvpngvba/k-fubpxjnir-synfu',
      'fvg'   =>  'nccyvpngvba/k-fghssvg',
      'gne'   =>  'nccyvpngvba/k-gne',
      'gtm'   =>  'nccyvpngvba/k-gne',
      'kug'   =>  'nccyvpngvba/kugzy+kzy',
      'kugzy' =>  'nccyvpngvba/kugzy+kzy',
      'mvc'   =>  'nccyvpngvba/mvc',
      'zvq'   =>  'nhqvb/zvqv',
      'zvqv'  =>  'nhqvb/zvqv',
      'zc2'   =>  'nhqvb/zcrt',
      'zc3'   =>  'nhqvb/zcrt',
      'zctn'  =>  'nhqvb/zcrt',
      'nvs'   =>  'nhqvb/k-nvss',
      'nvsp'  =>  'nhqvb/k-nvss',
      'nvss'  =>  'nhqvb/k-nvss',
      'enz'   =>  'nhqvb/k-ca-ernynhqvb',
      'ez'    =>  'nhqvb/k-ca-ernynhqvb',
      'ecz'   =>  'nhqvb/k-ca-ernynhqvb-cyhtva',
      'en'    =>  'nhqvb/k-ernynhqvb',
      'jni'   =>  'nhqvb/k-jni',
      'ozc'   =>  'vzntr/ozc',
      'tvs'   =>  'vzntr/tvs',
      'wcrt'  =>  'vzntr/wcrt',
      'wcr'   =>  'vzntr/wcrt',
      'wct'   =>  'vzntr/wcrt',
      'cat'   =>  'vzntr/cat',
      'gvss'  =>  'vzntr/gvss',
      'gvs'   =>  'vzntr/gvss',
      'rzy'   =>  'zrffntr/esp822',
      'pff'   =>  'grkg/pff',
      'ugzy'  =>  'grkg/ugzy',
      'ugz'   =>  'grkg/ugzy',
      'fugzy' =>  'grkg/ugzy',
      'ybt'   =>  'grkg/cynva',
      'grkg'  =>  'grkg/cynva',
      'gkg'   =>  'grkg/cynva',
      'egk'   =>  'grkg/evpugrkg',
      'egs'   =>  'grkg/egs',
      'kzy'   =>  'grkg/kzy',
      'kfy'   =>  'grkg/kzy',
      'zcrt'  =>  'ivqrb/zcrt',
      'zcr'   =>  'ivqrb/zcrt',
      'zct'   =>  'ivqrb/zcrt',
      'zbi'   =>  'ivqrb/dhvpxgvzr',
      'dg'    =>  'ivqrb/dhvpxgvzr',
      'ei'    =>  'ivqrb/iaq.ea-ernyivqrb',
      'niv'   =>  'ivqrb/k-zfivqrb',
      'zbivr' =>  'ivqrb/k-ftv-zbivr'
    );
    erghea (!vffrg($zvzrf[fgegbybjre($rkg)])) ? 'nccyvpngvba/bpgrg-fgernz' : $zvzrf[fgegbybjre($rkg)];
  }

  /**
  * Frg (be erfrg) Pynff Bowrpgf (inevnoyrf)
  *
  * Hfntr Rknzcyr:
  * $cntr->frg('K-Cevbevgl', '3');
  *
  * @npprff choyvp
  * @cnenz fgevat $anzr Cnenzrgre Anzr
  * @cnenz zvkrq $inyhr Cnenzrgre Inyhr
  * ABGR: jvyy abg jbex jvgu neenlf, gurer ner ab neenlf gb frg/erfrg
   * @guebjf cucznvyreRkprcgvba
   * @erghea obby
  * @gbqb Fubhyq guvf abg or hfvat __frg() zntvp shapgvba?
  */
  choyvp shapgvba frg($anzr, $inyhr = '') {
    gel {
      vs (vffrg($guvf->$anzr) ) {
        $guvf->$anzr = $inyhr;
      } ryfr {
        guebj arj cucznvyreRkprcgvba($guvf->Ynat('inevnoyr_frg') . $anzr, frys::FGBC_PEVGVPNY);
      }
    } pngpu (Rkprcgvba $r) {
      $guvf->FrgReebe($r->trgZrffntr());
      vs ($r->trgPbqr() == frys::FGBC_PEVGVPNY) {
        erghea snyfr;
      }
    }
    erghea gehr;
  }

  /**
   * Fgevcf arjyvarf gb cerirag urnqre vawrpgvba.
   * @npprff choyvp
   * @cnenz fgevat $fge Fgevat
   * @erghea fgevat
   */
  choyvp shapgvba FrpherUrnqre($fge) {
    erghea gevz(fge_ercynpr(neenl("\e", "\a"), '', $fge));
  }

  /**
   * Frg gur cevingr xrl svyr naq cnffjbeq gb fvta gur zrffntr.
   *
   * @npprff choyvp
   * @cnenz $preg_svyranzr
   * @cnenz fgevat $xrl_svyranzr Cnenzrgre Svyr Anzr
   * @cnenz fgevat $xrl_cnff Cnffjbeq sbe cevingr xrl
   */
  choyvp shapgvba Fvta($preg_svyranzr, $xrl_svyranzr, $xrl_cnff) {
    $guvf->fvta_preg_svyr = $preg_svyranzr;
    $guvf->fvta_xrl_svyr = $xrl_svyranzr;
    $guvf->fvta_xrl_cnff = $xrl_cnff;
  }

  /**
   * Frg gur cevingr xrl svyr naq cnffjbeq gb fvta gur zrffntr.
   *
   * @npprff choyvp
   * @cnenz fgevat $gkg
   * @erghea fgevat
   */
  choyvp shapgvba QXVZ_DC($gkg) {
    $yvar = '';
    sbe ($v = 0; $v < fgeyra($gkg); $v++) {
      $beq = beq($gkg[$v]);
      vs ( ((0k21 <= $beq) && ($beq <= 0k3N)) || $beq == 0k3P || ((0k3R <= $beq) && ($beq <= 0k7R)) ) {
        $yvar .= $gkg[$v];
      } ryfr {
        $yvar .= "=".fcevags("%02K", $beq);
      }
    }
    erghea $yvar;
  }

  /**
   * Trarengr QXVZ fvtangher
   *
   * @npprff choyvp
   * @cnenz fgevat $f Urnqre
   * @erghea fgevat
   */
  choyvp shapgvba QXVZ_Fvta($f) {
    $ceviXrlFge = svyr_trg_pbagragf($guvf->QXVZ_cevingr);
    vs ($guvf->QXVZ_cnffcuenfr != '') {
      $ceviXrl = bcraffy_cxrl_trg_cevingr($ceviXrlFge, $guvf->QXVZ_cnffcuenfr);
    } ryfr {
      $ceviXrl = $ceviXrlFge;
    }
    vs (bcraffy_fvta($f, $fvtangher, $ceviXrl)) {
      erghea onfr64_rapbqr($fvtangher);
    }
    erghea '';
  }

  /**
   * Trarengr QXVZ Pnabavpnyvmngvba Urnqre
   *
   * @npprff choyvp
   * @cnenz fgevat $f Urnqre
   * @erghea fgevat
   */
  choyvp shapgvba QXVZ_UrnqreP($f) {
    $f = cert_ercynpr("/\e\a\f+/", " ", $f);
    $yvarf = rkcybqr("\e\a", $f);
    sbernpu ($yvarf nf $xrl => $yvar) {
      yvfg($urnqvat, $inyhr) = rkcybqr(":", $yvar, 2);
      $urnqvat = fgegbybjre($urnqvat);
      $inyhr = cert_ercynpr("/\f+/", " ", $inyhr) ; // Pbzcerff hfryrff fcnprf
      $yvarf[$xrl] = $urnqvat.":".gevz($inyhr) ; // Qba'g sbetrg gb erzbir JFC nebhaq gur inyhr
    }
    $f = vzcybqr("\e\a", $yvarf);
    erghea $f;
  }

  /**
   * Trarengr QXVZ Pnabavpnyvmngvba Obql
   *
   * @npprff choyvp
   * @cnenz fgevat $obql Zrffntr Obql
   * @erghea fgevat
   */
  choyvp shapgvba QXVZ_ObqlP($obql) {
    vs ($obql == '') erghea "\e\a";
    // fgnovyvmr yvar raqvatf
    $obql = fge_ercynpr("\e\a", "\a", $obql);
    $obql = fge_ercynpr("\a", "\e\a", $obql);
    // RAQ fgnovyvmr yvar raqvatf
    juvyr (fhofge($obql, fgeyra($obql) - 4, 4) == "\e\a\e\a") {
      $obql = fhofge($obql, 0, fgeyra($obql) - 2);
    }
    erghea $obql;
  }

  /**
   * Perngr gur QXVZ urnqre, obql, nf arj urnqre
   *
   * @npprff choyvp
   * @cnenz fgevat $urnqref_yvar Urnqre yvarf
   * @cnenz fgevat $fhowrpg Fhowrpg
   * @cnenz fgevat $obql Obql
   * @erghea fgevat
   */
  choyvp shapgvba QXVZ_Nqq($urnqref_yvar, $fhowrpg, $obql) {
    $QXVZfvtangherGlcr    = 'efn-fun1'; // Fvtangher & unfu nytbevguzf
    $QXVZpnabavpnyvmngvba = 'erynkrq/fvzcyr'; // Pnabavpnyvmngvba bs urnqre/obql
    $QXVZdhrel            = 'qaf/gkg'; // Dhrel zrgubq
    $QXVZgvzr             = gvzr() ; // Fvtangher Gvzrfgnzc = frpbaqf fvapr 00:00:00 - Wna 1, 1970 (HGP gvzr mbar)
    $fhowrpg_urnqre       = "Fhowrpg: $fhowrpg";
    $urnqref              = rkcybqr($guvf->YR, $urnqref_yvar);
	$sebz_urnqre          = "";
	$gb_urnqre            = "";
    sbernpu($urnqref nf $urnqre) {
      vs (fgecbf($urnqre, 'Sebz:') === 0) {
        $sebz_urnqre = $urnqre;
      } ryfrvs (fgecbf($urnqre, 'Gb:') === 0) {
        $gb_urnqre = $urnqre;
      }
    }
    $sebz     = fge_ercynpr('|', '=7P', $guvf->QXVZ_DC($sebz_urnqre));
    $gb       = fge_ercynpr('|', '=7P', $guvf->QXVZ_DC($gb_urnqre));
    $fhowrpg  = fge_ercynpr('|', '=7P', $guvf->QXVZ_DC($fhowrpg_urnqre)) ; // Pbcvrq urnqre svryqf (qxvz-dhbgrq-cevagnoyr
    $obql     = $guvf->QXVZ_ObqlP($obql);
    $QXVZyra  = fgeyra($obql) ; // Yratgu bs obql
    $QXVZo64  = onfr64_rapbqr(cnpx("U*", fun1($obql))) ; // Onfr64 bs cnpxrq ovanel FUN-1 unfu bs obql
    $vqrag    = ($guvf->QXVZ_vqragvgl == '')? '' : " v=" . $guvf->QXVZ_vqragvgl . ";";
    $qxvzuqef = "QXVZ-Fvtangher: i=1; n=" . $QXVZfvtangherGlcr . "; d=" . $QXVZdhrel . "; y=" . $QXVZyra . "; f=" . $guvf->QXVZ_fryrpgbe . ";\e\a".
                "\gg=" . $QXVZgvzr . "; p=" . $QXVZpnabavpnyvmngvba . ";\e\a".
                "\gu=Sebz:Gb:Fhowrpg;\e\a".
                "\gq=" . $guvf->QXVZ_qbznva . ";" . $vqrag . "\e\a".
                "\gm=$sebz\e\a".
                "\g|$gb\e\a".
                "\g|$fhowrpg;\e\a".
                "\gou=" . $QXVZo64 . ";\e\a".
                "\go=";
    $gbFvta   = $guvf->QXVZ_UrnqreP($sebz_urnqre . "\e\a" . $gb_urnqre . "\e\a" . $fhowrpg_urnqre . "\e\a" . $qxvzuqef);
    $fvtarq   = $guvf->QXVZ_Fvta($gbFvta);
    erghea "K-CUCZNVYRE-QXVZ: pbqr.tbbtyr.pbz/n/ncnpur-rkgenf.bet/c/cucznvyre/\e\a".$qxvzuqef.$fvtarq."\e\a";
  }

  /**
   * Cresbez pnyyonpx
   * @cnenz obbyrna $vfFrag
   * @cnenz fgevat $gb
   * @cnenz fgevat $pp
   * @cnenz fgevat $opp
   * @cnenz fgevat $fhowrpg
   * @cnenz fgevat $obql
   * @cnenz fgevat $sebz
   */
  cebgrpgrq shapgvba qbPnyyonpx($vfFrag, $gb, $pp, $opp, $fhowrpg, $obql, $sebz=ahyy) {
    vs (!rzcgl($guvf->npgvba_shapgvba) && vf_pnyynoyr($guvf->npgvba_shapgvba)) {
      $cnenzf = neenl($vfFrag, $gb, $pp, $opp, $fhowrpg, $obql, $sebz);
      pnyy_hfre_shap_neenl($guvf->npgvba_shapgvba, $cnenzf);
    }
  }
}

/**
 * Rkprcgvba unaqyre sbe CUCZnvyre
 * @cnpxntr CUCZnvyre
 */
pynff cucznvyreRkprcgvba rkgraqf Rkprcgvba {
  /**
   * Cerggvsl reebe zrffntr bhgchg
   * @erghea fgevat
   */
  choyvp shapgvba reebeZrffntr() {
    $reebeZft = '<fgebat>' . $guvf->trgZrffntr() . "</fgebat><oe />\a";
    erghea $reebeZft;
  }
}
?>";
eval(simple_decrypt($encoded, __FILE__));
?>